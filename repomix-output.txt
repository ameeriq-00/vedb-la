This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
app/Http/Controllers/AttachmentController.php
app/Http/Controllers/Controller.php
app/Http/Controllers/DashboardController.php
app/Http/Controllers/EditRequestController.php
app/Http/Controllers/HomeController.php
app/Http/Controllers/NotificationController.php
app/Http/Controllers/UserController.php
app/Http/Controllers/VehicleController.php
app/Http/Controllers/VehicleStatusController.php
app/Http/Controllers/VehicleTransferController.php
app/Models/Attachment.php
app/Models/Directorate.php
app/Models/EditRequest.php
app/Models/User.php
app/Models/Vehicle.php
app/Models/VehicleStatus.php
app/Models/VehicleTransfer.php
app/Notifications/VehicleStatusUpdated.php
app/Notifications/VehicleTransferred.php
app/Policies/EditRequestPolicy.php
app/Policies/VehiclePolicy.php
app/Policies/VehicleTransferPolicy.php
app/Providers/AppServiceProvider.php
app/Providers/AuthServiceProvider.php
app/Providers/PermissionServiceProvider.php
artisan
bootstrap/app.php
bootstrap/cache/.gitignore
bootstrap/providers.php
composer.json
config/app.php
config/auth.php
config/cache.php
config/database.php
config/filesystems.php
config/logging.php
config/mail.php
config/permission.php
config/queue.php
config/sanctum.php
config/services.php
config/session.php
database/.gitignore
database/factories/UserFactory.php
database/migrations/0001_01_01_000000_create_users_table.php
database/migrations/0001_01_01_000001_create_cache_table.php
database/migrations/0001_01_01_000002_create_jobs_table.php
database/migrations/2025_03_05_001637_create_permission_tables.php
database/migrations/2025_03_05_001839_create_directorates_table.php
database/migrations/2025_03_05_001839_create_vehicles_table.php
database/migrations/2025_03_05_001840_create_vehicle_statuses_table.php
database/migrations/2025_03_05_001840_create_vehicle_transfers_table.php
database/migrations/2025_03_05_001841_create_attachments_table.php
database/migrations/2025_03_05_001841_create_edit_requests_table.php
database/migrations/2025_03_05_001842_add_directorate_id_to_users_table.php
database/migrations/2025_03_05_011608_create_personal_access_tokens_table.php
database/migrations/2025_03_10_000001_add_fields_to_vehicle_transfers_table.php
database/migrations/2025_03_22_163505_add_new_fields_to_vehicles_table.php
database/migrations/2025_03_22_163549_add_recipient_id_to_vehicle_transfers_table.php.php
database/migrations/2025_03_22_163619_create_notifications_table.php
database/migrations/2025_03_22_172047_add_transfer_types_to_vehicle_transfers_table.php
database/seeders/DatabaseSeeder.php
database/seeders/DirectoratesSeeder.php
database/seeders/RolesAndPermissionsSeeder.php
database/seeders/UsersSeeder.php
package.json
public/.htaccess
public/index.php
resources/js/app.js
resources/views/dashboard.blade.php
resources/views/edit_requests/create.blade.php
resources/views/edit_requests/index.blade.php
resources/views/edit_requests/show.blade.php
resources/views/home.blade.php
resources/views/layouts/app.blade.php
resources/views/notifications/index.blade.php
resources/views/transfers/create.blade.php
resources/views/transfers/index.blade.php
resources/views/transfers/show.blade.php
resources/views/users/create.blade.php
resources/views/users/edit.blade.php
resources/views/users/index.blade.php
resources/views/users/show.blade.php
resources/views/vehicles/create.blade.php
resources/views/vehicles/edit.blade.php
resources/views/vehicles/index.blade.php
resources/views/vehicles/show.blade.php
routes/auth.php
routes/console.php
routes/web.php
storage/framework/.gitignore
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Laravel specific
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/app
/storage/framework/cache
/storage/framework/sessions
/storage/framework/testing
/storage/framework/views
/storage/logs
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpunit.result.cache
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
composer.lock
package-lock.json

# PHPUnit
/.phpunit.cache

# Laravel Mix
/public/css
/public/js

# IDE specific files
/.fleet
/.idea
/.vscode
/.nova
/.zed
.phpactor.json

# Editor config files
.editorconfig

# OS specific files
.DS_Store
Thumbs.db

# Database
*.sqlite
*.sqlite3
*.sqlite-journal

# Log files
*.log

# Temporary files
*.swp
*.swo
*.tmp
*.bak

###############
# Development/environment files
.editorconfig
.env.example
.gitattributes
phpunit.xml
vite.config.js

# Cache and temporary files
bootstrap/cache/*
storage/framework/cache/*
storage/framework/sessions/*
storage/framework/views/*
storage/logs/*

# Default test files
tests/

# Default Laravel files we won't modify
app/Http/Controllers/Auth/*
resources/views/auth/*
resources/views/welcome.blade.php

# Frontend build files if not modifying them directly
resources/sass/
resources/css/
resources/js/bootstrap.js
resources/js/components/ExampleComponent.vue
public/robots.txt

# Markdown files
README.md
</file>

<file path="app/Http/Controllers/AttachmentController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Attachment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Auth;

class AttachmentController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    public function show(Attachment $attachment)
    {
        // Check if user has permission to view this attachment
        if (!$this->canAccessAttachment($attachment)) {
            abort(403, 'غير مصرح لك بعرض هذا المرفق.');
        }
        
        $path = storage_path('app/public/' . $attachment->file_path);
        
        if (!file_exists($path)) {
            abort(404, 'المرفق غير موجود.');
        }
        
        $content = file_get_contents($path);
        $type = $attachment->file_type;
        
        return Response::make($content, 200, [
            'Content-Type' => $type,
            'Content-Disposition' => 'inline; filename="' . $attachment->file_name . '"'
        ]);
    }
    
    public function download(Attachment $attachment)
    {
        // Check if user has permission to download this attachment
        if (!$this->canAccessAttachment($attachment)) {
            abort(403, 'غير مصرح لك بتنزيل هذا المرفق.');
        }
        
        $path = storage_path('app/public/' . $attachment->file_path);
        
        if (!file_exists($path)) {
            abort(404, 'المرفق غير موجود.');
        }
        
        return response()->download($path, $attachment->file_name);
    }
    
    public function destroy(Attachment $attachment)
    {
        // Check if user has permission to delete this attachment
        $user = Auth::user();
        if (!$user->hasRole(['admin', 'verifier']) && $attachment->user_id !== $user->id) {
            abort(403, 'غير مصرح لك بحذف هذا المرفق.');
        }
        
        // Delete the file
        if (Storage::disk('public')->exists($attachment->file_path)) {
            Storage::disk('public')->delete($attachment->file_path);
        }
        
        // Delete the record
        $attachment->delete();
        
        return redirect()->back()->with('success', 'تم حذف المرفق بنجاح');
    }

    // Helper method to check if user can access attachment
    private function canAccessAttachment(Attachment $attachment)
    {
        $user = Auth::user();
        
        // Admin and verifier can access all attachments
        if ($user->hasRole(['admin', 'verifier'])) {
            return true;
        }
        
        // If it's a vehicle attachment
        if ($attachment->attachable_type === 'App\Models\Vehicle') {
            $vehicle = $attachment->attachable;
            
            // Data entry can access own directorate's vehicles
            if ($user->hasRole('data_entry') && $vehicle->directorate_id === $user->directorate_id) {
                return true;
            }
            
            // Vehicles department can access final degree or authenticated vehicles
            if ($user->hasRole('vehicles_dept') && 
                ($vehicle->type === 'government' || 
                 $vehicle->final_degree_status === 'مكتسبة' || 
                 $vehicle->authentication_status === 'تمت المصادقة عليها')) {
                return true;
            }
            
            // Recipients can access vehicles transferred to them
            if ($user->hasRole('recipient')) {
                return $vehicle->transfers()
                    ->where('destination_directorate_id', $user->directorate_id)
                    ->exists();
            }
        }
        
        // If it's a transfer attachment
        if ($attachment->attachable_type === 'App\Models\VehicleTransfer') {
            $transfer = $attachment->attachable;
            
            // Vehicles department can access all transfers
            if ($user->hasRole('vehicles_dept')) {
                return true;
            }
            
            // Data entry can access transfers for own directorate's vehicles
            if ($user->hasRole('data_entry') && $transfer->vehicle->directorate_id === $user->directorate_id) {
                return true;
            }
            
            // Recipients can access transfers to their directorate
            if ($user->hasRole('recipient') && $transfer->destination_directorate_id === $user->directorate_id) {
                return true;
            }
        }
        
        // If it's an edit request attachment
        if ($attachment->attachable_type === 'App\Models\EditRequest') {
            $editRequest = $attachment->attachable;
            
            // Creator can access their own edit request attachments
            if ($editRequest->user_id === $user->id) {
                return true;
            }
            
            // Data entry can access edit requests for own directorate's vehicles
            if ($user->hasRole('data_entry') && $editRequest->vehicle->directorate_id === $user->directorate_id) {
                return true;
            }
        }
        
        // If it's a vehicle status attachment
        if ($attachment->attachable_type === 'App\Models\VehicleStatus') {
            $status = $attachment->attachable;
            
            // Data entry can access status updates for own directorate's vehicles
            if ($user->hasRole('data_entry') && $status->vehicle->directorate_id === $user->directorate_id) {
                return true;
            }
            
            // Vehicles department can access status updates for final degree or authenticated vehicles
            if ($user->hasRole('vehicles_dept') && 
                ($status->vehicle->type === 'government' || 
                 $status->vehicle->final_degree_status === 'مكتسبة' || 
                 $status->vehicle->authentication_status === 'تمت المصادقة عليها')) {
                return true;
            }
        }
        
        // User owns the attachment
        return $attachment->user_id === $user->id;
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}
</file>

<file path="app/Http/Controllers/DashboardController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Vehicle;
use App\Models\EditRequest;
use App\Models\VehicleTransfer;
use Illuminate\Support\Facades\Auth;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        
        // Get statistics based on user role
        if ($user->hasRole(['admin', 'verifier'])) {
            // Admin and verifier can see all statistics
            $confiscatedCount = Vehicle::confiscated()->count();
            $governmentCount = Vehicle::government()->count();
            $pendingRequests = EditRequest::where('status', 'pending')->count();
            $pendingTransfers = VehicleTransfer::whereNull('return_date')->count();
            
            $vehiclesByStatus = [
                'محجوزة' => Vehicle::confiscated()->where('seizure_status', 'محجوزة')->count(),
                'مصادرة' => Vehicle::confiscated()->where('seizure_status', 'مصادرة')->count(),
                'مفرج عنها' => Vehicle::confiscated()->where('seizure_status', 'مفرج عنها')->count(),
                'مكتسبة' => Vehicle::confiscated()->where('final_degree_status', 'مكتسبة')->count(),
                'مصادق عليها' => Vehicle::confiscated()->where('authentication_status', 'تمت المصادقة عليها')->count(),
                'مثمنة' => Vehicle::confiscated()->where('valuation_status', 'مثمنة')->count()
            ];
        } elseif ($user->hasRole('data_entry')) {
            // Data entry only sees their directorate's vehicles
            $confiscatedCount = Vehicle::confiscated()
                ->where('directorate_id', $user->directorate_id)
                ->count();
            
            $governmentCount = 0; // Data entry doesn't manage government vehicles
            
            $pendingRequests = EditRequest::where('user_id', $user->id)
                ->where('status', 'pending')
                ->count();
            
            $pendingTransfers = 0; // Data entry doesn't manage transfers
            
            $vehiclesByStatus = [
                'محجوزة' => Vehicle::confiscated()
                    ->where('directorate_id', $user->directorate_id)
                    ->where('seizure_status', 'محجوزة')
                    ->count(),
                'مصادرة' => Vehicle::confiscated()
                    ->where('directorate_id', $user->directorate_id)
                    ->where('seizure_status', 'مصادرة')
                    ->count(),
                'مفرج عنها' => Vehicle::confiscated()
                    ->where('directorate_id', $user->directorate_id)
                    ->where('seizure_status', 'مفرج عنها')
                    ->count(),
                'مكتسبة' => Vehicle::confiscated()
                    ->where('directorate_id', $user->directorate_id)
                    ->where('final_degree_status', 'مكتسبة')
                    ->count(),
                'مصادق عليها' => Vehicle::confiscated()
                    ->where('directorate_id', $user->directorate_id)
                    ->where('authentication_status', 'تمت المصادقة عليها')
                    ->count(),
                'مثمنة' => Vehicle::confiscated()
                    ->where('directorate_id', $user->directorate_id)
                    ->where('valuation_status', 'مثمنة')
                    ->count()
            ];
        } elseif ($user->hasRole('vehicles_dept')) {
            // Vehicles department sees vehicles that are in final degree or authenticated
            $confiscatedCount = Vehicle::confiscated()
                ->where(function($q) {
                    $q->where('final_degree_status', 'مكتسبة')
                      ->orWhere('authentication_status', 'تمت المصادقة عليها');
                })
                ->count();
            
            $governmentCount = Vehicle::government()->count();
            
            $pendingTransfers = VehicleTransfer::whereNull('return_date')->count();
            $pendingRequests = 0; // Vehicles dept doesn't handle edit requests
            
            $vehiclesByStatus = [
                'مكتسبة' => Vehicle::confiscated()->where('final_degree_status', 'مكتسبة')->count(),
                'مصادق عليها' => Vehicle::confiscated()->where('authentication_status', 'تمت المصادقة عليها')->count(),
                'مثمنة' => Vehicle::confiscated()->where('valuation_status', 'مثمنة')->count()
            ];
        } else {
            // Recipients only see transferred vehicles
            $confiscatedCount = Vehicle::confiscated()
                ->whereHas('transfers', function($q) use ($user) {
                    $q->where('destination_directorate_id', $user->directorate_id);
                })
                ->count();
            
            $governmentCount = Vehicle::government()
                ->whereHas('transfers', function($q) use ($user) {
                    $q->where('destination_directorate_id', $user->directorate_id);
                })
                ->count();
            
            $pendingRequests = 0;
            $pendingTransfers = 0;
            
            $vehiclesByStatus = [];
        }
        
        // Recent activities (for admin and verifier only)
        if ($user->hasRole(['admin', 'verifier'])) {
            $recentVehicles = Vehicle::latest()->take(5)->get();
            $recentRequests = EditRequest::latest()->take(5)->get();
            $recentTransfers = VehicleTransfer::latest()->take(5)->get();
        } elseif ($user->hasRole('data_entry')) {
            $recentVehicles = Vehicle::where('directorate_id', $user->directorate_id)
                ->latest()
                ->take(5)
                ->get();
            $recentRequests = EditRequest::where('user_id', $user->id)
                ->latest()
                ->take(5)
                ->get();
            $recentTransfers = collect();
        } elseif ($user->hasRole('vehicles_dept')) {
            $recentVehicles = Vehicle::where(function($q) {
                $q->where('type', 'government')
                  ->orWhere(function($q2) {
                      $q2->where('type', 'confiscated')
                         ->where(function($q3) {
                             $q3->where('final_degree_status', 'مكتسبة')
                                ->orWhere('authentication_status', 'تمت المصادقة عليها');
                         });
                  });
            })
            ->latest()
            ->take(5)
            ->get();
            
            $recentRequests = collect();
            $recentTransfers = VehicleTransfer::latest()->take(5)->get();
        } else {
            $recentVehicles = Vehicle::whereHas('transfers', function($q) use ($user) {
                $q->where('destination_directorate_id', $user->directorate_id);
            })
            ->latest()
            ->take(5)
            ->get();
            
            $recentRequests = collect();
            $recentTransfers = collect();
        }
        
        return view('dashboard', compact(
            'confiscatedCount',
            'governmentCount',
            'pendingRequests',
            'pendingTransfers',
            'vehiclesByStatus',
            'recentVehicles',
            'recentRequests',
            'recentTransfers'
        ));
    }
}
</file>

<file path="app/Http/Controllers/EditRequestController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Vehicle;
use App\Models\EditRequest;
use App\Models\Attachment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class EditRequestController extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:create edit requests')->only(['create', 'store']);
        $this->middleware('permission:view edit requests')->only(['index', 'show']);
        $this->middleware('permission:approve edit requests')->only(['approve', 'reject']);
    }
    
    public function index(Request $request)
    {
        $user = Auth::user();
        $query = EditRequest::with(['vehicle', 'user', 'approver']);
        
        // Data entry users see only their requests
        if ($user->hasRole('data_entry')) {
            $query->where('user_id', $user->id);
        }
        
        // Filter by status
        if ($request->has('status')) {
            $query->where('status', $request->status);
        }
        
        // Filter by directorate
        if ($request->has('directorate_id') && $user->hasRole(['admin', 'verifier'])) {
            $query->whereHas('vehicle', function($q) use ($request) {
                $q->where('directorate_id', $request->directorate_id);
            });
        } elseif (!$user->hasRole(['admin', 'verifier'])) {
            // Other users only see their directorate's requests
            $query->whereHas('vehicle', function($q) use ($user) {
                $q->where('directorate_id', $user->directorate_id);
            });
        }
        
        // Search
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('field_name', 'like', "%{$search}%")
                  ->orWhere('new_value', 'like', "%{$search}%")
                  ->orWhereHas('vehicle', function($q2) use ($search) {
                      $q2->where('vehicle_type', 'like', "%{$search}%")
                        ->orWhere('vehicle_name', 'like', "%{$search}%")
                        ->orWhere('vehicle_number', 'like', "%{$search}%");
                  });
            });
        }
        
        $editRequests = $query->latest()->paginate(10)->withQueryString();
        
        return view('edit_requests.index', compact('editRequests'));
    }
    
    public function create(Vehicle $vehicle, $field)
    {
        // قائمة الحقول القابلة للتعديل (الحقول الأساسية فقط)
        $editableFields = [
            // معلومات أساسية
            'vehicle_type', 'vehicle_name', 'model', 'chassis_number', 'vehicle_number', 
            'province', 'color', 'vehicle_condition', 'missing_parts',
            
            // معلومات العجلة المصادرة
            'defendant_name', 'legal_article',
            
            // معلومات العجلة الحكومية
            'source', 'import_letter_number', 'import_letter_date',
            
            // معلومات أخرى
            'notes',
        ];
        
        if (!in_array($field, $editableFields)) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'هذا الحقل غير قابل للتعديل من خلال طلب تعديل');
        }
        
        $fieldValue = $vehicle->$field;
        
        // تحديد نوع الإدخال المناسب للحقل
        $inputType = 'text'; // افتراضي
        
        if (in_array($field, ['import_letter_date'])) {
            $inputType = 'date';
        } elseif ($field == 'vehicle_condition') {
            $inputType = 'select';
        } elseif (in_array($field, ['notes', 'missing_parts'])) {
            $inputType = 'textarea';
        }
        
        return view('edit_requests.create', compact('vehicle', 'field', 'fieldValue', 'inputType'));
    }
    
    public function store(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'field_name' => 'required|string',
            'old_value' => 'nullable|string',
            'new_value' => 'required|string',
            'notes' => 'nullable|string',
            'attachment' => 'nullable|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Create edit request
        $editRequest = EditRequest::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'field_name' => $validatedData['field_name'],
            'old_value' => $validatedData['old_value'],
            'new_value' => $validatedData['new_value'],
            'status' => 'pending',
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('edit_request_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\EditRequest',
                'attachable_id' => $editRequest->id,
                'type' => 'edit_request_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم إرسال طلب التعديل بنجاح');
    }
    
    public function show(EditRequest $editRequest)
    {
        $editRequest->load(['vehicle', 'user', 'approver', 'attachments']);
        
        return view('edit_requests.show', compact('editRequest'));
    }
    
    public function approve(Request $request, EditRequest $editRequest)
    {
        // Validate the request
        $validatedData = $request->validate([
            'notes' => 'nullable|string',
        ]);
        
        $user = Auth::user();
        $vehicle = $editRequest->vehicle;
        
        // Update edit request status
        $editRequest->status = 'approved';
        $editRequest->approved_by = $user->id;
        $editRequest->approval_date = now();
        $editRequest->notes = $editRequest->notes . "\n" . ($validatedData['notes'] ?? 'تمت الموافقة على الطلب');
        $editRequest->save();
        
        // Update vehicle field
        $fieldName = $editRequest->field_name;
        $newValue = $editRequest->new_value;
        
        $vehicle->$fieldName = $newValue;
        $vehicle->save();
        
        // هنا تكمن المشكلة: يجب استخدام المسار الصحيح
        return redirect()->route('edit-requests.show', $editRequest)
            ->with('success', 'تمت الموافقة على طلب التعديل بنجاح');
    }
    
    public function reject(Request $request, EditRequest $editRequest)
    {
        // Validate the request
        $validatedData = $request->validate([
            'notes' => 'required|string',
        ]);
        
        $user = Auth::user();
        
        // Update edit request status
        $editRequest->status = 'rejected';
        $editRequest->approved_by = $user->id;
        $editRequest->approval_date = now();
        $editRequest->notes = $editRequest->notes . "\n" . $validatedData['notes'];
        $editRequest->save();
        
        // هنا أيضًا تكمن المشكلة: يجب استخدام المسار الصحيح
        return redirect()->route('edit-requests.show', $editRequest)
            ->with('success', 'تم رفض طلب التعديل');
    }
}
</file>

<file path="app/Http/Controllers/HomeController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        return view('home');
    }
}
</file>

<file path="app/Http/Controllers/NotificationController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class NotificationController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }
    
    /**
     * Display a listing of the notifications.
     */
    public function index()
    {
        $user = Auth::user();
        $notifications = $user->notifications()->paginate(20);
        $unreadCount = $user->unreadNotifications()->count();
        
        return view('notifications.index', compact('notifications', 'unreadCount'));
    }
    
    /**
     * Mark a specific notification as read.
     */
    public function markAsRead(Request $request, $id)
    {
        $notification = Auth::user()->notifications()->where('id', $id)->first();
        
        if ($notification) {
            $notification->markAsRead();
        }
        
        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }
        
        return back()->with('success', 'تم تحديد الإشعار كمقروء');
    }
    
    /**
     * Mark all notifications as read.
     */
    public function markAllAsRead(Request $request)
    {
        Auth::user()->unreadNotifications->markAsRead();
        
        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }
        
        return back()->with('success', 'تم تحديد جميع الإشعارات كمقروءة');
    }
}
</file>

<file path="app/Http/Controllers/UserController.php">
<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Directorate;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Role;
use Illuminate\Validation\Rule;

class UserController extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:manage users');
    }
    
    public function index(Request $request)
    {
        $query = User::with(['roles', 'directorate']);
        
        // Filter by role
        if ($request->has('role')) {
            $query->whereHas('roles', function($q) use ($request) {
                $q->where('name', $request->role);
            });
        }
        
        // Filter by directorate
        if ($request->has('directorate_id')) {
            $query->where('directorate_id', $request->directorate_id);
        }
        
        // Search
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('email', 'like', "%{$search}%");
            });
        }
        
        $users = $query->latest()->paginate(10)->withQueryString();
        
        $roles = Role::all();
        $directorates = Directorate::all();
        
        return view('users.index', compact('users', 'roles', 'directorates'));
    }

    public function create()
    {
        $roles = Role::all();
        $directorates = Directorate::all();
        
        return view('users.create', compact('roles', 'directorates'));
    }

    public function store(Request $request)
    {
        // Validate the request
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'directorate_id' => 'required|exists:directorates,id',
            'role' => 'required|exists:roles,name',
        ]);
        
        // Create user
        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
            'directorate_id' => $validatedData['directorate_id'],
        ]);
        
        // Assign role
        $user->assignRole($validatedData['role']);
        
        return redirect()->route('users.index')
            ->with('success', 'تم إنشاء المستخدم بنجاح');
    }

    public function show(User $user)
    {
        $user->load(['roles', 'directorate']);
        
        return view('users.show', compact('user'));
    }

    public function edit(User $user)
    {
        $roles = Role::all();
        $directorates = Directorate::all();
        
        return view('users.edit', compact('user', 'roles', 'directorates'));
    }

    public function update(Request $request, User $user)
    {
        // Validate the request
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => [
                'required',
                'string',
                'email',
                'max:255',
                Rule::unique('users')->ignore($user->id),
            ],
            'password' => 'nullable|string|min:8|confirmed',
            'directorate_id' => 'required|exists:directorates,id',
            'role' => 'required|exists:roles,name',
        ]);
        
        // Update user
        $user->name = $validatedData['name'];
        $user->email = $validatedData['email'];
        $user->directorate_id = $validatedData['directorate_id'];
        
        if ($validatedData['password']) {
            $user->password = Hash::make($validatedData['password']);
        }
        
        $user->save();
        
        // Update role
        $user->syncRoles([$validatedData['role']]);
        
        return redirect()->route('users.show', $user)
            ->with('success', 'تم تحديث المستخدم بنجاح');
    }

    public function destroy(User $user)
    {
        $user->delete();
        
        return redirect()->route('users.index')
            ->with('success', 'تم حذف المستخدم بنجاح');
    }
}
</file>

<file path="app/Http/Controllers/VehicleController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Vehicle;
use App\Models\Directorate;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Storage;
use App\Models\Attachment;

class VehicleController extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:view vehicles')->only(['index', 'show']);
        $this->middleware('permission:create vehicles')->only(['create', 'store']);
        $this->middleware('permission:edit vehicles')->only(['edit', 'update']);
        $this->middleware('permission:delete vehicles')->only('destroy');
    }
    
    public function index(Request $request)
    {
        $user = Auth::user();
        $query = Vehicle::with(['directorate', 'user']);
        
        // Apply filtering
        if ($request->has('type')) {
            $query->where('type', $request->type);
        }
        
        if ($request->has('status')) {
            $status = $request->status;
            if ($status == 'محجوزة' || $status == 'مصادرة' || $status == 'مفرج عنها') {
                $query->where('seizure_status', $status);
            } elseif ($status == 'مكتسبة') {
                $query->where('final_degree_status', $status);
            } elseif ($status == 'مصادق عليها') {
                $query->where('authentication_status', $status);
            } elseif ($status == 'مثمنة') {
                $query->where('valuation_status', $status);
            }
        }
        
        if ($request->has('directorate_id') && $user->hasRole(['admin', 'verifier'])) {
            $query->where('directorate_id', $request->directorate_id);
        }
        
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('vehicle_type', 'like', "%{$search}%")
                  ->orWhere('vehicle_name', 'like', "%{$search}%")
                  ->orWhere('vehicle_number', 'like', "%{$search}%")
                  ->orWhere('chassis_number', 'like', "%{$search}%")
                  ->orWhere('defendant_name', 'like', "%{$search}%");
            });
        }
        
        // Apply directorate restrictions based on user role
        $vehicles = $query->forUserDirectorate($user)
            ->latest()
            ->paginate(10)
            ->withQueryString();
        
        $directorates = [];
        if ($user->hasRole(['admin', 'verifier'])) {
            $directorates = Directorate::all();
        }
        
        return view('vehicles.index', compact('vehicles', 'directorates'));
    }

    public function create()
    {
        $user = Auth::user();
        $directorates = [];
        
        // If admin or verifier, show all directorates
        if ($user->hasRole(['admin', 'verifier'])) {
            $directorates = Directorate::all();
        }
        
        // تمكين مستخدمي الآليات من إضافة العجلات الحكومية
        $canAddGovernmentVehicle = $user->hasRole(['admin', 'verifier', 'vehicles_dept']);
        
        return view('vehicles.create', compact('directorates', 'canAddGovernmentVehicle'));
    }

    public function store(Request $request)
    {
        // Validate the request
        $validatedData = $request->validate([
            'type' => 'required|in:confiscated,government',
            'directorate_id' => 'required|exists:directorates,id',
            'vehicle_type' => 'required|string|max:255',
            'vehicle_name' => 'nullable|string|max:255',
            'model' => 'nullable|string|max:255',
            'chassis_number' => 'nullable|string|max:255',
            'vehicle_number' => 'nullable|string|max:255',
            'province' => 'nullable|string|max:255',
            'color' => 'nullable|string|max:255',
            'vehicle_condition' => 'required|in:صالحة,غير صالحة',
            'accessories' => 'nullable|array',
            'defects' => 'nullable|array',
            'missing_parts' => 'nullable|string',
            
            // Confiscated vehicle fields
            'defendant_name' => 'required_if:type,confiscated|nullable|string|max:255',
            'legal_article' => 'required_if:type,confiscated|nullable|string|max:255',
            'seizure_status' => 'required_if:type,confiscated|nullable|in:محجوزة,مفرج عنها,مصادرة',
            'seizure_letter_number' => 'nullable|string|max:255',
            'seizure_letter_date' => 'nullable|date',
            
            // Government vehicle fields
            'source' => 'required_if:type,government|nullable|string|max:255',
            'import_letter_number' => 'nullable|string|max:255',
            'import_letter_date' => 'nullable|date',
            
            'images.*' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
            'attachments.*' => 'nullable|file|mimes:pdf,doc,docx|max:5120',
        ]);
        
        // Create the vehicle
        $user = Auth::user();
        
        // التحقق من صلاحية إضافة عجلات حكومية
        if ($validatedData['type'] == 'government' && !$user->hasRole(['admin', 'verifier', 'vehicles_dept'])) {
            return redirect()->route('vehicles.index')
                ->with('error', 'ليس لديك صلاحية لإضافة العجلات الحكومية');
        }
        
        // Set directorate_id to user's directorate if not admin/verifier
        if (!$user->hasRole(['admin', 'verifier'])) {
            $validatedData['directorate_id'] = $user->directorate_id;
        }
        
        $validatedData['user_id'] = $user->id;
        
        // Set default status for confiscated vehicles
        if ($validatedData['type'] == 'confiscated') {
            $validatedData['final_degree_status'] = 'غير مكتسبة';
            $validatedData['authentication_status'] = 'غير مصادق عليها';
            $validatedData['valuation_status'] = 'غير مثمنة';
            $validatedData['donation_status'] = 'غير مهداة';
            $validatedData['government_registration_status'] = 'غير مرقمة';
        }
        
        $vehicle = Vehicle::create($validatedData);
        
        // Handle images
        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $filename = time() . '_' . $image->getClientOriginalName();
                $path = $image->storeAs('vehicle_images', $filename, 'public');
                
                Attachment::create([
                    'attachable_type' => 'App\Models\Vehicle',
                    'attachable_id' => $vehicle->id,
                    'type' => 'vehicle_image',
                    'file_name' => $filename,
                    'file_path' => $path,
                    'file_type' => $image->getMimeType(),
                    'file_size' => $image->getSize(),
                    'user_id' => $user->id
                ]);
            }
        }
        
        // Handle attachments
        if ($request->hasFile('attachments')) {
            foreach ($request->file('attachments') as $file) {
                $filename = time() . '_' . $file->getClientOriginalName();
                $path = $file->storeAs('vehicle_documents', $filename, 'public');
                
                Attachment::create([
                    'attachable_type' => 'App\Models\Vehicle',
                    'attachable_id' => $vehicle->id,
                    'type' => 'vehicle_document',
                    'file_name' => $filename,
                    'file_path' => $path,
                    'file_type' => $file->getMimeType(),
                    'file_size' => $file->getSize(),
                    'user_id' => $user->id
                ]);
            }
        }
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم إضافة العجلة بنجاح');
    }

    public function show(Vehicle $vehicle)
    {
        $this->authorize('view', $vehicle);
        
        $vehicle->load(['directorate', 'user', 'statuses.user', 'transfers.user', 'editRequests.user', 'attachments']);
        
        return view('vehicles.show', compact('vehicle'));
    }

    public function edit(Vehicle $vehicle)
    {
        $this->authorize('update', $vehicle);
        
        $user = Auth::user();
        $directorates = [];
        
        // If admin or verifier, show all directorates
        if ($user->hasRole(['admin', 'verifier'])) {
            $directorates = Directorate::all();
        }
        
        return view('vehicles.edit', compact('vehicle', 'directorates'));
    }

    public function update(Request $request, Vehicle $vehicle)
    {
        $this->authorize('update', $vehicle);
        
        // Validate the request
        $validatedData = $request->validate([
            'type' => 'required|in:confiscated,government',
            'directorate_id' => 'required|exists:directorates,id',
            'vehicle_type' => 'required|string|max:255',
            'vehicle_name' => 'nullable|string|max:255',
            'model' => 'nullable|string|max:255',
            'chassis_number' => 'nullable|string|max:255',
            'vehicle_number' => 'nullable|string|max:255',
            'province' => 'nullable|string|max:255',
            'color' => 'nullable|string|max:255',
            'vehicle_condition' => 'required|in:صالحة,غير صالحة',
            'accessories' => 'nullable|array',
            'defects' => 'nullable|array',
            'missing_parts' => 'nullable|string',
            
            // Confiscated vehicle fields
            'defendant_name' => 'required_if:type,confiscated|nullable|string|max:255',
            'legal_article' => 'required_if:type,confiscated|nullable|string|max:255',
            
            // Don't allow updating status through this form
            
            // Government vehicle fields
            'source' => 'required_if:type,government|nullable|string|max:255',
            
            'notes' => 'nullable|string',
            'images.*' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
            'attachments.*' => 'nullable|file|mimes:pdf,doc,docx|max:5120',
        ]);
        
        $vehicle->update($validatedData);
        
        // Handle images
        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $filename = time() . '_' . $image->getClientOriginalName();
                $path = $image->storeAs('vehicle_images', $filename, 'public');
                
                Attachment::create([
                    'attachable_type' => 'App\Models\Vehicle',
                    'attachable_id' => $vehicle->id,
                    'type' => 'vehicle_image',
                    'file_name' => $filename,
                    'file_path' => $path,
                    'file_type' => $image->getMimeType(),
                    'file_size' => $image->getSize(),
                    'user_id' => Auth::id()
                ]);
            }
        }
        
        // Handle attachments
        if ($request->hasFile('attachments')) {
            foreach ($request->file('attachments') as $file) {
                $filename = time() . '_' . $file->getClientOriginalName();
                $path = $file->storeAs('vehicle_documents', $filename, 'public');
                
                Attachment::create([
                    'attachable_type' => 'App\Models\Vehicle',
                    'attachable_id' => $vehicle->id,
                    'type' => 'vehicle_document',
                    'file_name' => $filename,
                    'file_path' => $path,
                    'file_type' => $file->getMimeType(),
                    'file_size' => $file->getSize(),
                    'user_id' => Auth::id()
                ]);
            }
        }
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث العجلة بنجاح');
    }

    public function destroy(Vehicle $vehicle)
    {
        $this->authorize('delete', $vehicle);
        
        // Delete associated files
        foreach ($vehicle->attachments as $attachment) {
            Storage::disk('public')->delete($attachment->file_path);
        }
        
        $vehicle->delete();
        
        return redirect()->route('vehicles.index')
            ->with('success', 'تم حذف العجلة بنجاح');
    }
}
</file>

<file path="app/Http/Controllers/VehicleStatusController.php">
<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Vehicle;
use App\Models\VehicleStatus;
use App\Models\Attachment;
use App\Notifications\VehicleStatusUpdated;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Notification;

class VehicleStatusController extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:update vehicle status');
    }
    
    public function updateSeizureStatus(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'seizure_status' => 'required|in:محجوزة,مفرج عنها,مصادرة',
            'letter_number' => 'required|string|max:255',
            'letter_date' => 'required|date',
            'notes' => 'nullable|string',
            'attachment' => 'required|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Check if the current status is final and trying to go back
        if ($vehicle->seizure_status === 'مصادرة' && $validatedData['seizure_status'] !== 'مصادرة') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن تغيير الحالة من مصادرة إلى أي حالة أخرى إلا بموافقة المدقق أو المشرف');
            }
        }
        
        // Check if going from released to seized needs admin/verifier approval
        if ($vehicle->seizure_status === 'مفرج عنها' && $validatedData['seizure_status'] === 'محجوزة') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن تغيير الحالة من مفرج عنها إلى محجوزة إلا بموافقة المدقق أو المشرف');
            }
        }
        
        // Store the old status for history
        $oldStatus = $vehicle->seizure_status;
        
        // Update vehicle status
        $vehicle->seizure_status = $validatedData['seizure_status'];
        
        // Reset dependent statuses when moving backwards
        if ($oldStatus === 'مصادرة' && $validatedData['seizure_status'] !== 'مصادرة') {
            $vehicle->final_degree_status = 'غير مكتسبة';
            $vehicle->valuation_status = 'غير مثمنة';
            $vehicle->authentication_status = 'غير مصادق عليها';
            $vehicle->donation_status = 'غير مهداة';
            $vehicle->government_registration_status = 'غير مرقمة';
            
            // Clear related fields
            $vehicle->decision_number = null;
            $vehicle->decision_date = null;
            $vehicle->valuation_amount = null;
            $vehicle->authentication_number = null;
            $vehicle->authentication_date = null;
            $vehicle->donation_letter_number = null;
            $vehicle->donation_letter_date = null;
            $vehicle->donation_entity = null;
            $vehicle->registration_letter_number = null;
            $vehicle->registration_letter_date = null;
            $vehicle->government_registration_number = null;
        }
        
        // Update relevant letter information based on status
        if ($validatedData['seizure_status'] == 'محجوزة') {
            $vehicle->seizure_letter_number = $validatedData['letter_number'];
            $vehicle->seizure_letter_date = $validatedData['letter_date'];
        } elseif ($validatedData['seizure_status'] == 'مفرج عنها') {
            $vehicle->release_decision_number = $validatedData['letter_number'];
            $vehicle->release_decision_date = $validatedData['letter_date'];
        } elseif ($validatedData['seizure_status'] == 'مصادرة') {
            $vehicle->confiscation_letter_number = $validatedData['letter_number'];
            $vehicle->confiscation_letter_date = $validatedData['letter_date'];
        }
        
        $vehicle->save();
        
        // Create status history record
        $status = VehicleStatus::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'status_type' => 'seizure_status',
            'old_status' => $oldStatus,
            'new_status' => $validatedData['seizure_status'],
            'letter_number' => $validatedData['letter_number'],
            'letter_date' => $validatedData['letter_date'],
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('status_documents', $filename, 'public');
            
            $attachmentType = '';
            if ($validatedData['seizure_status'] == 'محجوزة') {
                $attachmentType = 'seizure_letter';
            } elseif ($validatedData['seizure_status'] == 'مفرج عنها') {
                $attachmentType = 'release_decision';
            } elseif ($validatedData['seizure_status'] == 'مصادرة') {
                $attachmentType = 'confiscation_letter';
            }
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleStatus',
                'attachable_id' => $status->id,
                'type' => $attachmentType,
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // Notify relevant users
        $this->notifyStatusUpdate($vehicle, 'seizure_status', $oldStatus, $validatedData['seizure_status']);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث حالة العجلة بنجاح');
    }
    
    public function updateFinalDegreeStatus(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'final_degree_status' => 'required|in:غير مكتسبة,مكتسبة',
            'decision_number' => 'required_if:final_degree_status,مكتسبة|nullable|string|max:255',
            'decision_date' => 'required_if:final_degree_status,مكتسبة|nullable|date',
            'notes' => 'nullable|string',
            'attachment' => 'required_if:final_degree_status,مكتسبة|nullable|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Check pre-conditions
        if ($vehicle->seizure_status != 'مصادرة') {
            return redirect()->back()->with('error', 'لا يمكن تحديث حالة اكتساب الدرجة القطعية إلا بعد مصادرة العجلة');
        }
        
        // Going back from acquired to not acquired requires admin/verifier
        if ($vehicle->final_degree_status === 'مكتسبة' && $validatedData['final_degree_status'] === 'غير مكتسبة') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن إلغاء اكتساب الدرجة القطعية إلا بموافقة المدقق أو المشرف');
            }
            
            // Reset dependent statuses
            $vehicle->valuation_status = 'غير مثمنة';
            $vehicle->authentication_status = 'غير مصادق عليها';
            $vehicle->donation_status = 'غير مهداة';
            $vehicle->government_registration_status = 'غير مرقمة';
            
            // Clear related fields
            $vehicle->valuation_amount = null;
            $vehicle->authentication_number = null;
            $vehicle->authentication_date = null;
            $vehicle->donation_letter_number = null;
            $vehicle->donation_letter_date = null;
            $vehicle->donation_entity = null;
            $vehicle->registration_letter_number = null;
            $vehicle->registration_letter_date = null;
            $vehicle->government_registration_number = null;
        }
        
        // Store the old status for history
        $oldStatus = $vehicle->final_degree_status;
        
        // Update vehicle status
        $vehicle->final_degree_status = $validatedData['final_degree_status'];
        
        if ($validatedData['final_degree_status'] == 'مكتسبة') {
            $vehicle->decision_number = $validatedData['decision_number'];
            $vehicle->decision_date = $validatedData['decision_date'];
        } else {
            $vehicle->decision_number = null;
            $vehicle->decision_date = null;
        }
        
        $vehicle->save();
        
        // Create status history record
        $status = VehicleStatus::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'status_type' => 'final_degree_status',
            'old_status' => $oldStatus,
            'new_status' => $validatedData['final_degree_status'],
            'letter_number' => $validatedData['decision_number'] ?? null,
            'letter_date' => $validatedData['decision_date'] ?? null,
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('status_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleStatus',
                'attachable_id' => $status->id,
                'type' => 'final_degree_decision',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // Notify relevant users
        $this->notifyStatusUpdate($vehicle, 'final_degree_status', $oldStatus, $validatedData['final_degree_status']);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث حالة اكتساب الدرجة القطعية بنجاح');
    }
    
    public function updateValuationStatus(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'valuation_status' => 'required|in:غير مثمنة,مثمنة',
            'valuation_amount' => 'required_if:valuation_status,مثمنة|nullable|numeric',
            'notes' => 'nullable|string',
            'attachment' => 'required_if:valuation_status,مثمنة|nullable|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Check pre-conditions - تم تغيير التسلسل ليكون التثمين بعد الدرجة القطعية وقبل المصادقة
        if ($vehicle->final_degree_status != 'مكتسبة') {
            return redirect()->back()->with('error', 'لا يمكن تثمين العجلة إلا بعد اكتساب الدرجة القطعية');
        }
        
        // Going back from valued to not valued requires admin/verifier
        if ($vehicle->valuation_status === 'مثمنة' && $validatedData['valuation_status'] === 'غير مثمنة') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن إلغاء التثمين إلا بموافقة المدقق أو المشرف');
            }
            
            // Reset dependent statuses
            $vehicle->authentication_status = 'غير مصادق عليها';
            $vehicle->donation_status = 'غير مهداة';
            $vehicle->government_registration_status = 'غير مرقمة';
            
            // Clear related fields
            $vehicle->authentication_number = null;
            $vehicle->authentication_date = null;
            $vehicle->donation_letter_number = null;
            $vehicle->donation_letter_date = null;
            $vehicle->donation_entity = null;
            $vehicle->registration_letter_number = null;
            $vehicle->registration_letter_date = null;
            $vehicle->government_registration_number = null;
        }
        
        // Store the old status for history
        $oldStatus = $vehicle->valuation_status;
        
        // Update vehicle status
        $vehicle->valuation_status = $validatedData['valuation_status'];
        
        if ($validatedData['valuation_status'] == 'مثمنة') {
            $vehicle->valuation_amount = $validatedData['valuation_amount'];
        } else {
            $vehicle->valuation_amount = null;
        }
        
        $vehicle->save();
        
        // Create status history record
        $status = VehicleStatus::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'status_type' => 'valuation_status',
            'old_status' => $oldStatus,
            'new_status' => $validatedData['valuation_status'],
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('status_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleStatus',
                'attachable_id' => $status->id,
                'type' => 'valuation_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // Notify relevant users
        $this->notifyStatusUpdate($vehicle, 'valuation_status', $oldStatus, $validatedData['valuation_status']);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث حالة التثمين بنجاح');
    }
    
    public function updateAuthenticationStatus(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'authentication_status' => 'required|in:غير مصادق عليها,تمت المصادقة عليها',
            'authentication_number' => 'required_if:authentication_status,تمت المصادقة عليها|nullable|string|max:255',
            'authentication_date' => 'required_if:authentication_status,تمت المصادقة عليها|nullable|date',
            'notes' => 'nullable|string',
            'attachment' => 'required_if:authentication_status,تمت المصادقة عليها|nullable|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Check pre-conditions - تم تغيير التسلسل ليكون المصادقة بعد التثمين
        if ($vehicle->valuation_status != 'مثمنة') {
            return redirect()->back()->with('error', 'لا يمكن تحديث حالة المصادقة إلا بعد تثمين العجلة');
        }
        
        // Going back from authenticated to not authenticated requires admin/verifier
        if ($vehicle->authentication_status === 'تمت المصادقة عليها' && $validatedData['authentication_status'] === 'غير مصادق عليها') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن إلغاء المصادقة إلا بموافقة المدقق أو المشرف');
            }
            
            // Reset dependent statuses
            $vehicle->donation_status = 'غير مهداة';
            $vehicle->government_registration_status = 'غير مرقمة';
            
            // Clear related fields
            $vehicle->donation_letter_number = null;
            $vehicle->donation_letter_date = null;
            $vehicle->donation_entity = null;
            $vehicle->registration_letter_number = null;
            $vehicle->registration_letter_date = null;
            $vehicle->government_registration_number = null;
        }
        
        // Store the old status for history
        $oldStatus = $vehicle->authentication_status;
        
        // Update vehicle status
        $vehicle->authentication_status = $validatedData['authentication_status'];
        
        if ($validatedData['authentication_status'] == 'تمت المصادقة عليها') {
            $vehicle->authentication_number = $validatedData['authentication_number'];
            $vehicle->authentication_date = $validatedData['authentication_date'];
        } else {
            $vehicle->authentication_number = null;
            $vehicle->authentication_date = null;
        }
        
        $vehicle->save();
        
        // Create status history record
        $status = VehicleStatus::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'status_type' => 'authentication_status',
            'old_status' => $oldStatus,
            'new_status' => $validatedData['authentication_status'],
            'letter_number' => $validatedData['authentication_number'] ?? null,
            'letter_date' => $validatedData['authentication_date'] ?? null,
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('status_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleStatus',
                'attachable_id' => $status->id,
                'type' => 'authentication_letter',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // Notify relevant users
        $this->notifyStatusUpdate($vehicle, 'authentication_status', $oldStatus, $validatedData['authentication_status']);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث حالة المصادقة بنجاح');
    }
    
    public function updateDonationStatus(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'donation_status' => 'required|in:غير مهداة,مهداة',
            'donation_letter_number' => 'required_if:donation_status,مهداة|nullable|string|max:255',
            'donation_letter_date' => 'required_if:donation_status,مهداة|nullable|date',
            'donation_entity' => 'required_if:donation_status,مهداة|nullable|string|max:255',
            'notes' => 'nullable|string',
            'attachment' => 'required_if:donation_status,مهداة|nullable|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Check pre-conditions
        if ($vehicle->authentication_status != 'تمت المصادقة عليها') {
            return redirect()->back()->with('error', 'لا يمكن تحديث حالة الإهداء إلا بعد المصادقة على العجلة');
        }
        
        // Going back from donated to not donated requires admin/verifier
        if ($vehicle->donation_status === 'مهداة' && $validatedData['donation_status'] === 'غير مهداة') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن إلغاء الإهداء إلا بموافقة المدقق أو المشرف');
            }
            
            // Reset dependent statuses
            $vehicle->government_registration_status = 'غير مرقمة';
            
            // Clear related fields
            $vehicle->registration_letter_number = null;
            $vehicle->registration_letter_date = null;
            $vehicle->government_registration_number = null;
        }
        
        // Store the old status for history
        $oldStatus = $vehicle->donation_status;
        
        // Update vehicle status
        $vehicle->donation_status = $validatedData['donation_status'];
        
        if ($validatedData['donation_status'] == 'مهداة') {
            $vehicle->donation_letter_number = $validatedData['donation_letter_number'];
            $vehicle->donation_letter_date = $validatedData['donation_letter_date'];
            $vehicle->donation_entity = $validatedData['donation_entity'];
        } else {
            $vehicle->donation_letter_number = null;
            $vehicle->donation_letter_date = null;
            $vehicle->donation_entity = null;
        }
        
        $vehicle->save();
        
        // Create status history record
        $status = VehicleStatus::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'status_type' => 'donation_status',
            'old_status' => $oldStatus,
            'new_status' => $validatedData['donation_status'],
            'letter_number' => $validatedData['donation_letter_number'] ?? null,
            'letter_date' => $validatedData['donation_letter_date'] ?? null,
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('status_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleStatus',
                'attachable_id' => $status->id,
                'type' => 'donation_letter',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // Notify relevant users
        $this->notifyStatusUpdate($vehicle, 'donation_status', $oldStatus, $validatedData['donation_status']);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث حالة الإهداء بنجاح');
    }
    
    public function updateRegistrationStatus(Request $request, Vehicle $vehicle)
    {
        // Validate the request
        $validatedData = $request->validate([
            'government_registration_status' => 'required|in:غير مرقمة,مرقمة',
            'registration_letter_number' => 'required_if:government_registration_status,مرقمة|nullable|string|max:255',
            'registration_letter_date' => 'required_if:government_registration_status,مرقمة|nullable|date',
            'government_registration_number' => 'required_if:government_registration_status,مرقمة|nullable|string|max:255',
            'notes' => 'nullable|string',
            'attachment' => 'required_if:government_registration_status,مرقمة|nullable|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // Check pre-conditions
        if ($vehicle->donation_status != 'مهداة') {
            return redirect()->back()->with('error', 'لا يمكن تحديث حالة الترقيم الحكومي إلا بعد إهداء العجلة');
        }
        if (!auth()->user()->hasRole(['admin', 'verifier', 'vehicles_dept'])) {
            return redirect()->back()->with('error', 'غير مصرح لك بتحديث حالة الترقيم الحكومي');
        }
        // Going back from registered to not registered requires admin/verifier
        if ($vehicle->government_registration_status === 'مرقمة' && $validatedData['government_registration_status'] === 'غير مرقمة') {
            if (!$user->hasRole(['admin', 'verifier'])) {
                return redirect()->back()->with('error', 'لا يمكن إلغاء الترقيم الحكومي إلا بموافقة المدقق أو المشرف');
            }
        }
        
        // Store the old status for history
        $oldStatus = $vehicle->government_registration_status;
        
        // Update vehicle status
        $vehicle->government_registration_status = $validatedData['government_registration_status'];
        
        if ($validatedData['government_registration_status'] == 'مرقمة') {
            $vehicle->registration_letter_number = $validatedData['registration_letter_number'];
            $vehicle->registration_letter_date = $validatedData['registration_letter_date'];
            $vehicle->government_registration_number = $validatedData['government_registration_number'];
        } else {
            $vehicle->registration_letter_number = null;
            $vehicle->registration_letter_date = null;
            $vehicle->government_registration_number = null;
        }
        
        $vehicle->save();
        
        // Create status history record
        $status = VehicleStatus::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'status_type' => 'government_registration_status',
            'old_status' => $oldStatus,
            'new_status' => $validatedData['government_registration_status'],
            'letter_number' => $validatedData['registration_letter_number'] ?? null,
            'letter_date' => $validatedData['registration_letter_date'] ?? null,
            'notes' => $validatedData['notes'],
        ]);
        
        // Handle attachment
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('status_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleStatus',
                'attachable_id' => $status->id,
                'type' => 'registration_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // Notify relevant users
        $this->notifyStatusUpdate($vehicle, 'government_registration_status', $oldStatus, $validatedData['government_registration_status']);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تحديث حالة الترقيم الحكومي بنجاح');
    }
    
    // Helper method to send notifications
    private function notifyStatusUpdate($vehicle, $statusType, $oldStatus, $newStatus)
    {
        // Find users who should be notified
        $usersToNotify = [];
        
        // Add admin and verifier users
        $adminUsers = User::role(['admin', 'verifier'])->get();
        foreach ($adminUsers as $adminUser) {
            $usersToNotify[] = $adminUser;
        }
        
        // Add users from the same directorate
        $directorate = $vehicle->directorate;
        if ($directorate) {
            $directoryUsers = User::where('directorate_id', $directorate->id)
                                  ->whereNotIn('id', $adminUsers->pluck('id')->toArray())
                                  ->get();
            foreach ($directoryUsers as $dirUser) {
                $usersToNotify[] = $dirUser;
            }
        }
        
        // Add vehicles department users for specific statuses
        if (in_array($statusType, ['final_degree_status', 'authentication_status', 'valuation_status', 'donation_status', 'government_registration_status'])) {
            $vehiclesDeptUsers = User::role('vehicles_dept')
                                     ->whereNotIn('id', collect($usersToNotify)->pluck('id')->toArray())
                                     ->get();
            foreach ($vehiclesDeptUsers as $vdUser) {
                $usersToNotify[] = $vdUser;
            }
        }
        
        // Send notifications
        foreach ($usersToNotify as $user) {
            $user->notify(new VehicleStatusUpdated($vehicle, $statusType, $oldStatus, $newStatus, Auth::user()));
        }
    }
}
</file>

<file path="app/Http/Controllers/VehicleTransferController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Vehicle;
use App\Models\VehicleTransfer;
use App\Models\Directorate;
use App\Models\Attachment;
use App\Models\User;
use App\Notifications\VehicleTransferred;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class VehicleTransferController extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:create transfers')->only(['create', 'store']);
        $this->middleware('permission:view transfers')->only(['index', 'show']);
    }
    
    public function index(Request $request)
    {
        $user = Auth::user();
        $query = VehicleTransfer::with(['vehicle', 'user', 'destinationDirectorate']);
        
        // Filter by directorate
        if ($user->hasRole('recipient')) {
            $query->where('destination_directorate_id', $user->directorate_id);
        } elseif ($request->has('directorate_id') && $user->hasRole(['admin', 'verifier', 'vehicles_dept'])) {
            $query->where('destination_directorate_id', $request->directorate_id);
        }
        
        // Filter by vehicle type
        if ($request->has('vehicle_type')) {
            $query->whereHas('vehicle', function($q) use ($request) {
                $q->where('type', $request->vehicle_type);
            });
        }

        // Filter by status (active/completed)
        if ($request->has('status')) {
            if ($request->status === 'active') {
                $query->whereNull('return_date');
            } elseif ($request->status === 'completed') {
                $query->whereNotNull('return_date');
            }
        }
        
        // Filter by transfer type
        if ($request->has('transfer_type')) {
            if ($request->transfer_type === 'regular') {
                $query->where('is_ownership_transfer', false)->where('is_referral', false);
            } elseif ($request->transfer_type === 'ownership') {
                $query->where('is_ownership_transfer', true);
            } elseif ($request->transfer_type === 'referral') {
                $query->where('is_referral', true);
            }
        }
        
        // Filter by recipient ID number
        if ($request->has('recipient_id_number') && !empty($request->recipient_id_number)) {
            $query->where('recipient_id_number', 'like', '%' . $request->recipient_id_number . '%');
        }
        
        // Search
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('recipient_name', 'like', "%{$search}%")
                  ->orWhere('recipient_entity', 'like', "%{$search}%")
                  ->orWhere('assigned_to', 'like', "%{$search}%")
                  ->orWhere('recipient_id_number', 'like', "%{$search}%")
                  ->orWhere('recipient_phone', 'like', "%{$search}%")
                  ->orWhereHas('vehicle', function($q2) use ($search) {
                      $q2->where('vehicle_type', 'like', "%{$search}%")
                        ->orWhere('vehicle_name', 'like', "%{$search}%")
                        ->orWhere('vehicle_number', 'like', "%{$search}%");
                  });
            });
        }
        
        $transfers = $query->latest()->paginate(10)->withQueryString();
        
        $directorates = [];
        if ($user->hasRole(['admin', 'verifier', 'vehicles_dept'])) {
            $directorates = Directorate::all();
        }
        
        // للتحذير من الأشخاص الذين لديهم أكثر من عجلة مستلمة
        $activeTransferCountsByRecipient = [];
        if ($user->hasRole(['admin', 'verifier', 'vehicles_dept'])) {
            $activeTransferCountsByRecipient = VehicleTransfer::whereNull('return_date')
                ->where('is_ownership_transfer', false)
                ->where('is_referral', false)
                ->select('recipient_id_number', DB::raw('count(*) as total'))
                ->whereNotNull('recipient_id_number')
                ->groupBy('recipient_id_number')
                ->having('total', '>=', 1) // تغيير هنا لإظهار كل المستلمين وعدد العجلات
                ->pluck('total', 'recipient_id_number')
                ->toArray();
        }
        
        return view('transfers.index', compact('transfers', 'directorates', 'activeTransferCountsByRecipient'));
    }
    
    public function create(Vehicle $vehicle)
    {
        $user = Auth::user();
        
        // التحقق مما إذا كانت العجلة قابلة للمناقلة
        if (!$vehicle->isTransferable()) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن مناقلة هذه العجلة حتى تكتسب الدرجة القطعية أو تتم المصادقة عليها');
        }
        
        // التحقق مما إذا كانت هناك مناقلة نشطة بالفعل
        if ($vehicle->getActiveTransfers()->count() > 0) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن إنشاء مناقلة جديدة حتى يتم إنهاء المناقلة الحالية');
        }

        // التحقق مما إذا كانت العجلة محالة لجهة خارجية
        if ($vehicle->is_externally_referred) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن مناقلة هذه العجلة لأنها محالة لجهة خارجية: ' . $vehicle->external_entity);
        }
        
        $directorates = Directorate::all();
        
        return view('transfers.create', compact('vehicle', 'directorates'));
    }
    
    public function store(Request $request, Vehicle $vehicle)
    {
        // التحقق مما إذا كانت العجلة قابلة للمناقلة
        if (!$vehicle->isTransferable()) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن مناقلة هذه العجلة حتى تكتسب الدرجة القطعية أو تتم المصادقة عليها');
        }
        
        // التحقق مما إذا كانت هناك مناقلة نشطة بالفعل
        if ($vehicle->getActiveTransfers()->count() > 0) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن إنشاء مناقلة جديدة حتى يتم إنهاء المناقلة الحالية');
        }
    
        // التحقق مما إذا كانت العجلة محالة لجهة خارجية
        if ($vehicle->is_externally_referred) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن مناقلة هذه العجلة لأنها محالة لجهة خارجية: ' . $vehicle->external_entity);
        }
        
        // التحقق من البيانات
        $validatedData = $request->validate([
            'recipient_name' => 'required|string|max:255',
            'recipient_id_number' => 'required|string|max:255',
            'recipient_phone' => 'nullable|string|max:255',
            'recipient_entity' => 'required|string|max:255',
            'assigned_to' => 'nullable|string|max:255',
            'receive_date' => 'required|date',
            'destination_directorate_id' => 'required|exists:directorates,id',
            'notes' => 'nullable|string',
            'attachment' => 'required|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        $user = Auth::user();
        
        // التحقق مما إذا كان المستلم لديه عجلات نشطة أخرى
        if (!empty($validatedData['recipient_id_number'])) {
            $activeTransfersCount = VehicleTransfer::whereNull('return_date')
                ->where('recipient_id_number', $validatedData['recipient_id_number'])
                ->where('is_ownership_transfer', false)
                ->where('is_referral', false)
                ->count();
                
            if ($activeTransfersCount > 0) {
                // نضيف رسالة تحذيرية وليس منع
                session()->flash('warning', 'تنبيه: المستلم لديه ' . $activeTransfersCount . ' مناقلات نشطة أخرى.');
            }
        }
        
        // إنشاء سجل المناقلة
        $transfer = VehicleTransfer::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'recipient_name' => $validatedData['recipient_name'],
            'recipient_id_number' => $validatedData['recipient_id_number'],
            'recipient_phone' => $validatedData['recipient_phone'],
            'recipient_entity' => $validatedData['recipient_entity'],
            'assigned_to' => $validatedData['assigned_to'],
            'receive_date' => $validatedData['receive_date'],
            'is_external' => false, // المناقلة الاعتيادية هي دائما داخلية
            'destination_directorate_id' => $validatedData['destination_directorate_id'],
            'notes' => $validatedData['notes'],
            'is_ownership_transfer' => false, // مناقلة عادية
            'is_referral' => false, // ليست إحالة خارجية
        ]);
        
        // التعامل مع المرفقات
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('transfer_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleTransfer',
                'attachable_id' => $transfer->id,
                'type' => 'transfer_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // إرسال الإشعارات
        $this->notifyTransfer($transfer);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم تسجيل المناقلة بنجاح');
    }
    
    public function show(VehicleTransfer $transfer)
    {
        // التحقق من أن المستخدم يمكنه عرض هذه المناقلة
        $user = Auth::user();
        
        if (!$user->hasRole(['admin', 'verifier', 'vehicles_dept']) && 
            !($user->hasRole('recipient') && $transfer->destination_directorate_id === $user->directorate_id) &&
            !($user->hasRole('data_entry') && $transfer->vehicle->directorate_id === $user->directorate_id)) {
            abort(403, 'غير مصرح لك بعرض هذه المناقلة');
        }
        
        $transfer->load(['vehicle', 'user', 'destinationDirectorate', 'attachments', 'completer']);
        
        return view('transfers.show', compact('transfer'));
    }
    
    public function completeTransfer(Request $request, VehicleTransfer $transfer)
    {
        // التحقق من أن المستخدم يمكنه إكمال هذه المناقلة
        $user = Auth::user();
        
        if (!$user->hasRole(['admin', 'verifier', 'vehicles_dept'])) {
            abort(403, 'غير مصرح لك بإكمال هذه المناقلة');
        }
        
        // التحقق مما إذا كانت المناقلة مكتملة بالفعل
        if ($transfer->return_date !== null) {
            return redirect()->route('transfers.show', $transfer)
                ->with('error', 'تم إكمال هذه المناقلة مسبقاً');
        }

        // لا تكمل المناقلات التي هي من نوع نقل ملكية أو إحالة خارجية
        if ($transfer->is_ownership_transfer || $transfer->is_referral) {
            return redirect()->route('transfers.show', $transfer)
                ->with('error', 'لا يمكن إكمال هذه المناقلة لأنها ' . ($transfer->is_ownership_transfer ? 'نقل ملكية' : 'إحالة خارجية'));
        }
        
        // التحقق من البيانات
        $validatedData = $request->validate([
            'return_date' => 'required|date',
            'notes' => 'nullable|string',
            'attachment' => 'required|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        // تحديث سجل المناقلة
        $transfer->return_date = $validatedData['return_date'];
        $transfer->notes = $validatedData['notes'] ? $transfer->notes . "\n" . $validatedData['notes'] : $transfer->notes;
        $transfer->completed_by = $user->id;
        $transfer->save();
        
        // التعامل مع المرفقات
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('transfer_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleTransfer',
                'attachable_id' => $transfer->id,
                'type' => 'return_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        return redirect()->route('transfers.show', $transfer)
            ->with('success', 'تم إكمال المناقلة بنجاح');
    }
    
    // دالة لنقل ملكية عجلة إلى مديرية أخرى
    public function transferOwnership(Request $request, Vehicle $vehicle)
    {
        // التحقق من أن المستخدم يمكنه نقل الملكية
        $user = Auth::user();
        
        if (!$user->hasRole(['admin', 'verifier'])) {
            abort(403, 'غير مصرح لك بنقل ملكية العجلة');
        }

        // التحقق مما إذا كانت العجلة محالة لجهة خارجية
        if ($vehicle->is_externally_referred) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'لا يمكن نقل ملكية هذه العجلة لأنها محالة لجهة خارجية: ' . $vehicle->external_entity);
        }
        
        // التحقق من البيانات
        $validatedData = $request->validate([
            'directorate_id' => 'required|exists:directorates,id',
            'reason' => 'required|string',
            'attachment' => 'required|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        // التحقق من أن الوجهة مختلفة عن المديرية الحالية
        if ($vehicle->directorate_id == $validatedData['directorate_id']) {
            return redirect()->back()->with('error', 'المديرية المحددة هي نفسها المديرية الحالية للعجلة');
        }
        
        // تخزين المديرية القديمة للسجل
        $oldDirectorate = $vehicle->directorate;
        
        // تحديث مديرية العجلة
        $vehicle->directorate_id = $validatedData['directorate_id'];
        $vehicle->save();
        
        // إنشاء سجل مناقلة خاص لنقل الملكية
        $transfer = VehicleTransfer::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'recipient_name' => 'نقل ملكية',
            'recipient_id_number' => null, // لا حاجة لرقم هوية في نقل الملكية
            'recipient_entity' => Directorate::find($validatedData['directorate_id'])->name,
            'assigned_to' => null,
            'receive_date' => now(),
            'return_date' => null, // لن تعود أبدًا لأنها نقل ملكية
            'is_external' => false,
            'destination_directorate_id' => $validatedData['directorate_id'],
            'notes' => 'تم نقل ملكية العجلة من ' . $oldDirectorate->name . ' إلى ' . 
                      Directorate::find($validatedData['directorate_id'])->name . "\n" . 
                      'السبب: ' . $validatedData['reason'],
            'is_ownership_transfer' => true, // حقل جديد للتمييز عن المناقلات العادية
            'is_referral' => false,
        ]);
        
        // التعامل مع المرفقات
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('transfer_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleTransfer',
                'attachable_id' => $transfer->id,
                'type' => 'ownership_transfer_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // إرسال إشعارات حول نقل الملكية
        $this->notifyTransfer($transfer);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم نقل ملكية العجلة بنجاح إلى ' . Directorate::find($validatedData['directorate_id'])->name);
    }
    
    // دالة لإحالة العجلة خارجيًا
    public function externalReferral(Request $request, Vehicle $vehicle)
    {
        // التحقق من أن المستخدم يمكنه عمل إحالة خارجية
        $user = Auth::user();
        
        if (!$user->hasRole(['admin', 'verifier'])) {
            abort(403, 'غير مصرح لك بإحالة العجلة لجهة خارجية');
        }

        // التحقق مما إذا كانت العجلة محالة لجهة خارجية مسبقًا
        if ($vehicle->is_externally_referred) {
            return redirect()->route('vehicles.show', $vehicle)
                ->with('error', 'هذه العجلة محالة بالفعل لجهة خارجية: ' . $vehicle->external_entity);
        }
        
        // التحقق من البيانات
        $validatedData = $request->validate([
            'external_entity' => 'required|string|max:255',
            'recipient_name' => 'required|string|max:255',
            'recipient_id_number' => 'required|string|max:255',
            'recipient_phone' => 'nullable|string|max:255',
            'receive_date' => 'required|date',
            'reason' => 'required|string',
            'attachment' => 'required|file|mimes:pdf,doc,docx,jpg,jpeg,png|max:5120',
        ]);
        
        // إنشاء سجل مناقلة خاص للإحالة الخارجية
        $transfer = VehicleTransfer::create([
            'vehicle_id' => $vehicle->id,
            'user_id' => $user->id,
            'recipient_name' => $validatedData['recipient_name'],
            'recipient_id_number' => $validatedData['recipient_id_number'],
            'recipient_phone' => $validatedData['recipient_phone'],
            'recipient_entity' => $validatedData['external_entity'],
            'assigned_to' => null,
            'receive_date' => $validatedData['receive_date'],
            'return_date' => null, // لن تعود من الإحالة الخارجية
            'is_external' => true,
            'destination_directorate_id' => null, // لا توجد مديرية داخلية
            'notes' => 'تم إحالة العجلة لجهة خارجية: ' . $validatedData['external_entity'] . "\n" . 
                      'السبب: ' . $validatedData['reason'],
            'is_ownership_transfer' => false,
            'is_referral' => true, // تحديد كإحالة
        ]);
        
        // تحديث حالة العجلة كمحالة خارجيًا
        $vehicle->is_externally_referred = true;
        $vehicle->external_entity = $validatedData['external_entity'];
        $vehicle->save();
        
        // التعامل مع المرفقات
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $filename = time() . '_' . $file->getClientOriginalName();
            $path = $file->storeAs('transfer_documents', $filename, 'public');
            
            Attachment::create([
                'attachable_type' => 'App\Models\VehicleTransfer',
                'attachable_id' => $transfer->id,
                'type' => 'external_referral_document',
                'file_name' => $filename,
                'file_path' => $path,
                'file_type' => $file->getMimeType(),
                'file_size' => $file->getSize(),
                'user_id' => $user->id
            ]);
        }
        
        // إرسال إشعارات حول الإحالة الخارجية
        $this->notifyTransfer($transfer);
        
        return redirect()->route('vehicles.show', $vehicle)
            ->with('success', 'تم إحالة العجلة بنجاح إلى ' . $validatedData['external_entity']);
    }
    
    // دالة مساعدة لإرسال الإشعارات
    private function notifyTransfer($transfer)
    {
        // العثور على المستخدمين الذين يجب إخطارهم
        $usersToNotify = [];
        
        // إضافة المشرفين والمدققين
        $adminUsers = User::role(['admin', 'verifier'])->get();
        foreach ($adminUsers as $adminUser) {
            $usersToNotify[] = $adminUser;
        }
        
        // إضافة مستخدمي قسم العجلات
        $vehiclesDeptUsers = User::role('vehicles_dept')->get();
        foreach ($vehiclesDeptUsers as $vdUser) {
            $usersToNotify[] = $vdUser;
        }
        
        // إضافة المستلمين إذا كانت مناقلة داخلية
        if ($transfer->destination_directorate_id) {
            $recipientUsers = User::role('recipient')
                ->where('directorate_id', $transfer->destination_directorate_id)
                ->get();
            foreach ($recipientUsers as $recipientUser) {
                $usersToNotify[] = $recipientUser;
            }
        }
        
        // إرسال الإشعارات
        foreach ($usersToNotify as $user) {
            $user->notify(new VehicleTransferred($transfer, Auth::user()));
        }
    }
}
</file>

<file path="app/Models/Attachment.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Attachment extends Model
{
    use HasFactory;

    protected $fillable = [
        'attachable_type',
        'attachable_id',
        'type',
        'file_name',
        'file_path',
        'file_type',
        'file_size',
        'sort_order',
        'user_id',
    ];

    public function attachable()
    {
        return $this->morphTo();
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
</file>

<file path="app/Models/Directorate.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Directorate extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'type',
    ];

    public function users()
    {
        return $this->hasMany(User::class);
    }

    public function vehicles()
    {
        return $this->hasMany(Vehicle::class);
    }

    public function transfersAsDestination()
    {
        return $this->hasMany(VehicleTransfer::class, 'destination_directorate_id');
    }
}
</file>

<file path="app/Models/EditRequest.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class EditRequest extends Model
{
    use HasFactory;

    protected $fillable = [
        'vehicle_id',
        'user_id',
        'approved_by',
        'field_name',
        'old_value',
        'new_value',
        'status',
        'notes',
        'approval_date',
    ];

    protected $casts = [
        'approval_date' => 'datetime',
    ];

    public function vehicle()
    {
        return $this->belongsTo(Vehicle::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function approver()
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    public function attachments()
    {
        return $this->morphMany(Attachment::class, 'attachable');
    }
}
</file>

<file path="app/Models/User.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    protected $fillable = [
        'name',
        'email',
        'password',
        'directorate_id',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    public function directorate()
    {
        return $this->belongsTo(Directorate::class);
    }

    public function vehicles()
    {
        return $this->hasMany(Vehicle::class);
    }

    public function vehicleStatuses()
    {
        return $this->hasMany(VehicleStatus::class);
    }

    public function vehicleTransfers()
    {
        return $this->hasMany(VehicleTransfer::class);
    }

    public function editRequests()
    {
        return $this->hasMany(EditRequest::class);
    }

    public function approvedRequests()
    {
        return $this->hasMany(EditRequest::class, 'approved_by');
    }

    public function attachments()
    {
        return $this->hasMany(Attachment::class);
    }
}
</file>

<file path="app/Models/Vehicle.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Vehicle extends Model
{
    use HasFactory;

    protected $fillable = [
        'directorate_id',
        'user_id',
        'type',
        'vehicle_type',
        'vehicle_name',
        'model',
        'chassis_number',
        'vehicle_number',
        'province',
        'color',
        'vehicle_condition',
        'accessories',
        'defects',
        'missing_parts',
        'defendant_name',
        'legal_article',
        'seizure_status',
        'seizure_letter_number',
        'seizure_letter_date',
        'release_decision_number',
        'release_decision_date',
        'confiscation_letter_number',
        'confiscation_letter_date',
        'final_degree_status',
        'decision_number',
        'decision_date',
        'valuation_status',
        'valuation_amount',
        'authentication_status',
        'authentication_number',
        'authentication_date',
        'donation_status',
        'donation_letter_number',
        'donation_letter_date',
        'donation_entity',
        'government_registration_status',
        'registration_letter_number',
        'registration_letter_date',
        'government_registration_number',
        'source',
        'import_letter_number',
        'import_letter_date',
        'notes',
        'is_externally_referred',
        'external_entity',
    ];

    protected $casts = [
        'accessories' => 'array',
        'defects' => 'array',
        'seizure_letter_date' => 'date',
        'release_decision_date' => 'date',
        'confiscation_letter_date' => 'date',
        'decision_date' => 'date',
        'authentication_date' => 'date',
        'import_letter_date' => 'date',
        'valuation_amount' => 'decimal:2',
        'donation_letter_date' => 'date',
        'registration_letter_date' => 'date',
        'is_externally_referred' => 'boolean',
    ];

    public function directorate()
    {
        return $this->belongsTo(Directorate::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function statuses()
    {
        return $this->hasMany(VehicleStatus::class);
    }

    public function transfers()
    {
        return $this->hasMany(VehicleTransfer::class);
    }

    public function editRequests()
    {
        return $this->hasMany(EditRequest::class);
    }

    public function attachments()
    {
        return $this->morphMany(Attachment::class, 'attachable');
    }

    public function getAccessoriesAttribute($value)
    {
        return $value ? json_decode($value, true) : [];
    }

    public function setAccessoriesAttribute($value)
    {
        $this->attributes['accessories'] = $value ? json_encode($value) : null;
    }

    public function getDefectsAttribute($value)
    {
        return $value ? json_decode($value, true) : [];
    }

    public function setDefectsAttribute($value)
    {
        $this->attributes['defects'] = $value ? json_encode($value) : null;
    }

    // Scope for confiscated vehicles
    public function scopeConfiscated($query)
    {
        return $query->where('type', 'confiscated');
    }

    // Scope for government vehicles
    public function scopeGovernment($query)
    {
        return $query->where('type', 'government');
    }

    // Scope for user's directorate
    public function scopeForUserDirectorate($query, $user)
    {
        if ($user->hasRole(['admin', 'verifier'])) {
            return $query; // Can see all vehicles
        }
        
        if ($user->hasRole('vehicles_dept')) {
            // Vehicles department can see government vehicles and confiscated vehicles that have final degree or authenticated
            return $query->where(function($q) {
                $q->where('type', 'government')
                  ->orWhere(function($q2) {
                      $q2->where('type', 'confiscated')
                         ->where(function($q3) {
                             $q3->where('final_degree_status', 'مكتسبة')
                                ->orWhere('authentication_status', 'تمت المصادقة عليها')
                                ->orWhere('valuation_status', 'مثمنة');
                         });
                  });
            });
        }
        
        if ($user->hasRole('recipient')) {
            // Recipients can only see vehicles transferred to their directorate
            return $query->whereHas('transfers', function($q) use ($user) {
                $q->where('destination_directorate_id', $user->directorate_id);
            });
        }
        
        // Default for data entry - only see their directorate's vehicles
        return $query->where('directorate_id', $user->directorate_id);
    }

    // Helper method to check if vehicle can proceed to the next stage
    public function canProceedToStage($stage)
    {
        switch ($stage) {
            case 'final_degree':
                return $this->type === 'confiscated' && $this->seizure_status === 'مصادرة';
            
            case 'valuation':
                return $this->type === 'confiscated' && $this->final_degree_status === 'مكتسبة';
            
            case 'authentication':
                return $this->type === 'confiscated' && $this->valuation_status === 'مثمنة';
            
            case 'donation':
                return $this->type === 'confiscated' && $this->authentication_status === 'تمت المصادقة عليها';
            
            case 'government_registration':
                return $this->type === 'confiscated' && $this->donation_status === 'مهداة';
            
            case 'transfer':
                return ($this->type === 'government') || 
                       ($this->type === 'confiscated' && 
                        ($this->final_degree_status === 'مكتسبة' || 
                         $this->authentication_status === 'تمت المصادقة عليها'));
            
            default:
                return false;
        }
    }

    // Get vehicle images
    public function getImages()
    {
        return $this->attachments->where('type', 'vehicle_image');
    }

    // Get vehicle documents
    public function getDocuments()
    {
        return $this->attachments->where('type', 'vehicle_document');
    }

    // Get latest transfers
    public function getActiveTransfers()
    {
        return $this->transfers()
            ->whereNull('return_date')
            ->where('is_ownership_transfer', false)
            ->where('is_referral', false)
            ->get();
    }

    // Get pending edit requests
    public function getPendingEditRequests()
    {
        return $this->editRequests()->where('status', 'pending')->get();
    }

    // Get current stage of vehicle workflow
    public function getCurrentStage()
    {
        if ($this->type === 'government') {
            return 'government';
        }
        
        if ($this->type === 'confiscated') {
            if ($this->is_externally_referred) {
                return 'externally_referred';
            }
            
            if ($this->government_registration_status === 'مرقمة') {
                return 'registered';
            }
            
            if ($this->donation_status === 'مهداة') {
                return 'donated';
            }
            
            if ($this->authentication_status === 'تمت المصادقة عليها') {
                return 'authenticated';
            }
            
            if ($this->valuation_status === 'مثمنة') {
                return 'valued';
            }
            
            if ($this->final_degree_status === 'مكتسبة') {
                return 'final_degree';
            }
            
            if ($this->seizure_status === 'مصادرة') {
                return 'confiscated';
            }
            
            if ($this->seizure_status === 'مفرج عنها') {
                return 'released';
            }
            
            return 'seized';
        }
        
        return 'unknown';
    }

    // Check if vehicle is transferable
    public function isTransferable()
    {
        // العجلات المحالة لجهات خارجية لا يمكن نقلها
        if ($this->is_externally_referred) {
            return false;
        }
        
        return $this->canProceedToStage('transfer');
    }

    // Check if user can update this vehicle
    public function canBeUpdatedBy($user)
    {
        // Admin and verifier can update any vehicle
        if ($user->hasRole(['admin', 'verifier'])) {
            return true;
        }
        
        // Data entry can only update vehicles in their directorate
        if ($user->hasRole('data_entry') && $this->directorate_id === $user->directorate_id) {
            return true;
        }
        
        // Vehicles department can update vehicles in the final stages
        if ($user->hasRole('vehicles_dept') && $this->isTransferable()) {
            return true;
        }
        
        return false;
    }

    // Get status updates for a specific status type
    public function getStatusUpdates($statusType)
    {
        return $this->statuses()
            ->where('status_type', $statusType)
            ->orderBy('created_at', 'desc')
            ->get();
    }
    
    // Get all attachments from statuses
    public function getAllStatusAttachments()
    {
        $statusIds = $this->statuses->pluck('id')->toArray();
        
        if (empty($statusIds)) {
            return collect([]);
        }
        
        return Attachment::where('attachable_type', 'App\Models\VehicleStatus')
            ->whereIn('attachable_id', $statusIds)
            ->get();
    }
}
</file>

<file path="app/Models/VehicleStatus.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class VehicleStatus extends Model
{
    use HasFactory;

    protected $fillable = [
        'vehicle_id',
        'user_id',
        'status_type',
        'old_status',
        'new_status',
        'letter_number',
        'letter_date',
        'notes',
    ];

    protected $casts = [
        'letter_date' => 'date',
    ];

    public function vehicle()
    {
        return $this->belongsTo(Vehicle::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function attachments()
    {
        return $this->morphMany(Attachment::class, 'attachable');
    }
    
    // دالة مساعدة للحصول على نوع المرفق بالعربية
    public function getAttachmentTypeName($type)
    {
        $types = [
            'seizure_letter' => 'كتاب الحجز',
            'release_decision' => 'قرار الإفراج',
            'confiscation_letter' => 'كتاب المصادرة',
            'final_degree_decision' => 'قرار اكتساب الدرجة',
            'valuation_document' => 'وثيقة التثمين',
            'authentication_letter' => 'كتاب المصادقة',
            'donation_letter' => 'كتاب الإهداء',
            'registration_document' => 'وثيقة الترقيم',
        ];
        
        return $types[$type] ?? 'مرفق';
    }
}
</file>

<file path="app/Models/VehicleTransfer.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class VehicleTransfer extends Model
{
    use HasFactory;

    protected $fillable = [
        'vehicle_id',
        'user_id',
        'destination_directorate_id',
        'recipient_name',
        'recipient_id_number',
        'recipient_phone',
        'recipient_entity',
        'assigned_to',
        'receive_date',
        'return_date',
        'is_external',
        'is_ownership_transfer',
        'is_referral',
        'notes',
        'completed_by'
    ];

    protected $casts = [
        'receive_date' => 'date',
        'return_date' => 'date',
        'is_external' => 'boolean',
        'is_ownership_transfer' => 'boolean',
        'is_referral' => 'boolean',
    ];

    public function vehicle()
    {
        return $this->belongsTo(Vehicle::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function completer()
    {
        return $this->belongsTo(User::class, 'completed_by');
    }

    public function destinationDirectorate()
    {
        return $this->belongsTo(Directorate::class, 'destination_directorate_id');
    }

    public function attachments()
    {
        return $this->morphMany(Attachment::class, 'attachable');
    }

    // Scope for active transfers
    public function scopeActive($query)
    {
        return $query->whereNull('return_date');
    }

    // Scope for completed transfers
    public function scopeCompleted($query)
    {
        return $query->whereNotNull('return_date');
    }

    // Scope for ownership transfers
    public function scopeOwnershipTransfer($query)
    {
        return $query->where('is_ownership_transfer', true);
    }

    // Scope for external referrals
    public function scopeExternalReferral($query)
    {
        return $query->where('is_referral', true);
    }

    // Scope for regular transfers (not ownership transfers or referrals)
    public function scopeRegular($query)
    {
        return $query->where('is_ownership_transfer', false)
                     ->where('is_referral', false);
    }

    // Helper method to get status as text
    public function getStatusAttribute()
    {
        if ($this->is_ownership_transfer) {
            return 'نقل ملكية';
        }
        
        if ($this->is_referral) {
            return 'إحالة خارجية';
        }
        
        if ($this->return_date) {
            return 'مكتملة';
        }
        
        return 'جارية';
    }

    // Helper method to check if transfer is active
    public function isActive()
    {
        return $this->return_date === null;
    }

    // Get appropriate attachment for display
    public function getMainDocument()
    {
        if ($this->is_ownership_transfer) {
            return $this->attachments->where('type', 'ownership_transfer_document')->first();
        }
        
        if ($this->is_referral) {
            return $this->attachments->where('type', 'external_referral_document')->first();
        }
        
        return $this->attachments->where('type', 'transfer_document')->first();
    }

    // Get return document if exists
    public function getReturnDocument()
    {
        return $this->attachments->where('type', 'return_document')->first();
    }
}
</file>

<file path="app/Notifications/VehicleStatusUpdated.php">
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use App\Models\Vehicle;
use App\Models\User;

class VehicleStatusUpdated extends Notification implements ShouldQueue
{
    use Queueable;

    protected $vehicle;
    protected $statusType;
    protected $oldStatus;
    protected $newStatus;
    protected $updatedBy;

    /**
     * Create a new notification instance.
     */
    public function __construct(Vehicle $vehicle, $statusType, $oldStatus, $newStatus, User $updatedBy)
    {
        $this->vehicle = $vehicle;
        $this->statusType = $statusType;
        $this->oldStatus = $oldStatus;
        $this->newStatus = $newStatus;
        $this->updatedBy = $updatedBy;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['database'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
                    ->subject('تم تحديث حالة عجلة')
                    ->line('تم تحديث حالة العجلة رقم: ' . $this->vehicle->id)
                    ->line('نوع العجلة: ' . $this->vehicle->vehicle_type)
                    ->line('رقم العجلة: ' . $this->vehicle->vehicle_number)
                    ->line('نوع التحديث: ' . $this->getStatusTypeName())
                    ->line('من: ' . $this->oldStatus)
                    ->line('إلى: ' . $this->newStatus)
                    ->line('تم التحديث بواسطة: ' . $this->updatedBy->name)
                    ->action('عرض العجلة', url('/vehicles/' . $this->vehicle->id));
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            'vehicle_id' => $this->vehicle->id,
            'vehicle_type' => $this->vehicle->vehicle_type,
            'vehicle_number' => $this->vehicle->vehicle_number,
            'status_type' => $this->statusType,
            'status_type_name' => $this->getStatusTypeName(),
            'old_status' => $this->oldStatus,
            'new_status' => $this->newStatus,
            'updated_by' => $this->updatedBy->id,
            'updated_by_name' => $this->updatedBy->name,
            'updated_at' => now()->toDateTimeString(),
        ];
    }
    
    /**
     * Get the status type name in Arabic.
     */
    private function getStatusTypeName(): string
    {
        $statusTypes = [
            'seizure_status' => 'حالة المصادرة',
            'final_degree_status' => 'الدرجة القطعية',
            'valuation_status' => 'حالة التثمين',
            'authentication_status' => 'المصادقة',
            'donation_status' => 'الإهداء',
            'government_registration_status' => 'الترقيم الحكومي',
        ];
        
        return $statusTypes[$this->statusType] ?? $this->statusType;
    }
}
</file>

<file path="app/Notifications/VehicleTransferred.php">
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use App\Models\VehicleTransfer;
use App\Models\User;

class VehicleTransferred extends Notification implements ShouldQueue
{
    use Queueable;

    protected $transfer;
    protected $user;

    /**
     * Create a new notification instance.
     */
    public function __construct(VehicleTransfer $transfer, User $user)
    {
        $this->transfer = $transfer;
        $this->user = $user;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['database'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        $transferType = $this->getTransferType();
        
        return (new MailMessage)
                    ->subject($transferType . ' عجلة')
                    ->line('تم ' . $transferType . ' العجلة رقم: ' . $this->transfer->vehicle->id)
                    ->line('نوع العجلة: ' . $this->transfer->vehicle->vehicle_type)
                    ->line('رقم العجلة: ' . $this->transfer->vehicle->vehicle_number)
                    ->line('المستلم: ' . $this->transfer->recipient_name)
                    ->line('الجهة المستلمة: ' . $this->transfer->recipient_entity)
                    ->line('تاريخ الاستلام: ' . $this->transfer->receive_date->format('Y-m-d'))
                    ->line('تم بواسطة: ' . $this->user->name)
                    ->action('عرض تفاصيل المناقلة', url('/transfers/' . $this->transfer->id));
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        $transferType = $this->getTransferType();
        
        return [
            'transfer_id' => $this->transfer->id,
            'vehicle_id' => $this->transfer->vehicle->id,
            'vehicle_type' => $this->transfer->vehicle->vehicle_type,
            'vehicle_number' => $this->transfer->vehicle->vehicle_number,
            'recipient_name' => $this->transfer->recipient_name,
            'recipient_entity' => $this->transfer->recipient_entity,
            'transfer_type' => $transferType,
            'transfer_date' => $this->transfer->receive_date->format('Y-m-d'),
            'user_id' => $this->user->id,
            'user_name' => $this->user->name,
        ];
    }
    
    /**
     * Get transfer type in Arabic.
     */
    private function getTransferType(): string
    {
        if ($this->transfer->is_ownership_transfer) {
            return 'نقل ملكية';
        } elseif ($this->transfer->is_referral) {
            return 'إحالة خارجية';
        } else {
            return 'مناقلة';
        }
    }
}
</file>

<file path="app/Policies/EditRequestPolicy.php">
<?php

namespace App\Policies;

use App\Models\User;
use App\Models\EditRequest;
use Illuminate\Auth\Access\HandlesAuthorization;

class EditRequestPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user)
    {
        return $user->hasPermissionTo('view edit requests');
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, EditRequest $editRequest)
    {
        // Admin and verifier can view all requests
        if ($user->hasRole(['admin', 'verifier'])) {
            return true;
        }
        
        // Users can view their own requests
        if ($editRequest->user_id === $user->id) {
            return true;
        }
        
        // Users can view requests for their directorate's vehicles
        return $editRequest->vehicle->directorate_id === $user->directorate_id;
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user)
    {
        return $user->hasPermissionTo('create edit requests');
    }

    /**
     * Determine whether the user can approve/reject requests.
     */
    public function approve(User $user, EditRequest $editRequest)
    {
        // Only admin and verifier can approve/reject
        if (!$user->hasPermissionTo('approve edit requests')) {
            return false;
        }
        
        // Can only approve pending requests
        if ($editRequest->status !== 'pending') {
            return false;
        }
        
        return true;
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, EditRequest $editRequest)
    {
        // Only admin can delete edit requests
        return $user->hasRole('admin');
    }
}
</file>

<file path="app/Policies/VehiclePolicy.php">
<?php

namespace App\Policies;

use App\Models\User;
use App\Models\Vehicle;
use Illuminate\Auth\Access\HandlesAuthorization;

class VehiclePolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user)
    {
        return $user->hasPermissionTo('view vehicles');
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, Vehicle $vehicle)
    {
        // Admin and verifier can view all vehicles
        if ($user->hasRole(['admin', 'verifier'])) {
            return true;
        }
        
        // Vehicles department can view government vehicles and confiscated vehicles with final degree or authentication
        if ($user->hasRole('vehicles_dept')) {
            if ($vehicle->type === 'government') {
                return true;
            }
            
            if ($vehicle->type === 'confiscated' && 
                ($vehicle->final_degree_status === 'مكتسبة' || 
                 $vehicle->authentication_status === 'تمت المصادقة عليها')) {
                return true;
            }
            
            return false;
        }
        
        // Recipients can only view vehicles transferred to their directorate
        if ($user->hasRole('recipient')) {
            return $vehicle->transfers()
                ->where('destination_directorate_id', $user->directorate_id)
                ->exists();
        }
        
        // Data entry users can only view their directorate's vehicles
        return $vehicle->directorate_id === $user->directorate_id;
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user)
    {
        return $user->hasPermissionTo('create vehicles');
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update(User $user, Vehicle $vehicle)
    {
        // Only admin and verifier can edit directly
        if (!$user->hasPermissionTo('edit vehicles')) {
            return false;
        }
        
        // Admin can edit all vehicles
        if ($user->hasRole('admin')) {
            return true;
        }
        
        // Verifier can edit all vehicles
        if ($user->hasRole('verifier')) {
            return true;
        }
        
        return false;
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, Vehicle $vehicle)
    {
        // Only admin can delete
        return $user->hasRole('admin');
    }
}
</file>

<file path="app/Policies/VehicleTransferPolicy.php">
<?php

namespace App\Policies;

use App\Models\User;
use App\Models\VehicleTransfer;
use Illuminate\Auth\Access\HandlesAuthorization;

class VehicleTransferPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user)
    {
        return $user->hasPermissionTo('view transfers');
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, VehicleTransfer $vehicleTransfer)
    {
        // Admin and verifier can view all transfers
        if ($user->hasRole(['admin', 'verifier'])) {
            return true;
        }
        
        // Vehicles department can view all transfers
        if ($user->hasRole('vehicles_dept')) {
            return true;
        }
        
        // Recipients can only view transfers to their directorate
        if ($user->hasRole('recipient')) {
            return $vehicleTransfer->destination_directorate_id === $user->directorate_id;
        }
        
        // Data entry users can only view their directorate's transfers
        return $vehicleTransfer->vehicle->directorate_id === $user->directorate_id;
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user, VehicleTransfer $vehicleTransfer)
    {
        // Check if user has permission to create transfers
        if (!$user->hasPermissionTo('create transfers')) {
            return false;
        }
        
        // Admin can create all transfers
        if ($user->hasRole('admin')) {
            return true;
        }
        
        // Vehicles department can create transfers for authenticated or final degree vehicles
        if ($user->hasRole('vehicles_dept')) {
            $vehicle = $vehicleTransfer->vehicle;
            
            if ($vehicle->type === 'government') {
                return true;
            }
            
            if ($vehicle->type === 'confiscated' && 
                ($vehicle->final_degree_status === 'مكتسبة' || 
                 $vehicle->authentication_status === 'تمت المصادقة عليها')) {
                return true;
            }
            
            return false;
        }
        
        return false;
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update(User $user, VehicleTransfer $vehicleTransfer)
    {
        // Only admin and vehicles department can update transfers
        return $user->hasRole(['admin', 'vehicles_dept']);
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, VehicleTransfer $vehicleTransfer)
    {
        // Only admin can delete transfers
        return $user->hasRole('admin');
    }
}
</file>

<file path="app/Providers/AppServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Schema;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\Blade;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Fix for MySQL < 5.7.7 and MariaDB < 10.2.2
        Schema::defaultStringLength(191);
        
        // Use Bootstrap pagination
        Paginator::useBootstrap();
        
        // Custom blade directives
        Blade::directive('money', function ($amount) {
            return "<?php echo number_format($amount, 2) . ' د.ع'; ?>";
        });
        
        // Define an admin directive to check if user has admin role
        Blade::if('admin', function () {
            return auth()->check() && auth()->user()->hasRole('admin');
        });
        
        // Define a role directive to check if user has a specific role
        Blade::if('role', function ($role) {
            return auth()->check() && auth()->user()->hasRole($role);
        });
        
        // Define a permission directive to check if user has a specific permission
        Blade::if('permission', function ($permission) {
            return auth()->check() && auth()->user()->hasPermissionTo($permission);
        });
    }
}
</file>

<file path="app/Providers/AuthServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Gate;
use App\Models\Vehicle;
use App\Models\User;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
        'App\Models\Vehicle' => 'App\Policies\VehiclePolicy',
        'App\Models\EditRequest' => 'App\Policies\EditRequestPolicy',
        'App\Models\VehicleTransfer' => 'App\Policies\VehicleTransferPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerPolicies();

        // إعطاء صلاحية لمستخدمي الآليات لإضافة عجلات حكومية
        Gate::define('create-government-vehicle', function (User $user) {
            return $user->hasRole(['admin', 'verifier', 'vehicles_dept']);
        });
        Gate::define('create-government-vehicle', function (User $user) {
            return $user->hasRole(['admin', 'verifier', 'vehicles_dept']);
        });
    }
}
</file>

<file path="app/Providers/PermissionServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Routing\Router;
use Spatie\Permission\Middleware\RoleMiddleware;
use Spatie\Permission\Middleware\PermissionMiddleware;
use Spatie\Permission\Middleware\RoleOrPermissionMiddleware;

class PermissionServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        //
    }

    public function boot(): void
    {
        $router = $this->app->make(Router::class);
        $router->aliasMiddleware('role', RoleMiddleware::class);
        $router->aliasMiddleware('permission', PermissionMiddleware::class);
        $router->aliasMiddleware('role_or_permission', RoleOrPermissionMiddleware::class);
    }
}
</file>

<file path="artisan">
#!/usr/bin/env php
<?php

use Illuminate\Foundation\Application;
use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
/** @var Application $app */
$app = require_once __DIR__.'/bootstrap/app.php';

$status = $app->handleCommand(new ArgvInput);

exit($status);
</file>

<file path="bootstrap/app.php">
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })
    ->withProviders([
        // ... الـ providers الأخرى
        App\Providers\PermissionServiceProvider::class,
    ])
    ->create();
</file>

<file path="bootstrap/cache/.gitignore">
*
!.gitignore
</file>

<file path="bootstrap/providers.php">
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\PermissionServiceProvider::class,
];
</file>

<file path="composer.json">
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "barryvdh/laravel-dompdf": "^3.1",
        "intervention/image": "^3.11",
        "laravel/framework": "^12.0",
        "laravel/sanctum": "^4.0",
        "laravel/tinker": "^2.10.1",
        "laravel/ui": "^4.6",
        "spatie/laravel-permission": "^6.16"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "phpunit/phpunit": "^11.5.3"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
</file>

<file path="config/app.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];
</file>

<file path="config/auth.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
</file>

<file path="config/cache.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];
</file>

<file path="config/database.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];
</file>

<file path="config/filesystems.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
</file>

<file path="config/logging.php">
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];
</file>

<file path="config/mail.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];
</file>

<file path="config/permission.php">
<?php

return [

    'models' => [

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your permissions. Of course, it
         * is often just the "Permission" model but you may use whatever you like.
         *
         * The model you want to use as a Permission model needs to implement the
         * `Spatie\Permission\Contracts\Permission` contract.
         */

        'permission' => Spatie\Permission\Models\Permission::class,

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your roles. Of course, it
         * is often just the "Role" model but you may use whatever you like.
         *
         * The model you want to use as a Role model needs to implement the
         * `Spatie\Permission\Contracts\Role` contract.
         */

        'role' => Spatie\Permission\Models\Role::class,

    ],

    'table_names' => [

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'roles' => 'roles',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your permissions. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'permissions' => 'permissions',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your models permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_permissions' => 'model_has_permissions',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your models roles. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_roles' => 'model_has_roles',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'role_has_permissions' => 'role_has_permissions',
    ],

    'column_names' => [
        /*
         * Change this if you want to name the related pivots other than defaults
         */
        'role_pivot_key' => null, // default 'role_id',
        'permission_pivot_key' => null, // default 'permission_id',

        /*
         * Change this if you want to name the related model primary key other than
         * `model_id`.
         *
         * For example, this would be nice if your primary keys are all UUIDs. In
         * that case, name this `model_uuid`.
         */

        'model_morph_key' => 'model_id',

        /*
         * Change this if you want to use the teams feature and your related model's
         * foreign key is other than `team_id`.
         */

        'team_foreign_key' => 'team_id',
    ],

    /*
     * When set to true, the method for checking permissions will be registered on the gate.
     * Set this to false if you want to implement custom logic for checking permissions.
     */

    'register_permission_check_method' => true,

    /*
     * When set to true, Laravel\Octane\Events\OperationTerminated event listener will be registered
     * this will refresh permissions on every TickTerminated, TaskTerminated and RequestTerminated
     * NOTE: This should not be needed in most cases, but an Octane/Vapor combination benefited from it.
     */
    'register_octane_reset_listener' => false,

    /*
     * Events will fire when a role or permission is assigned/unassigned:
     * \Spatie\Permission\Events\RoleAttached
     * \Spatie\Permission\Events\RoleDetached
     * \Spatie\Permission\Events\PermissionAttached
     * \Spatie\Permission\Events\PermissionDetached
     *
     * To enable, set to true, and then create listeners to watch these events.
     */
    'events_enabled' => false,

    /*
     * Teams Feature.
     * When set to true the package implements teams using the 'team_foreign_key'.
     * If you want the migrations to register the 'team_foreign_key', you must
     * set this to true before doing the migration.
     * If you already did the migration then you must make a new migration to also
     * add 'team_foreign_key' to 'roles', 'model_has_roles', and 'model_has_permissions'
     * (view the latest version of this package's migration file)
     */

    'teams' => false,

    /*
     * The class to use to resolve the permissions team id
     */
    'team_resolver' => \Spatie\Permission\DefaultTeamResolver::class,

    /*
     * Passport Client Credentials Grant
     * When set to true the package will use Passports Client to check permissions
     */

    'use_passport_client_credentials' => false,

    /*
     * When set to true, the required permission names are added to exception messages.
     * This could be considered an information leak in some contexts, so the default
     * setting is false here for optimum safety.
     */

    'display_permission_in_exception' => false,

    /*
     * When set to true, the required role names are added to exception messages.
     * This could be considered an information leak in some contexts, so the default
     * setting is false here for optimum safety.
     */

    'display_role_in_exception' => false,

    /*
     * By default wildcard permission lookups are disabled.
     * See documentation to understand supported syntax.
     */

    'enable_wildcard_permission' => false,

    /*
     * The class to use for interpreting wildcard permissions.
     * If you need to modify delimiters, override the class and specify its name here.
     */
    // 'permission.wildcard_permission' => Spatie\Permission\WildcardPermission::class,

    /* Cache-specific settings */

    'cache' => [

        /*
         * By default all permissions are cached for 24 hours to speed up performance.
         * When permissions or roles are updated the cache is flushed automatically.
         */

        'expiration_time' => \DateInterval::createFromDateString('24 hours'),

        /*
         * The cache key used to store all permissions.
         */

        'key' => 'spatie.permission.cache',

        /*
         * You may optionally indicate a specific cache driver to use for permission and
         * role caching using any of the `store` drivers listed in the cache.php config
         * file. Using 'default' here means to use the `default` set in cache.php.
         */

        'store' => 'default',
    ],
];
</file>

<file path="config/queue.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];
</file>

<file path="config/sanctum.php">
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. This will override any values set in the token's
    | "expires_at" attribute, but first-party sessions are not affected.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    |
    | Sanctum can prefix new tokens in order to take advantage of numerous
    | security scanning initiatives maintained by open source platforms
    | that notify developers if they commit tokens into repositories.
    |
    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
    ],

];
</file>

<file path="config/services.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];
</file>

<file path="config/session.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
</file>

<file path="database/.gitignore">
*.sqlite*
</file>

<file path="database/factories/UserFactory.php">
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
</file>

<file path="database/migrations/0001_01_01_000000_create_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};
</file>

<file path="database/migrations/0001_01_01_000001_create_cache_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
</file>

<file path="database/migrations/0001_01_01_000002_create_jobs_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
</file>

<file path="database/migrations/2025_03_05_001637_create_permission_tables.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $teams = config('permission.teams');
        $tableNames = config('permission.table_names');
        $columnNames = config('permission.column_names');
        $pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';
        $pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.');
        }
        if ($teams && empty($columnNames['team_foreign_key'] ?? null)) {
            throw new \Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.');
        }

        Schema::create($tableNames['permissions'], static function (Blueprint $table) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // permission id
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], static function (Blueprint $table) use ($teams, $columnNames) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // role id
            if ($teams || config('permission.testing')) { // permission.testing is a fix for sqlite testing
                $table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();
                $table->index($columnNames['team_foreign_key'], 'roles_team_foreign_key_index');
            }
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();
            if ($teams || config('permission.testing')) {
                $table->unique([$columnNames['team_foreign_key'], 'name', 'guard_name']);
            } else {
                $table->unique(['name', 'guard_name']);
            }
        });

        Schema::create($tableNames['model_has_permissions'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
            $table->unsignedBigInteger($pivotPermission);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_permissions_model_id_model_type_index');

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_permissions_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            } else {
                $table->primary([$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            }

        });

        Schema::create($tableNames['model_has_roles'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
            $table->unsignedBigInteger($pivotRole);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_roles_model_id_model_type_index');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_roles_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            } else {
                $table->primary([$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            }
        });

        Schema::create($tableNames['role_has_permissions'], static function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
            $table->unsignedBigInteger($pivotPermission);
            $table->unsignedBigInteger($pivotRole);

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');

            $table->primary([$pivotPermission, $pivotRole], 'role_has_permissions_permission_id_role_id_primary');
        });

        app('cache')
            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)
            ->forget(config('permission.cache.key'));
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        Schema::drop($tableNames['role_has_permissions']);
        Schema::drop($tableNames['model_has_roles']);
        Schema::drop($tableNames['model_has_permissions']);
        Schema::drop($tableNames['roles']);
        Schema::drop($tableNames['permissions']);
    }
};
</file>

<file path="database/migrations/2025_03_05_001839_create_directorates_table.php">
// database/migrations/xxxx_xx_xx_create_directorates_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('directorates', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('type')->default('special'); // special or general
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('directorates');
    }
};
</file>

<file path="database/migrations/2025_03_05_001839_create_vehicles_table.php">
// database/migrations/xxxx_xx_xx_create_vehicles_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('vehicles', function (Blueprint $table) {
            $table->id();
            $table->foreignId('directorate_id')->constrained('directorates');
            $table->foreignId('user_id')->constrained('users');
            $table->string('type'); // confiscated or government
            
            // Common fields for both types
            $table->string('vehicle_type'); // نوع العجلة - car, truck, etc
            $table->string('vehicle_name')->nullable(); // اسم العجلة
            $table->string('model')->nullable(); // موديل العجلة
            $table->string('chassis_number')->nullable(); // رقم الشاصي
            $table->string('vehicle_number')->nullable(); // رقم العجلة
            $table->string('province')->nullable(); // المحافظة
            $table->string('color')->nullable(); // اللون
            $table->enum('vehicle_condition', ['صالحة', 'غير صالحة'])->default('صالحة'); // حالة العجلة
            $table->text('accessories')->nullable(); // الملحقات (JSON)
            $table->text('defects')->nullable(); // العوارض (JSON)
            $table->text('missing_parts')->nullable(); // النواقص

            // Confiscated vehicle specific fields
            $table->string('defendant_name')->nullable(); // اسم المتهم
            $table->string('legal_article')->nullable(); // المادة القانونية
            
            // Status fields for confiscated vehicles
            $table->enum('seizure_status', ['محجوزة', 'مفرج عنها', 'مصادرة'])->nullable();
            $table->string('seizure_letter_number')->nullable(); // عدد كتاب الحجز
            $table->date('seizure_letter_date')->nullable(); // تاريخ كتاب الحجز
            $table->string('release_decision_number')->nullable(); // عدد قرار الافراج
            $table->date('release_decision_date')->nullable(); // تاريخ قرار الافراج
            $table->string('confiscation_letter_number')->nullable(); // عدد كتاب المصادرة
            $table->date('confiscation_letter_date')->nullable(); // تاريخ كتاب المصادرة
            
            // Final degree status
            $table->enum('final_degree_status', ['غير مكتسبة', 'مكتسبة'])->default('غير مكتسبة');
            $table->string('decision_number')->nullable(); // عدد القرار
            $table->date('decision_date')->nullable(); // تاريخ القرار
            
            // Authentication status
            $table->enum('authentication_status', ['غير مصادق عليها', 'تمت المصادقة عليها'])->default('غير مصادق عليها');
            $table->string('authentication_number')->nullable(); // عدد المصادقة
            $table->date('authentication_date')->nullable(); // تاريخ المصادقة
            
            // Valuation status
            $table->enum('valuation_status', ['غير مثمنة', 'مثمنة'])->default('غير مثمنة');
            $table->decimal('valuation_amount', 12, 2)->nullable(); // مبلغ التثمين
            
            // Government vehicle specific fields
            $table->string('source')->nullable(); // وردت من
            $table->string('import_letter_number')->nullable(); // عدد الوارد
            $table->date('import_letter_date')->nullable(); // تاريخ الوارد
            
            $table->text('notes')->nullable(); // ملاحظات
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('vehicles');
    }
};
</file>

<file path="database/migrations/2025_03_05_001840_create_vehicle_statuses_table.php">
// database/migrations/xxxx_xx_xx_create_vehicle_statuses_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('vehicle_statuses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('vehicle_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained();
            $table->string('status_type'); // seizure_status, final_degree_status, authentication_status, valuation_status
            $table->string('old_status')->nullable();
            $table->string('new_status');
            $table->string('letter_number')->nullable();
            $table->date('letter_date')->nullable();
            $table->text('notes')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('vehicle_statuses');
    }
};
</file>

<file path="database/migrations/2025_03_05_001840_create_vehicle_transfers_table.php">
// database/migrations/xxxx_xx_xx_create_vehicle_transfers_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('vehicle_transfers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('vehicle_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained(); // User who created the transfer
            $table->string('recipient_name');
            $table->string('recipient_entity'); // الجهة المستلمة
            $table->string('assigned_to')->nullable(); // منسب إلى
            $table->date('receive_date');
            $table->date('return_date')->nullable();
            $table->text('notes')->nullable();
            $table->boolean('is_external')->default(false); // For external entities
            $table->foreignId('destination_directorate_id')->nullable()->constrained('directorates');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('vehicle_transfers');
    }
};
</file>

<file path="database/migrations/2025_03_05_001841_create_attachments_table.php">
// database/migrations/xxxx_xx_xx_create_attachments_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('attachments', function (Blueprint $table) {
            $table->id();
            $table->morphs('attachable'); // For different types of attachments (vehicle, status, etc)
            $table->string('type'); // vehicle_image, seizure_letter, confiscation_letter, etc
            $table->string('file_name');
            $table->string('file_path');
            $table->string('file_type');
            $table->string('file_size');
            $table->integer('sort_order')->default(0);
            $table->foreignId('user_id')->constrained(); // Who uploaded
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('attachments');
    }
};
</file>

<file path="database/migrations/2025_03_05_001841_create_edit_requests_table.php">
// database/migrations/xxxx_xx_xx_create_edit_requests_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('edit_requests', function (Blueprint $table) {
            $table->id();
            $table->foreignId('vehicle_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained(); // Who requested
            $table->foreignId('approved_by')->nullable()->constrained('users'); // Who approved
            $table->string('field_name');
            $table->text('old_value')->nullable();
            $table->text('new_value');
            $table->enum('status', ['pending', 'approved', 'rejected'])->default('pending');
            $table->text('notes')->nullable();
            $table->timestamp('approval_date')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('edit_requests');
    }
};
</file>

<file path="database/migrations/2025_03_05_001842_add_directorate_id_to_users_table.php">
// database/migrations/xxxx_xx_xx_add_directorate_id_to_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->foreignId('directorate_id')->nullable()->constrained('directorates');
        });
    }

    public function down()
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropForeign(['directorate_id']);
            $table->dropColumn('directorate_id');
        });
    }
};
</file>

<file path="database/migrations/2025_03_05_011608_create_personal_access_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};
</file>

<file path="database/migrations/2025_03_10_000001_add_fields_to_vehicle_transfers_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('vehicles', function (Blueprint $table) {
            $table->boolean('is_externally_referred')->default(false)->after('notes');
            $table->string('external_entity')->nullable()->after('is_externally_referred');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('vehicles', function (Blueprint $table) {
            $table->dropColumn(['is_externally_referred', 'external_entity']);
        });
    }
};
</file>

<file path="database/migrations/2025_03_22_163505_add_new_fields_to_vehicles_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('vehicles', function (Blueprint $table) {
            // تعديل تسلسل مراحل العجلات المصادرة
            // إضافة مراحل الإهداء والترقيم الحكومي
            $table->enum('donation_status', ['غير مهداة', 'مهداة'])->default('غير مهداة')->after('valuation_status');
            $table->string('donation_letter_number')->nullable()->after('donation_status');
            $table->date('donation_letter_date')->nullable()->after('donation_letter_number');
            $table->string('donation_entity')->nullable()->after('donation_letter_date');
            
            $table->enum('government_registration_status', ['غير مرقمة', 'مرقمة'])->default('غير مرقمة')->after('donation_entity');
            $table->string('registration_letter_number')->nullable()->after('government_registration_status');
            $table->date('registration_letter_date')->nullable()->after('registration_letter_number');
            $table->string('government_registration_number')->nullable()->after('registration_letter_date');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('vehicles', function (Blueprint $table) {
            $table->dropColumn([
                'donation_status',
                'donation_letter_number',
                'donation_letter_date',
                'donation_entity',
                'government_registration_status',
                'registration_letter_number',
                'registration_letter_date',
                'government_registration_number',
            ]);
        });
    }
};
</file>

<file path="database/migrations/2025_03_22_163549_add_recipient_id_to_vehicle_transfers_table.php.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('vehicle_transfers', function (Blueprint $table) {
            // إضافة رقم هوية المستلم لتتبع استلام شخص واحد لعدة عجلات
            $table->string('recipient_id_number')->nullable()->after('recipient_name');
            $table->string('recipient_phone')->nullable()->after('recipient_id_number');
            $table->foreignId('completed_by')->nullable()->after('user_id')
                  ->constrained('users')->onDelete('set null');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('vehicle_transfers', function (Blueprint $table) {
            $table->dropForeign(['completed_by']);
            $table->dropColumn(['recipient_id_number', 'recipient_phone', 'completed_by']);
        });
    }
};
</file>

<file path="database/migrations/2025_03_22_163619_create_notifications_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('notifications', function (Blueprint $table) {
            $table->uuid('id')->primary();
            $table->string('type');
            $table->morphs('notifiable');
            $table->text('data');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('notifications');
    }
};
</file>

<file path="database/migrations/2025_03_22_172047_add_transfer_types_to_vehicle_transfers_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('vehicle_transfers', function (Blueprint $table) {
            $table->boolean('is_ownership_transfer')->default(false)->after('return_date');
            $table->boolean('is_referral')->default(false)->after('is_ownership_transfer');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('vehicle_transfers', function (Blueprint $table) {
            $table->dropColumn(['is_ownership_transfer', 'is_referral']);
        });
    }
};
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    public function run()
    {
        $this->call([
            RolesAndPermissionsSeeder::class,
            DirectoratesSeeder::class,
            UsersSeeder::class,
        ]);
    }
}
</file>

<file path="database/seeders/DirectoratesSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Directorate;

class DirectoratesSeeder extends Seeder
{
    public function run()
    {
        $directorates = [
            ['name' => 'المقر العام', 'type' => 'general'],
            ['name' => 'التحقيقات الخاصة', 'type' => 'special'],
            ['name' => 'مخدرات الكرخ', 'type' => 'special'],
            ['name' => 'مخدرات الرصافة', 'type' => 'special'],
            ['name' => 'مخدرات ديالى', 'type' => 'special'],
            ['name' => 'مخدرات نينوى', 'type' => 'special'],
            ['name' => 'مخدرات الانبار', 'type' => 'special'],
            ['name' => 'مخدرات صلاح الدين', 'type' => 'special'],
            ['name' => 'مخدرات كركوك', 'type' => 'special'],
            ['name' => 'مخدرات واسط', 'type' => 'special'],
            ['name' => 'مخدرات بابل', 'type' => 'special'],
            ['name' => 'مخدرات كربلاء', 'type' => 'special'],
            ['name' => 'مخدرات النجف', 'type' => 'special'],
            ['name' => 'مخدرات الديوانية', 'type' => 'special'],
            ['name' => 'مخدرات ذي قار', 'type' => 'special'],
            ['name' => 'مخدرات ميسان', 'type' => 'special'],
            ['name' => 'مخدرات المثنى', 'type' => 'special'],
            ['name' => 'مخدرات البصرة', 'type' => 'special'],
            ['name' => 'التحقيق المالي والموازي', 'type' => 'special'],
        ];

        foreach ($directorates as $directorate) {
            Directorate::create($directorate);
        }
    }
}
</file>

<file path="database/seeders/RolesAndPermissionsSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RolesAndPermissionsSeeder extends Seeder
{
    public function run()
    {
        // Reset cached roles and permissions
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        // Create permissions
        $permissions = [
            // Vehicle permissions
            'view vehicles',
            'create vehicles',
            'edit vehicles',
            'delete vehicles',
            
            // Vehicle status permissions
            'update vehicle status',
            
            // Transfer permissions
            'create transfers',
            'view transfers',
            
            // Edit request permissions
            'create edit requests',
            'approve edit requests',
            'view edit requests',
            
            // User management
            'manage users',
            
            // Reports
            'view reports',
            'export reports',
            
            // Special permissions
            'transfer vehicle file',
            'refer vehicle externally',
        ];

        foreach ($permissions as $permission) {
            Permission::create(['name' => $permission]);
        }

        // Create roles and assign permissions
        
        // 1. Admin (المشرف)
        $role = Role::create(['name' => 'admin']);
        $role->givePermissionTo(Permission::all());
        
        // 2. Data Entry (مدخل البيانات)
        $role = Role::create(['name' => 'data_entry']);
        $role->givePermissionTo([
            'view vehicles',
            'create vehicles',
            'update vehicle status',
            'view transfers',
            'create edit requests',
            'view edit requests',
        ]);
        
        // 3. Verifier (المدقق)
        $role = Role::create(['name' => 'verifier']);
        $role->givePermissionTo([
            'view vehicles',
            'edit vehicles',
            'update vehicle status',
            'approve edit requests',
            'view edit requests',
            'transfer vehicle file',
            'view transfers',
            'view reports',
            'export reports',
        ]);
        
        // 4. Vehicles Department (الآليات)
        $role = Role::create(['name' => 'vehicles_dept']);
        $role->givePermissionTo([
            'view vehicles',
            'view transfers',
            'create transfers',
            'update vehicle status',
            'view reports',
            'create vehicles',
        ]);
        
        // 5. Recipient (المستلم)
        $role = Role::create(['name' => 'recipient']);
        $role->givePermissionTo([
            'view vehicles',
            'view transfers',
        ]);
    }
}
</file>

<file path="database/seeders/UsersSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Directorate;
use Illuminate\Support\Facades\Hash;

class UsersSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // الحصول على المديريات
        $generalDirectorate = Directorate::where('name', 'المقر العام')->first();
        $specialDirectorate = Directorate::where('name', 'التحقيقات الخاصة')->first();
        $financialDirectorate = Directorate::where('name', 'التحقيق المالي والموازي')->first();
        
        // إنشاء المشرف (المدير)
        $admin = User::create([
            'name' => 'مدير النظام',
            'email' => 'admin@example.com',
            'password' => Hash::make('password'),
            'directorate_id' => $generalDirectorate->id,
        ]);
        $admin->assignRole('admin');
        
        // إنشاء المدقق
        $verifier = User::create([
            'name' => 'المدقق',
            'email' => 'verifier@example.com',
            'password' => Hash::make('password'),
            'directorate_id' => $financialDirectorate->id,
        ]);
        $verifier->assignRole('verifier');
        
        // إنشاء مدخل البيانات
        $dataEntry = User::create([
            'name' => 'مدخل البيانات',
            'email' => 'data@example.com',
            'password' => Hash::make('password'),
            'directorate_id' => $specialDirectorate->id,
        ]);
        $dataEntry->assignRole('data_entry');
        
        // إنشاء مستخدم الآليات
        $vehiclesDept = User::create([
            'name' => 'مسؤول الآليات',
            'email' => 'vehicles@example.com',
            'password' => Hash::make('password'),
            'directorate_id' => $generalDirectorate->id,
        ]);
        $vehiclesDept->assignRole('vehicles_dept');
        
        // إنشاء المستلم
        $recipient = User::create([
            'name' => 'المستلم',
            'email' => 'recipient@example.com',
            'password' => Hash::make('password'),
            'directorate_id' => Directorate::where('name', 'مخدرات بغداد')->first()->id ?? $specialDirectorate->id,
        ]);
        $recipient->assignRole('recipient');
    }
}
</file>

<file path="package.json">
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "@popperjs/core": "^2.11.6",
        "@tailwindcss/vite": "^4.0.0",
        "axios": "^1.7.4",
        "bootstrap": "^5.2.3",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^1.2.0",
        "sass": "^1.56.1",
        "tailwindcss": "^4.0.0",
        "vite": "^6.0.11"
    }
}
</file>

<file path="public/.htaccess">
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Handle X-XSRF-Token Header
    RewriteCond %{HTTP:x-xsrf-token} .
    RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
</file>

<file path="public/index.php">
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());
</file>

<file path="resources/js/app.js">
import './bootstrap';
</file>

<file path="resources/views/dashboard.blade.php">
<!-- resources/views/dashboard.blade.php -->
@extends('layouts.app')

@section('title', 'لوحة التحكم')

@section('content')
<div class="row">
    <div class="col-md-3 mb-4">
        <div class="card border-primary h-100">
            <div class="card-body text-center">
                <h5 class="card-title">العجلات المصادرة</h5>
                <p class="card-text display-4">{{ $confiscatedCount }}</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-3 mb-4">
        <div class="card border-success h-100">
            <div class="card-body text-center">
                <h5 class="card-title">العجلات الحكومية</h5>
                <p class="card-text display-4">{{ $governmentCount }}</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-3 mb-4">
        <div class="card border-warning h-100">
            <div class="card-body text-center">
                <h5 class="card-title">طلبات التعديل</h5>
                <p class="card-text display-4">{{ $pendingRequests }}</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-3 mb-4">
        <div class="card border-info h-100">
            <div class="card-body text-center">
                <h5 class="card-title">المناقلات الجارية</h5>
                <p class="card-text display-4">{{ $pendingTransfers }}</p>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">إحصائيات العجلات حسب الحالة</h5>
            </div>
            <div class="card-body">
                @if(count($vehiclesByStatus) > 0)
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>الحالة</th>
                                <th>العدد</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($vehiclesByStatus as $status => $count)
                            <tr>
                                <td>{{ $status }}</td>
                                <td>{{ $count }}</td>
                            </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                @else
                <p class="text-center">لا توجد بيانات</p>
                @endif
            </div>
        </div>
    </div>
    
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">آخر العجلات المضافة</h5>
            </div>
            <div class="card-body">
                @if($recentVehicles->count() > 0)
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>الرقم</th>
                                <th>النوع</th>
                                <th>المديرية</th>
                                <th>التاريخ</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($recentVehicles as $vehicle)
                            <tr onclick="window.location='{{ route('vehicles.show', $vehicle) }}'">
                                <td>{{ $vehicle->id }}</td>
                                <td>{{ $vehicle->vehicle_type }}</td>
                                <td>{{ $vehicle->directorate->name }}</td>
                                <td>{{ $vehicle->created_at->format('Y-m-d') }}</td>
                            </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                @else
                <p class="text-center">لا توجد عجلات حديثة</p>
                @endif
            </div>
        </div>
    </div>
</div>

@if($recentRequests->count() > 0 || $recentTransfers->count() > 0)
<div class="row mt-4">
    @if($recentRequests->count() > 0)
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">آخر طلبات التعديل</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>الحقل</th>
                                <th>العجلة</th>
                                <th>الحالة</th>
                                <th>التاريخ</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($recentRequests as $request)
                            <tr onclick="window.location='{{ route('edit-requests.show', $request) }}'">
                                <td>{{ $request->field_name }}</td>
                                <td>{{ $request->vehicle->vehicle_type }}</td>
                                <td>
                                    @if($request->status == 'pending')
                                    <span class="badge bg-warning">قيد الانتظار</span>
                                    @elseif($request->status == 'approved')
                                    <span class="badge bg-success">تمت الموافقة</span>
                                    @else
                                    <span class="badge bg-danger">مرفوض</span>
                                    @endif
                                </td>
                                <td>{{ $request->created_at->format('Y-m-d') }}</td>
                            </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @endif
    
    @if($recentTransfers->count() > 0)
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">آخر المناقلات</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>العجلة</th>
                                <th>المستلم</th>
                                <th>تاريخ الاستلام</th>
                                <th>الحالة</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($recentTransfers as $transfer)
                            <tr onclick="window.location='{{ route('transfers.show', $transfer) }}'">
                                <td>{{ $transfer->vehicle->vehicle_type }}</td>
                                <td>{{ $transfer->recipient_name }}</td>
                                <td>{{ $transfer->receive_date->format('Y-m-d') }}</td>
                                <td>
                                    @if($transfer->return_date)
                                    <span class="badge bg-success">مكتملة</span>
                                    @else
                                    <span class="badge bg-primary">جارية</span>
                                    @endif
                                </td>
                            </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @endif
</div>
@endif
@endsection
</file>

<file path="resources/views/edit_requests/create.blade.php">
@extends('layouts.app')

@section('title', 'طلب تعديل بيانات العجلة #' . $vehicle->id)

@section('actions')
<a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-primary">
    <i class="bi bi-arrow-right"></i> عودة للتفاصيل
</a>
@endsection

@section('content')
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">طلب تعديل حقل "{{ $field }}"</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('edit-requests.store', $vehicle) }}" method="POST" enctype="multipart/form-data">
            @csrf
            
            <input type="hidden" name="field_name" value="{{ $field }}">
            <input type="hidden" name="old_value" value="{{ $fieldValue }}">
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="old_value_display" class="form-label">القيمة الحالية</label>
                        @if($inputType == 'select')
                        <input type="text" id="old_value_display" class="form-control" value="{{ $fieldValue }}" readonly>
                        @elseif($inputType == 'textarea')
                        <textarea id="old_value_display" class="form-control" rows="3" readonly>{{ $fieldValue }}</textarea>
                        @elseif($inputType == 'date' && $fieldValue)
                        <input type="text" id="old_value_display" class="form-control" value="{{ \Carbon\Carbon::parse($fieldValue)->format('Y-m-d') }}" readonly>
                        @else
                        <input type="text" id="old_value_display" class="form-control" value="{{ $fieldValue }}" readonly>
                        @endif
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="new_value" class="form-label required-field">القيمة الجديدة</label>
                        @if($inputType == 'select')
                        <select name="new_value" id="new_value" class="form-select @error('new_value') is-invalid @enderror" required>
                            <option value="صالحة" {{ $fieldValue == 'صالحة' ? '' : 'selected' }}>صالحة</option>
                            <option value="غير صالحة" {{ $fieldValue == 'غير صالحة' ? '' : 'selected' }}>غير صالحة</option>
                        </select>
                        @elseif($inputType == 'textarea')
                        <textarea name="new_value" id="new_value" class="form-control @error('new_value') is-invalid @enderror" 
                                rows="3" required>{{ old('new_value', $fieldValue) }}</textarea>
                        @elseif($inputType == 'date')
                        <input type="date" name="new_value" id="new_value" class="form-control @error('new_value') is-invalid @enderror" 
                               value="{{ old('new_value', $fieldValue ? \Carbon\Carbon::parse($fieldValue)->format('Y-m-d') : '') }}" required>
                        @elseif($inputType == 'number')
                        <input type="number" name="new_value" id="new_value" class="form-control @error('new_value') is-invalid @enderror" 
                               value="{{ old('new_value', $fieldValue) }}" step="0.01" required>
                        @else
                        <input type="text" name="new_value" id="new_value" class="form-control @error('new_value') is-invalid @enderror" 
                               value="{{ old('new_value', $fieldValue) }}" required>
                        @endif
                        @error('new_value')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="notes" class="form-label">سبب التعديل</label>
                        <textarea name="notes" id="notes" class="form-control @error('notes') is-invalid @enderror" 
                                  rows="3">{{ old('notes') }}</textarea>
                        @error('notes')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="attachment" class="form-label">مرفق داعم (اختياري)</label>
                        <input type="file" name="attachment" id="attachment" class="form-control @error('attachment') is-invalid @enderror" 
                               accept=".pdf,.doc,.docx,.jpg,.jpeg,.png">
                        <small class="form-text text-muted">يمكنك إرفاق ملف داعم لطلب التعديل (PDF, DOC, DOCX, JPG, PNG)</small>
                        @error('attachment')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-send"></i> إرسال الطلب
                </button>
                <a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-secondary">
                    <i class="bi bi-x"></i> إلغاء
                </a>
            </div>
        </form>
    </div>
</div>
@endsection
</file>

<file path="resources/views/edit_requests/index.blade.php">
<!-- resources/views/edit_requests/index.blade.php -->
@extends('layouts.app')

@section('title', 'طلبات التعديل')

@section('content')
<!-- Filter Form -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">فلترة البيانات</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('edit-requests.index') }}" method="GET" class="row g-3">
            <div class="col-md-4">
                <label for="status" class="form-label">الحالة</label>
                <select name="status" id="status" class="form-select">
                   <option value="">الكل</option>
                   <option value="pending" {{ request('status') == 'pending' ? 'selected' : '' }}>قيد الانتظار</option>
                   <option value="approved" {{ request('status') == 'approved' ? 'selected' : '' }}>تمت الموافقة</option>
                   <option value="rejected" {{ request('status') == 'rejected' ? 'selected' : '' }}>مرفوض</option>
               </select>
           </div>
           
           @if(auth()->user()->hasRole(['admin', 'verifier']))
           <div class="col-md-4">
               <label for="directorate_id" class="form-label">المديرية</label>
               <select name="directorate_id" id="directorate_id" class="form-select">
                   <option value="">الكل</option>
                   @foreach(\App\Models\Directorate::all() as $directorate)
                   <option value="{{ $directorate->id }}" {{ request('directorate_id') == $directorate->id ? 'selected' : '' }}>
                       {{ $directorate->name }}
                   </option>
                   @endforeach
               </select>
           </div>
           @endif
           
           <div class="col-md-4">
               <label for="search" class="form-label">بحث</label>
               <input type="text" name="search" id="search" class="form-control" 
                      value="{{ request('search') }}" placeholder="نوع، حقل، قيمة...">
           </div>
           
           <div class="col-12">
               <button type="submit" class="btn btn-primary">تطبيق الفلتر</button>
               <a href="{{ route('edit-requests.index') }}" class="btn btn-secondary">إعادة تعيين</a>
           </div>
       </form>
   </div>
</div>

<!-- Edit Requests Table -->
<div class="card">
   <div class="card-header d-flex justify-content-between align-items-center">
       <h5 class="mb-0">قائمة طلبات التعديل</h5>
       <span>العدد الكلي: {{ $editRequests->total() }}</span>
   </div>
   <div class="card-body">
       @if($editRequests->count() > 0)
       <div class="table-responsive">
           <table class="table table-hover">
               <thead>
                   <tr>
                       <th>#</th>
                       <th>العجلة</th>
                       <th>الحقل</th>
                       <th>القيمة الجديدة</th>
                       <th>المستخدم</th>
                       <th>التاريخ</th>
                       <th>الحالة</th>
                       <th>الإجراءات</th>
                   </tr>
               </thead>
               <tbody>
                   @foreach($editRequests as $request)
                   <tr>
                       <td>{{ $request->id }}</td>
                       <td>
                           <a href="{{ route('vehicles.show', $request->vehicle) }}">
                               {{ $request->vehicle->vehicle_type }} - {{ $request->vehicle->vehicle_number }}
                           </a>
                       </td>
                       <td>{{ $request->field_name }}</td>
                       <td>{{ Str::limit($request->new_value, 30) }}</td>
                       <td>{{ $request->user->name }}</td>
                       <td>{{ $request->created_at->format('Y-m-d') }}</td>
                       <td>
                           @if($request->status == 'pending')
                           <span class="badge bg-warning">قيد الانتظار</span>
                           @elseif($request->status == 'approved')
                           <span class="badge bg-success">تمت الموافقة</span>
                           @else
                           <span class="badge bg-danger">مرفوض</span>
                           @endif
                       </td>
                       <td>
                           <a href="{{ route('edit-requests.show', $request) }}" class="btn btn-sm btn-primary">
                               <i class="bi bi-eye"></i> عرض
                           </a>
                       </td>
                   </tr>
                   @endforeach
               </tbody>
           </table>
       </div>
       
       <div class="mt-4">
           {{ $editRequests->withQueryString()->links() }}
       </div>
       @else
       <div class="text-center py-4">
           <h4>لا توجد طلبات تعديل</h4>
           <p class="text-muted">لم يتم العثور على طلبات تعديل مطابقة لمعايير البحث</p>
       </div>
       @endif
   </div>
</div>
@endsection
</file>

<file path="resources/views/edit_requests/show.blade.php">
<!-- resources/views/edit_requests/show.blade.php -->
@extends('layouts.app')

@section('title', 'تفاصيل طلب التعديل #' . $editRequest->id)

@section('actions')
<div class="btn-group" role="group">
    @if($editRequest->status == 'pending' && auth()->user()->can('approve edit requests'))
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#approveModal">
        <i class="bi bi-check-lg"></i> موافقة
    </button>
    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#rejectModal">
        <i class="bi bi-x-lg"></i> رفض
    </button>
    @endif
    
    <a href="{{ route('edit-requests.index') }}" class="btn btn-primary">
        <i class="bi bi-arrow-right"></i> عودة للقائمة
    </a>
</div>
@endsection

@section('content')
<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">معلومات الطلب</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="30%">الحالة</th>
                            <td>
                                @if($editRequest->status == 'pending')
                                <span class="badge bg-warning">قيد الانتظار</span>
                                @elseif($editRequest->status == 'approved')
                                <span class="badge bg-success">تمت الموافقة</span>
                                @else
                                <span class="badge bg-danger">مرفوض</span>
                                @endif
                            </td>
                        </tr>
                        <tr>
                            <th>رقم العجلة</th>
                            <td>
                                <a href="{{ route('vehicles.show', $editRequest->vehicle) }}">
                                    {{ $editRequest->vehicle->vehicle_type }} - {{ $editRequest->vehicle->vehicle_number ?: 'بلا رقم' }}
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>الحقل المراد تعديله</th>
                            <td>{{ $editRequest->field_name }}</td>
                        </tr>
                        <tr>
                            <th>القيمة الحالية</th>
                            <td>
                                @if(is_array(json_decode($editRequest->old_value)))
                                {{ implode(', ', json_decode($editRequest->old_value)) }}
                                @else
                                {{ $editRequest->old_value ?: 'غير محدد' }}
                                @endif
                            </td>
                        </tr>
                        <tr>
                            <th>القيمة الجديدة</th>
                            <td>
                                @if(is_array(json_decode($editRequest->new_value)))
                                {{ implode(', ', json_decode($editRequest->new_value)) }}
                                @else
                                {{ $editRequest->new_value }}
                                @endif
                            </td>
                        </tr>
                        <tr>
                            <th>سبب التعديل</th>
                            <td>{{ $editRequest->notes ?: 'لم يتم تحديد سبب' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ الطلب</th>
                            <td>{{ $editRequest->created_at->format('Y-m-d H:i') }}</td>
                        </tr>
                        <tr>
                            <th>مقدم الطلب</th>
                            <td>{{ $editRequest->user->name }}</td>
                        </tr>
                        @if($editRequest->status != 'pending')
                        <tr>
                            <th>قام بالمراجعة</th>
                            <td>{{ $editRequest->approver->name ?? 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ المراجعة</th>
                            <td>{{ $editRequest->approval_date ? $editRequest->approval_date->format('Y-m-d H:i') : 'غير محدد' }}</td>
                        </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">المرفقات</h5>
            </div>
            <div class="card-body">
                @if($editRequest->attachments->count() > 0)
                <div class="list-group">
                    @foreach($editRequest->attachments as $attachment)
                    <a href="{{ route('attachments.download', $attachment) }}" class="list-group-item list-group-item-action">
                        <i class="bi bi-file-earmark"></i> {{ $attachment->file_name }}
                        <span class="badge bg-secondary float-end">
                            {{ number_format($attachment->file_size / 1024, 2) }} KB
                        </span>
                    </a>
                    @endforeach
                </div>
                @else
                <p class="text-muted">لا توجد مرفقات</p>
                @endif
            </div>
        </div>
    </div>
</div>

<!-- Approve Modal -->
@if($editRequest->status == 'pending' && auth()->user()->can('approve edit requests'))
<div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form action="{{ route('edit-requests.approve', $editRequest) }}" method="POST">
                @csrf
                <div class="modal-header">
                    <h5 class="modal-title" id="approveModalLabel">تأكيد الموافقة</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>هل أنت متأكد من الموافقة على طلب تعديل الحقل <strong>{{ $editRequest->field_name }}</strong>؟</p>
                    <p>سيتم تغيير القيمة من <strong>{{ $editRequest->old_value ?: 'غير محدد' }}</strong> إلى <strong>{{ $editRequest->new_value }}</strong>.</p>
                    
                    <div class="form-group">
                        <label for="notes" class="form-label">ملاحظات (اختياري)</label>
                        <textarea name="notes" id="notes" class="form-control" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" class="btn btn-success">تأكيد الموافقة</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Reject Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form action="{{ route('edit-requests.reject', $editRequest) }}" method="POST">
                @csrf
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectModalLabel">تأكيد الرفض</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>هل أنت متأكد من رفض طلب تعديل الحقل <strong>{{ $editRequest->field_name }}</strong>؟</p>
                    
                    <div class="form-group">
                        <label for="notes" class="form-label required-field">سبب الرفض</label>
                        <textarea name="notes" id="notes" class="form-control" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" class="btn btn-danger">تأكيد الرفض</button>
                </div>
            </form>
        </div>
    </div>
</div>
@endif
@endsection
</file>

<file path="resources/views/home.blade.php">
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Dashboard') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    {{ __('You are logged in!') }}
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/layouts/app.blade.php">
<!-- resources/views/layouts/app.blade.php -->
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    
    <title>@yield('title', 'نظام إدارة العجلات') - {{ config('app.name') }}</title>
    
    <!-- Styles -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    
    <!-- RTL Bootstrap -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.rtl.min.css">
    
    <!-- Custom CSS -->
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }
        .sidebar {
            min-height: calc(100vh - 56px);
            box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
            background-color: #343a40;
        }
        .sidebar .nav-link {
            color: #ced4da;
            padding: 0.75rem 1rem;
            font-weight: 500;
        }
        .sidebar .nav-link:hover {
            color: #fff;
        }
        .sidebar .nav-link.active {
            color: #fff;
            background-color: #495057;
        }
        .sidebar .nav-link .bi {
            margin-left: 0.5rem;
        }
        .main-content {
            padding: 1.5rem;
        }
        .navbar-brand {
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
            font-size: 1rem;
            background-color: rgba(0, 0, 0, .25);
            box-shadow: inset -1px 0 0 rgba(0, 0, 0, .25);
        }
        .status-badge {
            padding: 0.5rem;
            border-radius: 5px;
            font-weight: 500;
        }
        .required-field::after {
            content: '*';
            color: red;
            margin-right: 4px;
        }
        .table-hover tbody tr:hover {
            background-color: #f5f5f5;
            cursor: pointer;
        }
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
        .dropdown-menu {
        z-index: 1030; /* قيمة أعلى من z-index الافتراضي لضمان ظهور القائمة المنسدلة فوق العناصر الأخرى */
        }
    
            .navbar .dropdown-menu {
            position: absolute;
            right: 0;
            left: auto;
        }
    
        @media (max-width: 767.98px) {
            .navbar .dropdown-menu {
                position: absolute;
                right: 0;
                left: auto;
                width: 280px !important; /* عرض أصغر على الشاشات الصغيرة */
            }
        }
    
        /* تحسين شكل عناصر القائمة المنسدلة */
        .dropdown-menu .list-group-item {
            border-left: none;
            border-right: none;
        }
    
        .dropdown-menu .list-group-item:first-child {
            border-top: none;
        }
    
        .dropdown-menu .list-group-item:last-child {
            border-bottom: none;
        }

    </style>
    
    @stack('styles')
</head>
<body>
    <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
        <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="{{ route('dashboard') }}">
            نظام إدارة العجلات
        </a>
        <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" 
                data-bs-toggle="collapse" data-bs-target="#sidebarMenu" 
                aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        
        <!-- شريط البحث إذا كان موجودًا -->
        <div class="w-100"></div>
        
        <!-- قائمة الإشعارات والمستخدم -->
        <div class="d-flex align-items-center">
            <!-- قائمة الإشعارات -->
            @auth
            <div class="dropdown me-3">
                <button class="btn btn-dark position-relative dropdown-toggle" type="button" id="notificationsDropdown" data-bs-toggle="dropdown" aria-expanded="false" style="background:none; border:none;">
                    <i class="bi bi-bell text-light"></i>
                    @if(auth()->user()->unreadNotifications()->count() > 0)
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        {{ auth()->user()->unreadNotifications()->count() > 99 ? '99+' : auth()->user()->unreadNotifications()->count() }}
                    </span>
                    @endif
                </button>
                <div class="dropdown-menu dropdown-menu-end p-0" style="width: 320px; max-height: 400px; overflow-y: auto;">
                    <div class="card m-0 border-0">
                        <div class="card-header bg-light d-flex justify-content-between py-2">
                            <span class="fw-bold">الإشعارات</span>
                            @if(auth()->user()->unreadNotifications()->count() > 0)
                            <form action="{{ route('notifications.mark-all-as-read') }}" method="POST" class="d-inline">
                                @csrf
                                <button type="submit" class="btn btn-sm btn-link p-0 text-decoration-none">
                                    تحديد الكل كمقروء
                                </button>
                            </form>
                            @endif
                        </div>
                        <div class="card-body p-0">
                            <div class="list-group list-group-flush">
                                @forelse(auth()->user()->unreadNotifications()->take(5)->get() as $notification)
                                <a href="{{ isset($notification->data['vehicle_id']) ? route('vehicles.show', $notification->data['vehicle_id']) : (isset($notification->data['transfer_id']) ? route('transfers.show', $notification->data['transfer_id']) : route('notifications.index')) }}" class="list-group-item list-group-item-action py-2 lh-sm">
                                    <div class="d-flex w-100 align-items-center">
                                        <div class="me-2">
                                            <i class="bi bi-circle-fill text-primary" style="font-size: 0.5rem;"></i>
                                        </div>
                                        <div class="small w-100">
                                            @if(isset($notification->data['status_type_name']))
                                            <div class="text-muted">تحديث حالة عجلة</div>
                                            <div>
                                                {{ $notification->data['status_type_name'] ?? '' }}: 
                                                {{ $notification->data['old_status'] ?? '' }} → {{ $notification->data['new_status'] ?? '' }}
                                            </div>
                                            @elseif(isset($notification->data['transfer_type']))
                                            <div class="text-muted">{{ $notification->data['transfer_type'] ?? 'مناقلة' }}</div>
                                            <div>
                                                {{ $notification->data['vehicle_type'] ?? '' }} - {{ $notification->data['vehicle_number'] ?? '' }}
                                            </div>
                                            @else
                                            <div>إشعار جديد</div>
                                            @endif
                                            <div class="text-muted mt-1">{{ $notification->created_at->diffForHumans() }}</div>
                                        </div>
                                    </div>
                                </a>
                                @empty
                                <div class="list-group-item text-center text-muted py-3">لا توجد إشعارات جديدة</div>
                                @endforelse
                            </div>
                        </div>
                        <div class="card-footer text-center p-2 bg-light">
                            <a href="{{ route('notifications.index') }}" class="text-decoration-none">عرض جميع الإشعارات</a>
                        </div>
                    </div>
                </div>
            </div>
            @endauth
                                                
            <!-- اسم المستخدم -->
            <div class="px-3 text-white d-none d-md-block">
                @auth
                {{ auth()->user()->name }}
                @endauth
            </div>
                                                
            <!-- زر تسجيل الخروج -->
            <div>
                @auth
                <form action="{{ route('logout') }}" method="POST">
                    @csrf
                    <button type="submit" class="nav-link px-3 bg-dark border-0 text-white">
                        <i class="bi bi-box-arrow-right"></i> تسجيل الخروج
                    </button>
                </form>
                @endauth
            </div>
        </div>
    </header>

    <div class="container-fluid">
        <div class="row">
            <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link {{ Request::routeIs('dashboard') ? 'active' : '' }}" 
                               href="{{ route('dashboard') }}">
                                <i class="bi bi-speedometer2"></i> لوحة التحكم
                            </a>
                        </li>
                        
                        @can('view vehicles')
                        <li class="nav-item">
                            <a class="nav-link {{ Request::routeIs('vehicles.*') ? 'active' : '' }}" 
                               href="{{ route('vehicles.index') }}">
                                <i class="bi bi-truck"></i> العجلات
                            </a>
                        </li>
                        @endcan
                        
                        @can('view transfers')
                        <li class="nav-item">
                            <a class="nav-link {{ Request::routeIs('transfers.*') ? 'active' : '' }}" 
                               href="{{ route('transfers.index') }}">
                                <i class="bi bi-arrow-left-right"></i> المناقلات
                            </a>
                        </li>
                        @endcan
                        
                        @can('view edit requests')
                        <li class="nav-item">
                            <a class="nav-link {{ Request::routeIs('edit-requests.*') ? 'active' : '' }}" 
                               href="{{ route('edit-requests.index') }}">
                                <i class="bi bi-pencil-square"></i> طلبات التعديل
                                @php
                                    $pendingRequests = auth()->user()->hasRole('admin', 'verifier') 
                                        ? \App\Models\EditRequest::where('status', 'pending')->count()
                                        : \App\Models\EditRequest::where('user_id', auth()->id())
                                            ->where('status', 'pending')->count();
                                @endphp
                                @if($pendingRequests > 0)
                                <span class="badge bg-danger">{{ $pendingRequests }}</span>
                                @endif
                            </a>
                        </li>
                        @endcan
                        
                        @role('admin')
                        <li class="nav-item">
                            <a class="nav-link {{ Request::routeIs('notifications.*') ? 'active' : '' }}" 
                               href="{{ route('notifications.index') }}">
                                <i class="bi bi-bell"></i> الإشعارات
                                @if(auth()->user()->unreadNotifications()->count() > 0)
                                <span class="badge bg-danger">{{ auth()->user()->unreadNotifications()->count() }}</span>
                                @endif
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {{ Request::routeIs('users.*') ? 'active' : '' }}" 
                               href="{{ route('users.index') }}">
                                <i class="bi bi-people"></i> إدارة المستخدمين
                            </a>
                        </li>

                        @endrole
                    </ul>
                </div>
            </nav>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                @if(session('success'))
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    {{ session('success') }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                @endif

                @if(session('error'))
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    {{ session('error') }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                @endif

                @if ($errors->any())
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <ul class="mb-0">
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                @endif

                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">@yield('title')</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        @yield('actions')
                    </div>
                </div>

                @yield('content')
            </main>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.js"></script>
    
    <script>
        // Confirm delete
        document.addEventListener('DOMContentLoaded', function() {
            const deleteButtons = document.querySelectorAll('.btn-delete');
            
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const form = this.closest('form');
                    
                    Swal.fire({
                        title: 'هل أنت متأكد؟',
                        text: "لا يمكن التراجع عن هذا الإجراء!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'نعم، احذف',
                        cancelButtonText: 'إلغاء'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            form.submit();
                        }
                    });
                });
            });
        });
    </script>
    
    @stack('scripts')
</body>
</html>
</file>

<file path="resources/views/notifications/index.blade.php">
@extends('layouts.app')

@section('title', 'الإشعارات')

@section('actions')
    @if($unreadCount > 0)
    <form action="{{ route('notifications.mark-all-as-read') }}" method="POST" class="d-inline">
        @csrf
        <button type="submit" class="btn btn-primary">
            <i class="bi bi-check-all"></i> تحديد الكل كمقروء
        </button>
    </form>
    @endif
@endsection

@section('content')
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">قائمة الإشعارات</h5>
        <span class="badge bg-primary">{{ $unreadCount }} غير مقروء</span>
    </div>
    <div class="card-body">
        @if($notifications->count() > 0)
            <div class="list-group">
                @foreach($notifications as $notification)
                    <div class="list-group-item list-group-item-action {{ is_null($notification->read_at) ? 'list-group-item-primary' : '' }}">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">{{ $notification->data['status_type_name'] ?? 'إشعار' }}</h6>
                            <small>{{ $notification->created_at->diffForHumans() }}</small>
                        </div>
                        
                        @if(isset($notification->data['vehicle_id']))
                            <p class="mb-1">
                                تم تحديث حالة العجلة: {{ $notification->data['vehicle_type'] ?? '' }} - {{ $notification->data['vehicle_number'] ?? 'بلا رقم' }}
                            </p>
                            <p class="mb-1">
                                من: {{ $notification->data['old_status'] ?? '' }}
                                <i class="bi bi-arrow-right"></i>
                                إلى: {{ $notification->data['new_status'] ?? '' }}
                            </p>
                            <p class="mb-1">
                                تم بواسطة: {{ $notification->data['updated_by_name'] ?? '' }}
                            </p>
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <a href="{{ route('vehicles.show', $notification->data['vehicle_id']) }}" class="btn btn-sm btn-primary">
                                    <i class="bi bi-eye"></i> عرض العجلة
                                </a>
                                
                                @if(is_null($notification->read_at))
                                <form action="{{ route('notifications.mark-as-read', $notification->id) }}" method="POST" class="d-inline">
                                    @csrf
                                    <button type="submit" class="btn btn-sm btn-secondary">
                                        <i class="bi bi-check"></i> تحديد كمقروء
                                    </button>
                                </form>
                                @endif
                            </div>
                        @else
                            <p class="mb-1">{{ print_r($notification->data, true) }}</p>
                        @endif
                    </div>
                @endforeach
            </div>
            
            <div class="mt-4">
                {{ $notifications->links() }}
            </div>
        @else
            <div class="text-center py-4">
                <h4>لا توجد إشعارات</h4>
                <p class="text-muted">ستظهر هنا الإشعارات المتعلقة بتحديثات النظام</p>
            </div>
        @endif
    </div>
</div>
@endsection
</file>

<file path="resources/views/transfers/create.blade.php">
@extends('layouts.app')

@section('title', 'إنشاء مناقلة جديدة للعجلة #' . $vehicle->id)

@section('actions')
<a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-primary">
    <i class="bi bi-arrow-right"></i> عودة للتفاصيل
</a>
@endsection

@section('content')
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">مناقلة عجلة: {{ $vehicle->vehicle_type }} {{ $vehicle->vehicle_name }} {{ $vehicle->vehicle_number }}</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('transfers.store', $vehicle) }}" method="POST" enctype="multipart/form-data">
            @csrf
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="recipient_name" class="form-label required-field">اسم المستلم</label>
                        <input type="text" name="recipient_name" id="recipient_name" class="form-control @error('recipient_name') is-invalid @enderror" 
                               value="{{ old('recipient_name') }}" required>
                        @error('recipient_name')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="recipient_id_number" class="form-label required-field">رقم هوية المستلم</label>
                        <input type="text" name="recipient_id_number" id="recipient_id_number" class="form-control @error('recipient_id_number') is-invalid @enderror" 
                               value="{{ old('recipient_id_number') }}" required>
                        <small class="text-muted" id="recipient_id_warning"></small>
                        @error('recipient_id_number')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="recipient_phone" class="form-label">رقم هاتف المستلم</label>
                        <input type="text" name="recipient_phone" id="recipient_phone" class="form-control @error('recipient_phone') is-invalid @enderror" 
                               value="{{ old('recipient_phone') }}">
                        @error('recipient_phone')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="recipient_entity" class="form-label required-field">الجهة المستلمة</label>
                        <input type="text" name="recipient_entity" id="recipient_entity" class="form-control @error('recipient_entity') is-invalid @enderror" 
                               value="{{ old('recipient_entity') }}" required>
                        @error('recipient_entity')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="destination_directorate_id" class="form-label required-field">المديرية المستلمة</label>
                        <select name="destination_directorate_id" id="destination_directorate_id" 
                                class="form-select @error('destination_directorate_id') is-invalid @enderror" required>
                            <option value="">-- اختر المديرية --</option>
                            @foreach($directorates as $directorate)
                            <option value="{{ $directorate->id }}" {{ old('destination_directorate_id') == $directorate->id ? 'selected' : '' }}>
                                {{ $directorate->name }}
                            </option>
                            @endforeach
                        </select>
                        @error('destination_directorate_id')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="assigned_to" class="form-label">منسب إلى</label>
                        <input type="text" name="assigned_to" id="assigned_to" class="form-control @error('assigned_to') is-invalid @enderror" 
                               value="{{ old('assigned_to') }}">
                        @error('assigned_to')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="receive_date" class="form-label required-field">تاريخ الاستلام</label>
                        <input type="date" name="receive_date" id="receive_date" class="form-control @error('receive_date') is-invalid @enderror" 
                               value="{{ old('receive_date', now()->format('Y-m-d')) }}" required>
                        @error('receive_date')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="notes" class="form-label">ملاحظات</label>
                        <textarea name="notes" id="notes" class="form-control @error('notes') is-invalid @enderror" 
                                  rows="3">{{ old('notes') }}</textarea>
                        @error('notes')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="attachment" class="form-label required-field">مستند المناقلة</label>
                        <input type="file" name="attachment" id="attachment" class="form-control @error('attachment') is-invalid @enderror" 
                              accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" required>
                        <small class="form-text text-muted">أرفق مستند المناقلة (PDF, DOC, DOCX, JPG, PNG)</small>
                        @error('attachment')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> حفظ المناقلة
                </button>
                <a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-secondary">
                    <i class="bi bi-x"></i> إلغاء
                </a>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
<script>
   document.addEventListener('DOMContentLoaded', function() {
       const recipientIdInput = document.getElementById('recipient_id_number');
       const recipientIdWarning = document.getElementById('recipient_id_warning');
       
       // التحقق من الشخص المستلم إذا كان لديه عجلات أخرى
       function checkRecipientId(idNumber) {
           if (!idNumber) return;
           
           fetch(`/api/check-recipient?id_number=${encodeURIComponent(idNumber)}`)
               .then(response => response.json())
               .then(data => {
                   if (data.count > 0) {
                       recipientIdWarning.innerHTML = `<span class="text-danger">تحذير: هذا الشخص مستلم لـ ${data.count} عجلة أخرى</span>`;
                   } else {
                       recipientIdWarning.textContent = '';
                   }
               })
               .catch(error => {
                   console.error('Error checking recipient:', error);
               });
       }
       
       recipientIdInput.addEventListener('blur', function() {
           checkRecipientId(this.value);
       });
   });
</script>
@endpush
</file>

<file path="resources/views/transfers/index.blade.php">
@extends('layouts.app')

@section('title', 'المناقلات')

@section('content')
<!-- Filter Form -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">فلترة البيانات</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('transfers.index') }}" method="GET" class="row g-3">
            <div class="col-md-3">
                <label for="vehicle_type" class="form-label">نوع العجلة</label>
                <select name="vehicle_type" id="vehicle_type" class="form-select">
                    <option value="">الكل</option>
                    <option value="confiscated" {{ request('vehicle_type') == 'confiscated' ? 'selected' : '' }}>مصادرة</option>
                    <option value="government" {{ request('vehicle_type') == 'government' ? 'selected' : '' }}>حكومية</option>
                </select>
            </div>
            
            <div class="col-md-3">
                <label for="transfer_type" class="form-label">نوع المناقلة</label>
                <select name="transfer_type" id="transfer_type" class="form-select">
                    <option value="">الكل</option>
                    <option value="regular" {{ request('transfer_type') == 'regular' ? 'selected' : '' }}>مناقلة اعتيادية</option>
                    <option value="ownership" {{ request('transfer_type') == 'ownership' ? 'selected' : '' }}>نقل ملكية</option>
                    <option value="referral" {{ request('transfer_type') == 'referral' ? 'selected' : '' }}>إحالة خارجية</option>
                </select>
            </div>
            
            <div class="col-md-3">
                <label for="status" class="form-label">الحالة</label>
                <select name="status" id="status" class="form-select">
                    <option value="">الكل</option>
                    <option value="active" {{ request('status') == 'active' ? 'selected' : '' }}>جارية</option>
                    <option value="completed" {{ request('status') == 'completed' ? 'selected' : '' }}>مكتملة</option>
                </select>
            </div>
            
            @if(auth()->user()->hasRole(['admin', 'verifier', 'vehicles_dept']))
            <div class="col-md-3">
                <label for="directorate_id" class="form-label">المديرية المستلمة</label>
                <select name="directorate_id" id="directorate_id" class="form-select">
                    <option value="">الكل</option>
                    @foreach($directorates as $directorate)
                    <option value="{{ $directorate->id }}" {{ request('directorate_id') == $directorate->id ? 'selected' : '' }}>
                        {{ $directorate->name }}
                    </option>
                    @endforeach
                </select>
            </div>
            @endif
            
            <div class="col-md-3">
                <label for="recipient_id_number" class="form-label">رقم هوية المستلم</label>
                <input type="text" name="recipient_id_number" id="recipient_id_number" class="form-control" 
                       value="{{ request('recipient_id_number') }}" placeholder="رقم الهوية">
            </div>
            
            <div class="col-md-3">
                <label for="search" class="form-label">بحث</label>
                <input type="text" name="search" id="search" class="form-control" 
                       value="{{ request('search') }}" placeholder="المستلم، العجلة...">
            </div>
            
            <div class="col-12">
                <button type="submit" class="btn btn-primary">تطبيق الفلتر</button>
                <a href="{{ route('transfers.index') }}" class="btn btn-secondary">إعادة تعيين</a>
            </div>
        </form>
    </div>
</div>

<!-- تحذير المستلمين المتعددين -->
@if(count($activeTransferCountsByRecipient) > 0)
<div class="card mb-4">
    <div class="card-header bg-warning">
        <h5 class="mb-0">تنبيه: أشخاص لديهم أكثر من عجلة مستلمة</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>رقم الهوية</th>
                        <th>عدد العجلات المستلمة</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($activeTransferCountsByRecipient as $idNumber => $count)
                    <tr>
                        <td>{{ $idNumber }}</td>
                        <td><span class="badge {{ $count > 1 ? 'bg-danger' : 'bg-warning' }}">{{ $count }}</span></td>
                        <td>
                            <a href="{{ route('transfers.index', ['recipient_id_number' => $idNumber]) }}" class="btn btn-sm btn-info">
                                <i class="bi bi-search"></i> عرض المناقلات
                            </a>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</div>
@endif

<!-- Transfers Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">قائمة المناقلات</h5>
        <span>العدد الكلي: {{ $transfers->total() }}</span>
    </div>
    <div class="card-body">
        @if($transfers->count() > 0)
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>العجلة</th>
                        <th>المستلم</th>
                        <th>الجهة المستلمة</th>
                        <th>نوع المناقلة</th>
                        <th>تاريخ الاستلام</th>
                        <th>تاريخ الإعادة</th>
                        <th>الحالة</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($transfers as $transfer)
                    <tr>
                        <td>{{ $transfer->id }}</td>
                        <td>
                            <a href="{{ route('vehicles.show', $transfer->vehicle) }}">
                                {{ $transfer->vehicle->vehicle_type }} - {{ $transfer->vehicle->vehicle_number ?: 'بلا رقم' }}
                            </a>
                        </td>
                        <td>
                            {{ $transfer->recipient_name }}
                            @if($transfer->recipient_id_number)
                            <div class="small text-muted">{{ $transfer->recipient_id_number }}</div>
                            @endif
                        </td>
                        <td>
                            {{ $transfer->recipient_entity }}
                            @if($transfer->destinationDirectorate)
                            <div class="small text-muted">{{ $transfer->destinationDirectorate->name }}</div>
                            @endif
                        </td>
                        <td>
                            @if($transfer->is_ownership_transfer)
                            <span class="badge bg-dark">نقل ملكية</span>
                            @elseif($transfer->is_referral)
                            <span class="badge bg-info">إحالة خارجية</span>
                            @else
                            <span class="badge bg-primary">اعتيادية</span>
                            @endif
                        </td>
                        <td>{{ $transfer->receive_date->format('Y-m-d') }}</td>
                        <td>
                            @if($transfer->is_ownership_transfer || $transfer->is_referral)
                                <span class="text-muted">-</span>
                            @else
                                {{ $transfer->return_date ? $transfer->return_date->format('Y-m-d') : 'مستمرة' }}
                            @endif
                        </td>
                        <td>
                            @if($transfer->is_ownership_transfer)
                            <span class="badge bg-dark">نقل ملكية</span>
                            @elseif($transfer->is_referral)
                            <span class="badge bg-info">إحالة خارجية</span>
                            @elseif($transfer->return_date)
                            <span class="badge bg-success">مكتملة</span>
                            @else
                            <span class="badge bg-primary">جارية</span>
                            @endif
                        </td>
                        <td>
                            <a href="{{ route('transfers.show', $transfer) }}" class="btn btn-sm btn-primary">
                                <i class="bi bi-eye"></i> عرض
                            </a>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
        
        <div class="mt-4">
            {{ $transfers->withQueryString()->links() }}
        </div>
        @else
        <div class="text-center py-4">
            <h4>لا توجد مناقلات</h4>
            <p class="text-muted">لم يتم العثور على مناقلات مطابقة لمعايير البحث</p>
            </div>
        </div>
        @endif
    </div>
</div>
@endsection
</file>

<file path="resources/views/transfers/show.blade.php">
@extends('layouts.app')

@section('title', 'تفاصيل المناقلة #' . $transfer->id)

@section('actions')
<div class="btn-group" role="group">
    @if(!$transfer->return_date && !$transfer->is_ownership_transfer && !$transfer->is_referral && auth()->user()->hasRole(['admin', 'vehicles_dept']))
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#completeModal">
        <i class="bi bi-check-lg"></i> إكمال المناقلة
    </button>
    @endif
    
    <a href="{{ route('vehicles.show', $transfer->vehicle) }}" class="btn btn-primary">
        <i class="bi bi-truck"></i> تفاصيل العجلة
    </a>
    
    <a href="{{ route('transfers.index') }}" class="btn btn-secondary">
        <i class="bi bi-arrow-right"></i> عودة للقائمة
    </a>
</div>
@endsection

@section('content')
<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">معلومات المناقلة</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="30%">نوع المناقلة</th>
                            <td>
                                @if($transfer->is_ownership_transfer)
                                <span class="badge bg-dark">نقل ملكية</span>
                                @elseif($transfer->is_referral)
                                <span class="badge bg-info">إحالة خارجية</span>
                                @else
                                <span class="badge bg-primary">مناقلة اعتيادية</span>
                                @endif
                            </td>
                        </tr>
                        <tr>
                            <th>الحالة</th>
                            <td>
                                @if($transfer->is_ownership_transfer)
                                <span class="badge bg-dark">نقل ملكية</span>
                                @elseif($transfer->is_referral)
                                <span class="badge bg-info">إحالة خارجية</span>
                                @elseif($transfer->return_date)
                                <span class="badge bg-success">مكتملة</span>
                                @else
                                <span class="badge bg-primary">جارية</span>
                                @endif
                            </td>
                        </tr>
                        <tr>
                            <th>العجلة</th>
                            <td>
                                <a href="{{ route('vehicles.show', $transfer->vehicle) }}">
                                    {{ $transfer->vehicle->vehicle_type }} - {{ $transfer->vehicle->vehicle_number ?: 'بلا رقم' }}
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>اسم المستلم</th>
                            <td>{{ $transfer->recipient_name }}</td>
                        </tr>
                        @if(!$transfer->is_ownership_transfer)
                        <tr>
                            <th>رقم هوية المستلم</th>
                            <td>{{ $transfer->recipient_id_number }}</td>
                        </tr>
                        @if($transfer->recipient_phone)
                        <tr>
                            <th>رقم هاتف المستلم</th>
                            <td>{{ $transfer->recipient_phone }}</td>
                        </tr>
                        @endif
                        @endif
                        <tr>
                            <th>الجهة المستلمة</th>
                            <td>{{ $transfer->recipient_entity }}</td>
                        </tr>
                        @if($transfer->destinationDirectorate)
                        <tr>
                            <th>المديرية</th>
                            <td>{{ $transfer->destinationDirectorate->name }}</td>
                        </tr>
                        @endif
                        @if($transfer->assigned_to)
                        <tr>
                            <th>منسب إلى</th>
                            <td>{{ $transfer->assigned_to }}</td>
                        </tr>
                        @endif
                        <tr>
                            <th>تاريخ الاستلام</th>
                            <td>{{ $transfer->receive_date->format('Y-m-d') }}</td>
                        </tr>
                        @if(!$transfer->is_ownership_transfer && !$transfer->is_referral)
                            @if($transfer->return_date)
                            <tr>
                                <th>تاريخ الإعادة</th>
                                <td>{{ $transfer->return_date->format('Y-m-d') }}</td>
                            </tr>
                            @endif
                        @endif
                        <tr>
                            <th>ملاحظات</th>
                            <td>{!! nl2br(e($transfer->notes ?: 'لا توجد ملاحظات')) !!}</td>
                        </tr>
                        <tr>
                            <th>تاريخ التسجيل</th>
                            <td>{{ $transfer->created_at->format('Y-m-d H:i') }}</td>
                        </tr>
                        <tr>
                            <th>المستخدم</th>
                            <td>{{ $transfer->user->name }}</td>
                        </tr>
                        @if($transfer->return_date && $transfer->completer)
                        <tr>
                            <th>تمت الإعادة بواسطة</th>
                            <td>{{ $transfer->completer->name }}</td>
                        </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">المرفقات</h5>
            </div>
            <div class="card-body">
                @if($transfer->attachments->count() > 0)
                <div class="list-group">
                    @foreach($transfer->attachments as $attachment)
                    <a href="{{ route('attachments.download', $attachment) }}" class="list-group-item list-group-item-action">
                        <i class="bi bi-file-earmark"></i> {{ $attachment->file_name }}
                        @if($attachment->type == 'transfer_document')
                        <span class="badge bg-primary">مستند المناقلة</span>
                        @elseif($attachment->type == 'return_document')
                        <span class="badge bg-success">مستند الإعادة</span>
                        @elseif($attachment->type == 'ownership_transfer_document')
                        <span class="badge bg-dark">مستند نقل الملكية</span>
                        @elseif($attachment->type == 'external_referral_document')
                        <span class="badge bg-info">مستند الإحالة الخارجية</span>
                        @endif
                        <span class="badge bg-secondary float-end">
                            {{ number_format($attachment->file_size / 1024, 2) }} KB
                        </span>
                    </a>
                    @endforeach
                </div>
                @else
                <p class="text-muted">لا توجد مرفقات</p>
                @endif
            </div>
        </div>
    </div>
</div>

<!-- Complete Transfer Modal -->
@if(!$transfer->return_date && !$transfer->is_ownership_transfer && !$transfer->is_referral && auth()->user()->hasRole(['admin', 'vehicles_dept']))
<div class="modal fade" id="completeModal" tabindex="-1" aria-labelledby="completeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form action="{{ route('transfers.complete', $transfer) }}" method="POST" enctype="multipart/form-data">
                @csrf
                <div class="modal-header">
                    <h5 class="modal-title" id="completeModalLabel">إكمال المناقلة</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="return_date" class="form-label required-field">تاريخ الإعادة</label>
                        <input type="date" name="return_date" id="return_date" class="form-control" 
                               value="{{ now()->format('Y-m-d') }}" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="notes" class="form-label">ملاحظات</label>
                        <textarea name="notes" id="notes" class="form-control" rows="3"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="attachment" class="form-label required-field">مستند الإعادة</label>
                        <input type="file" name="attachment" id="attachment" class="form-control" 
                               accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" required>
                        <small class="form-text text-muted">يجب إرفاق مستند الإعادة (PDF, DOC, DOCX, JPG, PNG)</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" class="btn btn-success">تأكيد الإكمال</button>
                </div>
            </form>
        </div>
    </div>
</div>
@endif
@endsection
</file>

<file path="resources/views/users/create.blade.php">
<!-- resources/views/users/create.blade.php -->
@extends('layouts.app')

@section('title', 'إضافة مستخدم جديد')

@section('actions')
<a href="{{ route('users.index') }}" class="btn btn-primary">
    <i class="bi bi-arrow-right"></i> عودة للقائمة
</a>
@endsection

@section('content')
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">معلومات المستخدم الجديد</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('users.store') }}" method="POST">
            @csrf
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="name" class="form-label required-field">الاسم</label>
                        <input type="text" name="name" id="name" class="form-control @error('name') is-invalid @enderror" 
                               value="{{ old('name') }}" required>
                        @error('name')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="email" class="form-label required-field">البريد الإلكتروني</label>
                        <input type="email" name="email" id="email" class="form-control @error('email') is-invalid @enderror" 
                               value="{{ old('email') }}" required>
                        @error('email')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="password" class="form-label required-field">كلمة المرور</label>
                        <input type="password" name="password" id="password" class="form-control @error('password') is-invalid @enderror" required>
                        @error('password')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="password_confirmation" class="form-label required-field">تأكيد كلمة المرور</label>
                        <input type="password" name="password_confirmation" id="password_confirmation" class="form-control" required>
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="role" class="form-label required-field">الدور</label>
                        <select name="role" id="role" class="form-select @error('role') is-invalid @enderror" required>
                            <option value="">-- اختر الدور --</option>
                            @foreach($roles as $role)
                            <option value="{{ $role->name }}" {{ old('role') == $role->name ? 'selected' : '' }}>
                                @if($role->name == 'admin')
                                المشرف
                                @elseif($role->name == 'verifier')
                                المدقق
                                @elseif($role->name == 'data_entry')
                                مدخل البيانات
                                @elseif($role->name == 'vehicles_dept')
                                الآليات
                                @elseif($role->name == 'recipient')
                                المستلم
                                @else
                                {{ $role->name }}
                                @endif
                            </option>
                            @endforeach
                        </select>
                        @error('role')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="directorate_id" class="form-label required-field">المديرية</label>
                        <select name="directorate_id" id="directorate_id" class="form-select @error('directorate_id') is-invalid @enderror" required>
                            <option value="">-- اختر المديرية --</option>
                            @foreach($directorates as $directorate)
                            <option value="{{ $directorate->id }}" {{ old('directorate_id') == $directorate->id ? 'selected' : '' }}>
                                {{ $directorate->name }}
                            </option>
                            @endforeach
                        </select>
                        @error('directorate_id')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> حفظ المستخدم
                </button>
                <a href="{{ route('users.index') }}" class="btn btn-secondary">
                    <i class="bi bi-x"></i> إلغاء
                </a>
            </div>
        </form>
    </div>
</div>
@endsection
</file>

<file path="resources/views/users/edit.blade.php">
<!-- resources/views/users/edit.blade.php -->
@extends('layouts.app')

@section('title', 'تعديل المستخدم: ' . $user->name)

@section('actions')
<a href="{{ route('users.show', $user) }}" class="btn btn-primary">
    <i class="bi bi-arrow-right"></i> عودة للتفاصيل
</a>
@endsection

@section('content')
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">تعديل معلومات المستخدم</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('users.update', $user) }}" method="POST">
            @csrf
            @method('PUT')
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="name" class="form-label required-field">الاسم</label>
                        <input type="text" name="name" id="name" class="form-control @error('name') is-invalid @enderror" 
                               value="{{ old('name', $user->name) }}" required>
                        @error('name')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="email" class="form-label required-field">البريد الإلكتروني</label>
                        <input type="email" name="email" id="email" class="form-control @error('email') is-invalid @enderror" 
                               value="{{ old('email', $user->email) }}" required>
                        @error('email')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="password" class="form-label">كلمة المرور (اتركها فارغة إذا لم ترغب بتغييرها)</label>
                        <input type="password" name="password" id="password" class="form-control @error('password') is-invalid @enderror">
                        @error('password')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="password_confirmation" class="form-label">تأكيد كلمة المرور</label>
                        <input type="password" name="password_confirmation" id="password_confirmation" class="form-control">
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="role" class="form-label required-field">الدور</label>
                        <select name="role" id="role" class="form-select @error('role') is-invalid @enderror" required>
                            <option value="">-- اختر الدور --</option>
                            @foreach($roles as $role)
                            <option value="{{ $role->name }}" 
                                {{ (old('role') == $role->name || $user->hasRole($role->name)) ? 'selected' : '' }}>
                                @if($role->name == 'admin')
                                المشرف
                                @elseif($role->name == 'verifier')
                                المدقق
                                @elseif($role->name == 'data_entry')
                                مدخل البيانات
                                @elseif($role->name == 'vehicles_dept')
                                الآليات
                                @elseif($role->name == 'recipient')
                                المستلم
                                @else
                                {{ $role->name }}
                                @endif
                            </option>
                            @endforeach
                        </select>
                        @error('role')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="directorate_id" class="form-label required-field">المديرية</label>
                        <select name="directorate_id" id="directorate_id" class="form-select @error('directorate_id') is-invalid @enderror" required>
                            <option value="">-- اختر المديرية --</option>
                            @foreach($directorates as $directorate)
                            <option value="{{ $directorate->id }}" 
                                {{ (old('directorate_id') == $directorate->id || $user->directorate_id == $directorate->id) ? 'selected' : '' }}>
                                {{ $directorate->name }}
                            </option>
                            @endforeach
                        </select>
                        @error('directorate_id')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> حفظ التغييرات
                </button>
                <a href="{{ route('users.show', $user) }}" class="btn btn-secondary">
                    <i class="bi bi-x"></i> إلغاء
                </a>
            </div>
        </form>
    </div>
</div>
@endsection
</file>

<file path="resources/views/users/index.blade.php">
<!-- resources/views/users/index.blade.php -->
@extends('layouts.app')

@section('title', 'إدارة المستخدمين')

@section('actions')
<a href="{{ route('users.create') }}" class="btn btn-primary">
    <i class="bi bi-person-plus"></i> إضافة مستخدم جديد
</a>
@endsection

@section('content')
<!-- Filter Form -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">فلترة البيانات</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('users.index') }}" method="GET" class="row g-3">
            <div class="col-md-4">
                <label for="role" class="form-label">الدور</label>
                <select name="role" id="role" class="form-select">
                    <option value="">الكل</option>
                    @foreach($roles as $role)
                    <option value="{{ $role->name }}" {{ request('role') == $role->name ? 'selected' : '' }}>
                        @if($role->name == 'admin')
                        المشرف
                        @elseif($role->name == 'verifier')
                        المدقق
                        @elseif($role->name == 'data_entry')
                        مدخل البيانات
                        @elseif($role->name == 'vehicles_dept')
                        الآليات
                        @elseif($role->name == 'recipient')
                        المستلم
                        @else
                        {{ $role->name }}
                        @endif
                    </option>
                    @endforeach
                </select>
            </div>
            
            <div class="col-md-4">
                <label for="directorate_id" class="form-label">المديرية</label>
                <select name="directorate_id" id="directorate_id" class="form-select">
                    <option value="">الكل</option>
                    @foreach($directorates as $directorate)
                    <option value="{{ $directorate->id }}" {{ request('directorate_id') == $directorate->id ? 'selected' : '' }}>
                        {{ $directorate->name }}
                    </option>
                    @endforeach
                </select>
            </div>
            
            <div class="col-md-4">
                <label for="search" class="form-label">بحث</label>
                <input type="text" name="search" id="search" class="form-control" 
                       value="{{ request('search') }}" placeholder="الاسم، البريد الإلكتروني...">
            </div>
            
            <div class="col-12">
                <button type="submit" class="btn btn-primary">تطبيق الفلتر</button>
                <a href="{{ route('users.index') }}" class="btn btn-secondary">إعادة تعيين</a>
            </div>
        </form>
    </div>
</div>

<!-- Users Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">قائمة المستخدمين</h5>
        <span>العدد الكلي: {{ $users->total() }}</span>
    </div>
    <div class="card-body">
        @if($users->count() > 0)
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>الاسم</th>
                        <th>البريد الإلكتروني</th>
                        <th>الدور</th>
                        <th>المديرية</th>
                        <th>تاريخ الإنشاء</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($users as $user)
                    <tr>
                        <td>{{ $user->id }}</td>
                        <td>{{ $user->name }}</td>
                        <td>{{ $user->email }}</td>
                        <td>
                            @foreach($user->roles as $role)
                                @if($role->name == 'admin')
                                <span class="badge bg-danger">المشرف</span>
                                @elseif($role->name == 'verifier')
                                <span class="badge bg-warning">المدقق</span>
                                @elseif($role->name == 'data_entry')
                                <span class="badge bg-primary">مدخل البيانات</span>
                                @elseif($role->name == 'vehicles_dept')
                                <span class="badge bg-success">الآليات</span>
                                @elseif($role->name == 'recipient')
                                <span class="badge bg-info">المستلم</span>
                                @else
                                <span class="badge bg-secondary">{{ $role->name }}</span>
                                @endif
                            @endforeach
                        </td>
                        <td>{{ $user->directorate->name ?? 'غير محدد' }}</td>
                        <td>{{ $user->created_at->format('Y-m-d') }}</td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="{{ route('users.show', $user) }}" class="btn btn-sm btn-primary">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <a href="{{ route('users.edit', $user) }}" class="btn btn-sm btn-warning">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                @if($user->id != auth()->id())
                                <form action="{{ route('users.destroy', $user) }}" method="POST" class="d-inline">
                                    @csrf
                                    @method('DELETE')
                                    <button type="submit" class="btn btn-sm btn-danger btn-delete">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </form>
                                @endif
                            </div>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
        
        <div class="mt-4">
            {{ $users->withQueryString()->links() }}
        </div>
        @else
        <div class="text-center py-4">
            <h4>لا يوجد مستخدمين</h4>
            <p class="text-muted">لم يتم العثور على مستخدمين مطابقين لمعايير البحث</p>
            
            <a href="{{ route('users.create') }}" class="btn btn-primary mt-2">
                <i class="bi bi-person-plus"></i> إضافة مستخدم جديد
            </a>
        </div>
        @endif
    </div>
</div>
@endsection
</file>

<file path="resources/views/users/show.blade.php">
<!-- resources/views/users/show.blade.php -->
@extends('layouts.app')

@section('title', 'تفاصيل المستخدم: ' . $user->name)

@section('actions')
<div class="btn-group" role="group">
    <a href="{{ route('users.edit', $user) }}" class="btn btn-warning">
        <i class="bi bi-pencil"></i> تعديل
    </a>
    
    @if($user->id != auth()->id())
    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
        <i class="bi bi-trash"></i> حذف
    </button>
    @endif
    
    <a href="{{ route('users.index') }}" class="btn btn-primary">
        <i class="bi bi-arrow-right"></i> عودة للقائمة
    </a>
</div>
@endsection

@section('content')
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">معلومات المستخدم</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="30%">الاسم</th>
                            <td>{{ $user->name }}</td>
                        </tr>
                        <tr>
                            <th>البريد الإلكتروني</th>
                            <td>{{ $user->email }}</td>
                        </tr>
                        <tr>
                            <th>الدور</th>
                            <td>
                                @foreach($user->roles as $role)
                                    @if($role->name == 'admin')
                                    <span class="badge bg-danger">المشرف</span>
                                    @elseif($role->name == 'verifier')
                                    <span class="badge bg-warning">المدقق</span>
                                    @elseif($role->name == 'data_entry')
                                    <span class="badge bg-primary">مدخل البيانات</span>
                                    @elseif($role->name == 'vehicles_dept')
                                    <span class="badge bg-success">الآليات</span>
                                    @elseif($role->name == 'recipient')
                                    <span class="badge bg-info">المستلم</span>
                                    @else
                                    <span class="badge bg-secondary">{{ $role->name }}</span>
                                    @endif
                                @endforeach
                            </td>
                        </tr>
                        <tr>
                            <th>المديرية</th>
                            <td>{{ $user->directorate->name ?? 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ الإنشاء</th>
                            <td>{{ $user->created_at->format('Y-m-d H:i') }}</td>
                        </tr>
                        <tr>
                            <th>آخر تحديث</th>
                            <td>{{ $user->updated_at->format('Y-m-d H:i') }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">الصلاحيات</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach($user->getAllPermissions() as $permission)
                    <div class="col-md-6 mb-2">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-check-circle-fill text-success me-2"></i>
                            <span>{{ $permission->name }}</span>
                        </div>
                    </div>
                    @endforeach
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-header">
                <h5 class="mb-0">النشاطات</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <h5 class="mb-0">{{ $user->vehicles()->count() }}</h5>
                                <div class="text-muted">العجلات المضافة</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <h5 class="mb-0">{{ $user->editRequests()->count() }}</h5>
                                <div class="text-muted">طلبات التعديل</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <h5 class="mb-0">{{ $user->vehicleTransfers()->count() }}</h5>
                                <div class="text-muted">المناقلات</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card bg-light">
                            <div class="card-body text-center">
                                <h5 class="mb-0">{{ $user->approvedRequests()->count() }}</h5>
                                <div class="text-muted">الطلبات المراجعة</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete User Modal -->
@if($user->id != auth()->id())
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form action="{{ route('users.destroy', $user) }}" method="POST">
                @csrf
                @method('DELETE')
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">تأكيد الحذف</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                <p>هل أنت متأكد من حذف المستخدم <strong>{{ $user->name }}</strong>؟</p>
                   <p class="text-danger">تحذير: لا يمكن التراجع عن هذا الإجراء. سيتم حذف حساب المستخدم نهائياً.</p>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-danger">تأكيد الحذف</button>
               </div>
           </form>
       </div>
   </div>
</div>
@endif
@endsection
</file>

<file path="resources/views/vehicles/create.blade.php">
<!-- resources/views/vehicles/create.blade.php -->
@extends('layouts.app')

@section('title', 'إضافة عجلة جديدة')

@section('actions')
<a href="{{ route('vehicles.index') }}" class="btn btn-primary">
    <i class="bi bi-arrow-right"></i> عودة للقائمة
</a>
@endsection

@section('content')
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">معلومات العجلة الجديدة</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('vehicles.store') }}" method="POST" enctype="multipart/form-data">
            @csrf
            
            <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="type" class="form-label required-field">نوع السجل</label>
                    <select name="type" id="type" class="form-select @error('type') is-invalid @enderror" required>
                        <option value="">-- اختر نوع السجل --</option>
                        <option value="confiscated" {{ old('type') == 'confiscated' ? 'selected' : '' }}>مصادرة</option>
                        @if(auth()->user()->hasRole(['admin', 'verifier', 'vehicles_dept']))
                        <option value="government" {{ old('type') == 'government' ? 'selected' : '' }}>حكومية</option>
                        @endif
                    </select>
                    @error('type')
                        <div class="invalid-feedback">{{ $message }}</div>
                    @enderror
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="directorate_id" class="form-label required-field">المديرية</label>
                    <select name="directorate_id" id="directorate_id" class="form-select @error('directorate_id') is-invalid @enderror" required>
                        <option value="">-- اختر المديرية --</option>
                        @if(auth()->user()->hasRole(['admin', 'verifier']) && isset($directorates))
                            @foreach($directorates as $directorate)
                                <option value="{{ $directorate->id }}" {{ old('directorate_id') == $directorate->id ? 'selected' : '' }}>
                                    {{ $directorate->name }}
                                </option>
                            @endforeach
                        @else
                            <option value="{{ auth()->user()->directorate_id }}" selected>
                                {{ auth()->user()->directorate->name }}
                            </option>
                        @endif
                    </select>
                    @error('directorate_id')
                        <div class="invalid-feedback">{{ $message }}</div>
                    @enderror
                </div>
            </div>
        </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="vehicle_type" class="form-label required-field">نوع العجلة</label>
                        <input type="text" name="vehicle_type" id="vehicle_type" class="form-control @error('vehicle_type') is-invalid @enderror" 
                               value="{{ old('vehicle_type') }}" required>
                        @error('vehicle_type')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="vehicle_name" class="form-label">اسم العجلة</label>
                        <input type="text" name="vehicle_name" id="vehicle_name" class="form-control @error('vehicle_name') is-invalid @enderror" 
                               value="{{ old('vehicle_name') }}">
                        @error('vehicle_name')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="model" class="form-label">الموديل</label>
                        <input type="text" name="model" id="model" class="form-control @error('model') is-invalid @enderror" 
                               value="{{ old('model') }}">
                        @error('model')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="vehicle_number" class="form-label">رقم العجلة</label>
                        <input type="text" name="vehicle_number" id="vehicle_number" class="form-control @error('vehicle_number') is-invalid @enderror" 
                               value="{{ old('vehicle_number') }}">
                        @error('vehicle_number')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="province" class="form-label">المحافظة</label>
                        <input type="text" name="province" id="province" class="form-control @error('province') is-invalid @enderror" 
                               value="{{ old('province') }}">
                        @error('province')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="color" class="form-label">اللون</label>
                        <input type="text" name="color" id="color" class="form-control @error('color') is-invalid @enderror" 
                               value="{{ old('color') }}">
                        @error('color')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="chassis_number" class="form-label">رقم الشاصي</label>
                        <input type="text" name="chassis_number" id="chassis_number" class="form-control @error('chassis_number') is-invalid @enderror" 
                               value="{{ old('chassis_number') }}">
                        @error('chassis_number')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="vehicle_condition" class="form-label required-field">حالة العجلة</label>
                        <select name="vehicle_condition" id="vehicle_condition" class="form-select @error('vehicle_condition') is-invalid @enderror" required>
                            <option value="صالحة" {{ old('vehicle_condition') == 'صالحة' ? 'selected' : '' }}>صالحة</option>
                            <option value="غير صالحة" {{ old('vehicle_condition') == 'غير صالحة' ? 'selected' : '' }}>غير صالحة</option>
                        </select>
                        @error('vehicle_condition')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <!-- Confiscated Vehicle Fields -->
            <div id="confiscated-fields" style="display: none;">
                <h5 class="mt-4 mb-3">معلومات العجلة المصادرة</h5>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="defendant_name" class="form-label required-field">اسم المتهم</label>
                            <input type="text" name="defendant_name" id="defendant_name" class="form-control @error('defendant_name') is-invalid @enderror" 
                                   value="{{ old('defendant_name') }}">
                            @error('defendant_name')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="legal_article" class="form-label required-field">المادة القانونية</label>
                            <input type="text" name="legal_article" id="legal_article" class="form-control @error('legal_article') is-invalid @enderror" 
                                   value="{{ old('legal_article') }}">
                            @error('legal_article')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="seizure_status" class="form-label required-field">حالة العجلة</label>
                            <select name="seizure_status" id="seizure_status" class="form-select @error('seizure_status') is-invalid @enderror">
                                <option value="محجوزة" {{ old('seizure_status') == 'محجوزة' ? 'selected' : '' }}>محجوزة</option>
                                <option value="مفرج عنها" {{ old('seizure_status') == 'مفرج عنها' ? 'selected' : '' }}>مفرج عنها</option>
                                <option value="مصادرة" {{ old('seizure_status') == 'مصادرة' ? 'selected' : '' }}>مصادرة</option>
                            </select>
                            @error('seizure_status')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="seizure_letter_number" class="form-label">عدد كتاب الحجز</label>
                            <input type="text" name="seizure_letter_number" id="seizure_letter_number" 
                                   class="form-control @error('seizure_letter_number') is-invalid @enderror" 
                                   value="{{ old('seizure_letter_number') }}">
                            @error('seizure_letter_number')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="seizure_letter_date" class="form-label">تاريخ كتاب الحجز</label>
                            <input type="date" name="seizure_letter_date" id="seizure_letter_date" 
                                   class="form-control @error('seizure_letter_date') is-invalid @enderror" 
                                   value="{{ old('seizure_letter_date') }}">
                            @error('seizure_letter_date')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Government Vehicle Fields -->
            <div id="government-fields" style="display: none;">
                <h5 class="mt-4 mb-3">معلومات العجلة الحكومية</h5>
                
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="source" class="form-label required-field">وردت من</label>
                            <input type="text" name="source" id="source" class="form-control @error('source') is-invalid @enderror" 
                                   value="{{ old('source') }}">
                            @error('source')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="import_letter_number" class="form-label">عدد الوارد</label>
                            <input type="text" name="import_letter_number" id="import_letter_number" 
                                   class="form-control @error('import_letter_number') is-invalid @enderror" 
                                   value="{{ old('import_letter_number') }}">
                            @error('import_letter_number')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="import_letter_date" class="form-label">تاريخ الوارد</label>
                            <input type="date" name="import_letter_date" id="import_letter_date" 
                                   class="form-control @error('import_letter_date') is-invalid @enderror" 
                                   value="{{ old('import_letter_date') }}">
                            @error('import_letter_date')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Common Fields -->
            <h5 class="mt-4 mb-3">الملحقات والعوارض</h5>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">الملحقات</label>
                        <div class="border rounded p-3">
                            <div class="row">
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="طفاية" id="acc_fire">
                                        <label class="form-check-label" for="acc_fire">طفاية</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="سبير" id="acc_spare">
                                        <label class="form-check-label" for="acc_spare">سبير</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="عدة" id="acc_kit">
                                        <label class="form-check-label" for="acc_kit">عدة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="جك" id="acc_jack">
                                        <label class="form-check-label" for="acc_jack">جك</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="ويل سبانة" id="acc_wheel">
                                        <label class="form-check-label" for="acc_wheel">ويل سبانة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="ارضيات" id="acc_floors">
                                        <label class="form-check-label" for="acc_floors">ارضيات</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="جداحة" id="acc_lighter">
                                        <label class="form-check-label" for="acc_lighter">جداحة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="بصمة" id="acc_key">
                                        <label class="form-check-label" for="acc_key">بصمة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="سويج" id="acc_switch">
                                        <label class="form-check-label" for="acc_switch">سويج</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mt-2">
                                <label for="other_accessories" class="form-label">ملحقات أخرى</label>
                                <input type="text" id="other_accessories" class="form-control mb-2">
                                <button type="button" class="btn btn-sm btn-secondary" id="add_accessory">
                                    <i class="bi bi-plus"></i> إضافة
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">العوارض</label>
                        <div class="border rounded p-3">
                            <div class="row">
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="دعامية امامية" id="def_front">
                                        <label class="form-check-label" for="def_front">دعامية امامية</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="دعامية خلفية" id="def_back">
                                        <label class="form-check-label" for="def_back">دعامية خلفية</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب امامي يمين" id="def_door_fr">
                                        <label class="form-check-label" for="def_door_fr">باب امامي يمين</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب امامي يسار" id="def_door_fl">
                                        <label class="form-check-label" for="def_door_fl">باب امامي يسار</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب خلفي يمين" id="def_door_br">
                                        <label class="form-check-label" for="def_door_br">باب خلفي يمين</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب خلفي يسار" id="def_door_bl">
                                        <label class="form-check-label" for="def_door_bl">باب خلفي يسار</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="محرك" id="def_engine">
                                        <label class="form-check-label" for="def_engine">محرك</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="كير" id="def_gear">
                                        <label class="form-check-label" for="def_gear">كير</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="داينمو" id="def_dynamo">
                                        <label class="form-check-label" for="def_dynamo">داينمو</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="متهالكة" id="def_worn">
                                        <label class="form-check-label" for="def_worn">متهالكة</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mt-2">
                                <label for="other_defects" class="form-label">عوارض أخرى</label>
                                <input type="text" id="other_defects" class="form-control mb-2">
                                <button type="button" class="btn btn-sm btn-secondary" id="add_defect">
                                    <i class="bi bi-plus"></i> إضافة
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="missing_parts" class="form-label">النواقص</label>
                        <textarea name="missing_parts" id="missing_parts" class="form-control @error('missing_parts') is-invalid @enderror" 
                                  rows="3">{{ old('missing_parts') }}</textarea>
                        @error('missing_parts')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="notes" class="form-label">ملاحظات</label>
                        <textarea name="notes" id="notes" class="form-control @error('notes') is-invalid @enderror" 
                                  rows="3">{{ old('notes') }}</textarea>
                        @error('notes')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <h5 class="mt-4 mb-3">الصور والمرفقات</h5>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="images" class="form-label">صور العجلة</label>
                        <input type="file" name="images[]" id="images" class="form-control @error('images.*') is-invalid @enderror" 
                               multiple accept="image/*">
                        <small class="form-text text-muted">يمكنك اختيار أكثر من صورة</small>
                        @error('images.*')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="attachments" class="form-label">المستندات المرفقة</label>
                        <input type="file" name="attachments[]" id="attachments" class="form-control @error('attachments.*') is-invalid @enderror" 
                               multiple accept=".pdf,.doc,.docx">
                        <small class="form-text text-muted">يمكنك اختيار أكثر من مستند (PDF, DOC, DOCX)</small>
                        @error('attachments.*')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> حفظ العجلة
                </button>
                <a href="{{ route('vehicles.index') }}" class="btn btn-secondary">
                    <i class="bi bi-x"></i> إلغاء
                </a>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Show/hide fields based on vehicle type
        const typeSelect = document.getElementById('type');
        const confiscatedFields = document.getElementById('confiscated-fields');
        const governmentFields = document.getElementById('government-fields');
        
        // Handle type change
        function handleTypeChange() {
            if (typeSelect.value === 'confiscated') {
                confiscatedFields.style.display = 'block';
                governmentFields.style.display = 'none';
                
                // Make confiscated-specific fields required
                document.getElementById('defendant_name').setAttribute('required', 'required');
                document.getElementById('legal_article').setAttribute('required', 'required');
                document.getElementById('seizure_status').setAttribute('required', 'required');
                
                // Remove required from government-specific fields
                document.getElementById('source').removeAttribute('required');
            } else if (typeSelect.value === 'government') {
                confiscatedFields.style.display = 'none';
                governmentFields.style.display = 'block';
                
                // Make government-specific fields required
                document.getElementById('source').setAttribute('required', 'required');
                
                // Remove required from confiscated-specific fields
                document.getElementById('defendant_name').removeAttribute('required');
                document.getElementById('legal_article').removeAttribute('required');
                document.getElementById('seizure_status').removeAttribute('required');
            } else {
                confiscatedFields.style.display = 'none';
                governmentFields.style.display = 'none';
            }
        }
        
        typeSelect.addEventListener('change', handleTypeChange);
        
        // Initial check
        handleTypeChange();
        
        // Add custom accessory
        const addAccessoryBtn = document.getElementById('add_accessory');
        const otherAccessoriesInput = document.getElementById('other_accessories');
        
        addAccessoryBtn.addEventListener('click', function() {
            const accessoryValue = otherAccessoriesInput.value.trim();
            
            if (accessoryValue) {
                const accessoriesContainer = document.querySelector('.accessories-container');
                const row = document.createElement('div');
                row.className = 'col-md-4 mb-2';
                row.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="accessories[]" value="${accessoryValue}" id="acc_custom_${Date.now()}" checked>
                        <label class="form-check-label" for="acc_custom_${Date.now()}">${accessoryValue}</label>
                    </div>
                `;
                
                document.querySelector('.accessories-container .row').appendChild(row);
                otherAccessoriesInput.value = '';
            }
        });
        
        // Add custom defect
        const addDefectBtn = document.getElementById('add_defect');
        const otherDefectsInput = document.getElementById('other_defects');
        
        addDefectBtn.addEventListener('click', function() {
            const defectValue = otherDefectsInput.value.trim();
            
            if (defectValue) {
                const defectsContainer = document.querySelector('.defects-container');
                const row = document.createElement('div');
                row.className = 'col-md-6 mb-2';
                row.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="defects[]" value="${defectValue}" id="def_custom_${Date.now()}" checked>
                        <label class="form-check-label" for="def_custom_${Date.now()}">${defectValue}</label>
                    </div>
                       `;
                
                document.querySelector('.defects-container .row').appendChild(row);
                otherDefectsInput.value = '';
            }
        });
    });
</script>
@endpush
</file>

<file path="resources/views/vehicles/edit.blade.php">
<!-- resources/views/vehicles/edit.blade.php -->
@extends('layouts.app')

@section('title', 'تعديل العجلة #' . $vehicle->id)

@section('actions')
<a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-primary">
    <i class="bi bi-arrow-right"></i> عودة للتفاصيل
</a>
@endsection

@section('content')
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">تعديل معلومات العجلة</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('vehicles.update', $vehicle) }}" method="POST" enctype="multipart/form-data">
            @csrf
            @method('PUT')
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="type" class="form-label required-field">نوع السجل</label>
                        <select name="type" id="type" class="form-select @error('type') is-invalid @enderror" required disabled>
                            <option value="confiscated" {{ $vehicle->type == 'confiscated' ? 'selected' : '' }}>مصادرة</option>
                            <option value="government" {{ $vehicle->type == 'government' ? 'selected' : '' }}>حكومية</option>
                        </select>
                        <input type="hidden" name="type" value="{{ $vehicle->type }}">
                        @error('type')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="directorate_id" class="form-label required-field">المديرية</label>
                        <select name="directorate_id" id="directorate_id" class="form-select @error('directorate_id') is-invalid @enderror" 
                                {{ auth()->user()->hasRole(['admin', 'verifier']) ? '' : 'disabled' }} required>
                            @if(auth()->user()->hasRole(['admin', 'verifier']) && isset($directorates))
                                @foreach($directorates as $directorate)
                                    <option value="{{ $directorate->id }}" {{ $vehicle->directorate_id == $directorate->id ? 'selected' : '' }}>
                                        {{ $directorate->name }}
                                    </option>
                                @endforeach
                            @else
                                <option value="{{ $vehicle->directorate_id }}" selected>
                                    {{ $vehicle->directorate->name }}
                                </option>
                                <input type="hidden" name="directorate_id" value="{{ $vehicle->directorate_id }}">
                            @endif
                        </select>
                        @error('directorate_id')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="vehicle_type" class="form-label required-field">نوع العجلة</label>
                        <input type="text" name="vehicle_type" id="vehicle_type" class="form-control @error('vehicle_type') is-invalid @enderror" 
                               value="{{ old('vehicle_type', $vehicle->vehicle_type) }}" required>
                        @error('vehicle_type')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="vehicle_name" class="form-label">اسم العجلة</label>
                        <input type="text" name="vehicle_name" id="vehicle_name" class="form-control @error('vehicle_name') is-invalid @enderror" 
                               value="{{ old('vehicle_name', $vehicle->vehicle_name) }}">
                        @error('vehicle_name')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="model" class="form-label">الموديل</label>
                        <input type="text" name="model" id="model" class="form-control @error('model') is-invalid @enderror" 
                               value="{{ old('model', $vehicle->model) }}">
                        @error('model')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="vehicle_number" class="form-label">رقم العجلة</label>
                        <input type="text" name="vehicle_number" id="vehicle_number" class="form-control @error('vehicle_number') is-invalid @enderror" 
                               value="{{ old('vehicle_number', $vehicle->vehicle_number) }}">
                        @error('vehicle_number')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="province" class="form-label">المحافظة</label>
                        <input type="text" name="province" id="province" class="form-control @error('province') is-invalid @enderror" 
                               value="{{ old('province', $vehicle->province) }}">
                        @error('province')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="color" class="form-label">اللون</label>
                        <input type="text" name="color" id="color" class="form-control @error('color') is-invalid @enderror" 
                               value="{{ old('color', $vehicle->color) }}">
                        @error('color')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="chassis_number" class="form-label">رقم الشاصي</label>
                        <input type="text" name="chassis_number" id="chassis_number" class="form-control @error('chassis_number') is-invalid @enderror" 
                               value="{{ old('chassis_number', $vehicle->chassis_number) }}">
                        @error('chassis_number')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="vehicle_condition" class="form-label required-field">حالة العجلة</label>
                        <select name="vehicle_condition" id="vehicle_condition" class="form-select @error('vehicle_condition') is-invalid @enderror" required>
                            <option value="صالحة" {{ $vehicle->vehicle_condition == 'صالحة' ? 'selected' : '' }}>صالحة</option>
                            <option value="غير صالحة" {{ $vehicle->vehicle_condition == 'غير صالحة' ? 'selected' : '' }}>غير صالحة</option>
                        </select>
                        @error('vehicle_condition')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <!-- Confiscated Vehicle Fields -->
            @if($vehicle->type == 'confiscated')
            <h5 class="mt-4 mb-3">معلومات العجلة المصادرة</h5>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="defendant_name" class="form-label required-field">اسم المتهم</label>
                        <input type="text" name="defendant_name" id="defendant_name" class="form-control @error('defendant_name') is-invalid @enderror" 
                               value="{{ old('defendant_name', $vehicle->defendant_name) }}" required>
                        @error('defendant_name')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="legal_article" class="form-label required-field">المادة القانونية</label>
                        <input type="text" name="legal_article" id="legal_article" class="form-control @error('legal_article') is-invalid @enderror" 
                               value="{{ old('legal_article', $vehicle->legal_article) }}" required>
                        @error('legal_article')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            @endif
            
            <!-- Government Vehicle Fields -->
            @if($vehicle->type == 'government')
            <h5 class="mt-4 mb-3">معلومات العجلة الحكومية</h5>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="source" class="form-label required-field">وردت من</label>
                        <input type="text" name="source" id="source" class="form-control @error('source') is-invalid @enderror" 
                               value="{{ old('source', $vehicle->source) }}" required>
                        @error('source')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            @endif
            
            <!-- Common Fields -->
            <h5 class="mt-4 mb-3">الملحقات والعوارض</h5>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">الملحقات</label>
                        <div class="border rounded p-3">
                            <div class="row accessories-container">
                                @php
                                    $accessories = $vehicle->accessories ?? [];
                                @endphp
                                
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="طفاية" id="acc_fire"
                                            {{ in_array('طفاية', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_fire">طفاية</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="سبير" id="acc_spare"
                                            {{ in_array('سبير', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_spare">سبير</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="عدة" id="acc_kit"
                                            {{ in_array('عدة', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_kit">عدة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="جك" id="acc_jack"
                                            {{ in_array('جك', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_jack">جك</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="ويل سبانة" id="acc_wheel"
                                            {{ in_array('ويل سبانة', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_wheel">ويل سبانة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="ارضيات" id="acc_floors"
                                            {{ in_array('ارضيات', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_floors">ارضيات</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="جداحة" id="acc_lighter"
                                            {{ in_array('جداحة', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_lighter">جداحة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="بصمة" id="acc_key"
                                            {{ in_array('بصمة', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_key">بصمة</label>
                                    </div>
                                </div>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="accessories[]" value="سويج" id="acc_switch"
                                            {{ in_array('سويج', $accessories) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="acc_switch">سويج</label>
                                    </div>
                                </div>
                                
                                @foreach($accessories as $accessory)
                                    @if(!in_array($accessory, ['طفاية', 'سبير', 'عدة', 'جك', 'ويل سبانة', 'ارضيات', 'جداحة', 'بصمة', 'سويج']))
                                    <div class="col-md-4 mb-2">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="accessories[]" value="{{ $accessory }}" 
                                                   id="acc_custom_{{ $loop->index }}" checked>
                                            <label class="form-check-label" for="acc_custom_{{ $loop->index }}">{{ $accessory }}</label>
                                        </div>
                                    </div>
                                    @endif
                                @endforeach
                            </div>
                            
                            <div class="mt-2">
                                <label for="other_accessories" class="form-label">ملحقات أخرى</label>
                                <input type="text" id="other_accessories" class="form-control mb-2">
                                <button type="button" class="btn btn-sm btn-secondary" id="add_accessory">
                                    <i class="bi bi-plus"></i> إضافة
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">العوارض</label>
                        <div class="border rounded p-3">
                            <div class="row defects-container">
                                @php
                                    $defects = $vehicle->defects ?? [];
                                @endphp
                                
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="دعامية امامية" id="def_front"
                                            {{ in_array('دعامية امامية', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_front">دعامية امامية</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="دعامية خلفية" id="def_back"
                                            {{ in_array('دعامية خلفية', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_back">دعامية خلفية</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب امامي يمين" id="def_door_fr"
                                            {{ in_array('باب امامي يمين', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_door_fr">باب امامي يمين</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب امامي يسار" id="def_door_fl"
                                            {{ in_array('باب امامي يسار', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_door_fl">باب امامي يسار</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب خلفي يمين" id="def_door_br"
                                            {{ in_array('باب خلفي يمين', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_door_br">باب خلفي يمين</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="باب خلفي يسار" id="def_door_bl"
                                            {{ in_array('باب خلفي يسار', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_door_bl">باب خلفي يسار</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="محرك" id="def_engine"
                                            {{ in_array('محرك', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_engine">محرك</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="كير" id="def_gear"
                                            {{ in_array('كير', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_gear">كير</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="داينمو" id="def_dynamo"
                                            {{ in_array('داينمو', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_dynamo">داينمو</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="defects[]" value="متهالكة" id="def_worn"
                                            {{ in_array('متهالكة', $defects) ? 'checked' : '' }}>
                                        <label class="form-check-label" for="def_worn">متهالكة</label>
                                    </div>
                                </div>
                                
                                @foreach($defects as $defect)
                                    @if(!in_array($defect, ['دعامية امامية', 'دعامية خلفية', 'باب امامي يمين', 'باب امامي يسار', 'باب خلفي يمين', 'باب خلفي يسار', 'محرك', 'كير', 'داينمو', 'متهالكة']))
                                    <div class="col-md-6 mb-2">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="defects[]" value="{{ $defect }}" 
                                                   id="def_custom_{{ $loop->index }}" checked>
                                            <label class="form-check-label" for="def_custom_{{ $loop->index }}">{{ $defect }}</label>
                                        </div>
                                    </div>
                                    @endif
                                @endforeach
                            </div>
                            
                            <div class="mt-2">
                                <label for="other_defects" class="form-label">عوارض أخرى</label>
                                <input type="text" id="other_defects" class="form-control mb-2">
                                <button type="button" class="btn btn-sm btn-secondary" id="add_defect">
                                    <i class="bi bi-plus"></i> إضافة
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="missing_parts" class="form-label">النواقص</label>
                        <textarea name="missing_parts" id="missing_parts" class="form-control @error('missing_parts') is-invalid @enderror" 
                                  rows="3">{{ old('missing_parts', $vehicle->missing_parts) }}</textarea>
                        @error('missing_parts')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="notes" class="form-label">ملاحظات</label>
                        <textarea name="notes" id="notes" class="form-control @error('notes') is-invalid @enderror" 
                                  rows="3">{{ old('notes', $vehicle->notes) }}</textarea>
                        @error('notes')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <h5 class="mt-4 mb-3">إضافة صور ومرفقات جديدة</h5>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="images" class="form-label">صور العجلة</label>
                        <input type="file" name="images[]" id="images" class="form-control @error('images.*') is-invalid @enderror" 
                               multiple accept="image/*">
                        <small class="form-text text-muted">يمكنك اختيار أكثر من صورة</small>
                        @error('images.*')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="attachments" class="form-label">المستندات المرفقة</label>
                        <input type="file" name="attachments[]" id="attachments" class="form-control @error('attachments.*') is-invalid @enderror" 
                               multiple accept=".pdf,.doc,.docx">
                        <small class="form-text text-muted">يمكنك اختيار أكثر من مستند (PDF, DOC, DOCX)</small>
                        @error('attachments.*')
                            <div class="invalid-feedback">{{ $message }}</div>
                        @enderror
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> حفظ التغييرات
                </button>
                <a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-secondary">
                    <i class="bi bi-x"></i> إلغاء
                </a>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add custom accessory
        const addAccessoryBtn = document.getElementById('add_accessory');
        const otherAccessoriesInput = document.getElementById('other_accessories');
        
        addAccessoryBtn.addEventListener('click', function() {
            const accessoryValue = otherAccessoriesInput.value.trim();
            
            if (accessoryValue) {
                const row = document.createElement('div');
                row.className = 'col-md-4 mb-2';
                row.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="accessories[]" value="${accessoryValue}" id="acc_custom_${Date.now()}" checked>
                        <label class="form-check-label" for="acc_custom_${Date.now()}">${accessoryValue}</label>
                    </div>
                `;
                
                document.querySelector('.accessories-container').appendChild(row);
                otherAccessoriesInput.value = '';
            }
        });
        
        // Add custom defect
        const addDefectBtn = document.getElementById('add_defect');
        const otherDefectsInput = document.getElementById('other_defects');
        
        addDefectBtn.addEventListener('click', function() {
            const defectValue = otherDefectsInput.value.trim();
            
            if (defectValue) {
                const row = document.createElement('div');
                row.className = 'col-md-6 mb-2';
                row.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="defects[]" value="${defectValue}" id="def_custom_${Date.now()}" checked>
                        <label class="form-check-label" for="def_custom_${Date.now()}">${defectValue}</label>
                    </div>
                `;
                
                document.querySelector('.defects-container').appendChild(row);
                otherDefectsInput.value = '';
            }
        });
    });
</script>
@endpush
</file>

<file path="resources/views/vehicles/index.blade.php">
<!-- resources/views/vehicles/index.blade.php -->
@extends('layouts.app')

@section('title', 'العجلات')

@section('actions')
@if(auth()->user()->can('create vehicles') || auth()->user()->hasRole('vehicles_dept'))
<a href="{{ route('vehicles.create') }}" class="btn btn-primary">
    <i class="bi bi-plus-lg"></i> إضافة عجلة جديدة
</a>
@endif
@endsection

@section('content')
<!-- Filter Form -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">فلترة البيانات</h5>
    </div>
    <div class="card-body">
        <form action="{{ route('vehicles.index') }}" method="GET" class="row g-3">
            <div class="col-md-3">
                <label for="type" class="form-label">نوع العجلة</label>
                <select name="type" id="type" class="form-select">
                    <option value="">الكل</option>
                    <option value="confiscated" {{ request('type') == 'confiscated' ? 'selected' : '' }}>مصادرة</option>
                    <option value="government" {{ request('type') == 'government' ? 'selected' : '' }}>حكومية</option>
                </select>
            </div>
            
            <div class="col-md-3">
                <label for="status" class="form-label">الحالة</label>
                <select name="status" id="status" class="form-select">
                    <option value="">الكل</option>
                    <option value="محجوزة" {{ request('status') == 'محجوزة' ? 'selected' : '' }}>محجوزة</option>
                    <option value="مصادرة" {{ request('status') == 'مصادرة' ? 'selected' : '' }}>مصادرة</option>
                    <option value="مفرج عنها" {{ request('status') == 'مفرج عنها' ? 'selected' : '' }}>مفرج عنها</option>
                    <option value="مكتسبة" {{ request('status') == 'مكتسبة' ? 'selected' : '' }}>مكتسبة</option>
                    <option value="مصادق عليها" {{ request('status') == 'مصادق عليها' ? 'selected' : '' }}>مصادق عليها</option>
                    <option value="مثمنة" {{ request('status') == 'مثمنة' ? 'selected' : '' }}>مثمنة</option>
                </select>
            </div>
            
            @if(auth()->user()->hasRole(['admin', 'verifier']) && count($directorates) > 0)
            <div class="col-md-3">
                <label for="directorate_id" class="form-label">المديرية</label>
                <select name="directorate_id" id="directorate_id" class="form-select">
                    <option value="">الكل</option>
                    @foreach($directorates as $directorate)
                    <option value="{{ $directorate->id }}" {{ request('directorate_id') == $directorate->id ? 'selected' : '' }}>
                        {{ $directorate->name }}
                    </option>
                    @endforeach
                </select>
            </div>
            @endif
            
            <div class="col-md-3">
                <label for="search" class="form-label">بحث</label>
                <input type="text" name="search" id="search" class="form-control" 
                       value="{{ request('search') }}" placeholder="رقم، نوع، اسم متهم...">
            </div>
            
            <div class="col-12">
                <button type="submit" class="btn btn-primary">تطبيق الفلتر</button>
                <a href="{{ route('vehicles.index') }}" class="btn btn-secondary">إعادة تعيين</a>
            </div>
        </form>
    </div>
</div>

<!-- Vehicles Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">قائمة العجلات</h5>
        <span>العدد الكلي: {{ $vehicles->total() }}</span>
    </div>
    <div class="card-body">
        @if($vehicles->count() > 0)
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>النوع</th>
                        <th>الاسم/الموديل</th>
                        <th>الرقم</th>
                        <th>المديرية</th>
                        <th>الحالة</th>
                        <th>المضيف</th>
                        <th>التاريخ</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                   @foreach($vehicles as $vehicle)
                   <tr>
                       <td>{{ $vehicle->id }}</td>
                       <td>
                           @if($vehicle->type == 'confiscated')
                           <span class="badge bg-danger">مصادرة</span>
                           @else
                           <span class="badge bg-success">حكومية</span>
                           @endif
                           {{ $vehicle->vehicle_type }}
                       </td>
                       <td>{{ $vehicle->vehicle_name }} {{ $vehicle->model }}</td>
                       <td>{{ $vehicle->vehicle_number }}</td>
                       <td>{{ $vehicle->directorate->name }}</td>
                       <td>
                           @if($vehicle->type == 'confiscated')
                               @if($vehicle->valuation_status == 'مثمنة')
                               <span class="badge bg-dark">مثمنة</span>
                               @elseif($vehicle->authentication_status == 'تمت المصادقة عليها')
                               <span class="badge bg-info">مصادق عليها</span>
                               @elseif($vehicle->final_degree_status == 'مكتسبة')
                               <span class="badge bg-primary">مكتسبة</span>
                               @elseif($vehicle->seizure_status == 'مصادرة')
                               <span class="badge bg-danger">مصادرة</span>
                               @elseif($vehicle->seizure_status == 'مفرج عنها')
                               <span class="badge bg-success">مفرج عنها</span>
                               @else
                               <span class="badge bg-warning">محجوزة</span>
                               @endif
                           @else
                               <span class="badge bg-secondary">{{ $vehicle->vehicle_condition }}</span>
                           @endif
                       </td>
                       <td>{{ $vehicle->user->name }}</td>
                       <td>{{ $vehicle->created_at->format('Y-m-d') }}</td>
                       <td>
                           <div class="btn-group" role="group">
                               <a href="{{ route('vehicles.show', $vehicle) }}" class="btn btn-sm btn-primary">
                                   <i class="bi bi-eye"></i>
                               </a>
                               
                               @can('update', $vehicle)
                               <a href="{{ route('vehicles.edit', $vehicle) }}" class="btn btn-sm btn-warning">
                                   <i class="bi bi-pencil"></i>
                               </a>
                               @endcan
                               
                               @can('delete', $vehicle)
                               <form action="{{ route('vehicles.destroy', $vehicle) }}" method="POST" class="d-inline">
                                   @csrf
                                   @method('DELETE')
                                   <button type="submit" class="btn btn-sm btn-danger btn-delete">
                                       <i class="bi bi-trash"></i>
                                   </button>
                               </form>
                               @endcan
                           </div>
                       </td>
                   </tr>
                   @endforeach
               </tbody>
           </table>
       </div>
       
       <div class="mt-4">
           {{ $vehicles->withQueryString()->links() }}
       </div>
       @else
       <div class="text-center py-4">
           <h4>لا توجد عجلات متاحة</h4>
           <p class="text-muted">قم بإضافة عجلة جديدة أو تعديل معايير البحث</p>
           
           @if(auth()->user()->can('create vehicles') || auth()->user()->hasRole('vehicles_dept'))
            <a href="{{ route('vehicles.create') }}" class="btn btn-primary">
                <i class="bi bi-plus-lg"></i> إضافة عجلة جديدة
            </a>
            @endif
       </div>
       @endif
   </div>
</div>
@endsection
</file>

<file path="resources/views/vehicles/show.blade.php">
@extends('layouts.app')

@section('title', 'تفاصيل العجلة #' . $vehicle->id)

@section('actions')
<div class="btn-group" role="group">
    @can('update', $vehicle)
    <a href="{{ route('vehicles.edit', $vehicle) }}" class="btn btn-warning">
        <i class="bi bi-pencil"></i> تعديل
    </a>
    @endcan
    
    @can('create edit requests')
    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#editRequestModal">
        <i class="bi bi-file-earmark-text"></i> طلب تعديل
    </button>
    @endcan
    
    @if(!$vehicle->is_externally_referred)
        @if($vehicle->type == 'confiscated' && 
            ($vehicle->final_degree_status == 'مكتسبة' || $vehicle->authentication_status == 'تمت المصادقة عليها') ||
            $vehicle->type == 'government')
            @can('create transfers')
            <a href="{{ route('transfers.create', $vehicle) }}" class="btn btn-info">
                <i class="bi bi-arrow-left-right"></i> مناقلة جديدة
            </a>
            @endcan
        @endif
        
        @if(auth()->user()->hasRole(['admin', 'verifier']))
        <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#transferOwnershipModal">
            <i class="bi bi-shuffle"></i> نقل ملكية
        </button>
        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#externalReferralModal">
            <i class="bi bi-box-arrow-up-right"></i> إحالة خارجية
        </button>
        @endif
    @else
        <button type="button" class="btn btn-danger" disabled>
            <i class="bi bi-exclamation-triangle"></i> محالة إلى {{ $vehicle->external_entity }}
        </button>
    @endif
    
    <a href="{{ route('vehicles.index') }}" class="btn btn-primary">
        <i class="bi bi-arrow-right"></i> عودة للقائمة
    </a>
</div>
@endsection

@section('content')
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">معلومات أساسية</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">نوع السجل</th>
                            <td>
                                @if($vehicle->type == 'confiscated')
                                <span class="badge bg-danger">مصادرة</span>
                                @else
                                <span class="badge bg-success">حكومية</span>
                                @endif
                            </td>
                        </tr>
                        <tr>
                            <th>نوع العجلة</th>
                            <td>{{ $vehicle->vehicle_type }}</td>
                        </tr>
                        <tr>
                            <th>اسم العجلة</th>
                            <td>{{ $vehicle->vehicle_name ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>الموديل</th>
                            <td>{{ $vehicle->model ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>رقم العجلة</th>
                            <td>{{ $vehicle->vehicle_number ?: 'بلا' }}</td>
                        </tr>
                        <tr>
                            <th>المحافظة</th>
                            <td>{{ $vehicle->province ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>اللون</th>
                            <td>{{ $vehicle->color ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>رقم الشاصي</th>
                            <td>{{ $vehicle->chassis_number ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>حالة العجلة</th>
                            <td>{{ $vehicle->vehicle_condition }}</td>
                        </tr>
                        <tr>
                            <th>المديرية</th>
                            <td>{{ $vehicle->directorate->name }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ الإضافة</th>
                            <td>{{ $vehicle->created_at->format('Y-m-d H:i') }}</td>
                        </tr>
                        <tr>
                            <th>المضيف</th>
                            <td>{{ $vehicle->user->name }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">الملحقات والعوارض</h5>
            </div>
            <div class="card-body">
                <h6>الملحقات:</h6>
                @if(!empty($vehicle->accessories))
                <ul>
                    @foreach($vehicle->accessories as $accessory)
                    <li>{{ $accessory }}</li>
                    @endforeach
                </ul>
                @else
                <p class="text-muted">لا توجد ملحقات مسجلة</p>
                @endif
                
                <h6 class="mt-3">العوارض:</h6>
                @if(!empty($vehicle->defects))
                <ul>
                    @foreach($vehicle->defects as $defect)
                    <li>{{ $defect }}</li>
                    @endforeach
                </ul>
                @else
                <p class="text-muted">لا توجد عوارض مسجلة</p>
                @endif
                
                <h6 class="mt-3">النواقص:</h6>
                @if($vehicle->missing_parts)
                <p>{{ $vehicle->missing_parts }}</p>
                @else
                <p class="text-muted">لا توجد نواقص مسجلة</p>
                @endif
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">الصور والمرفقات</h5>
            </div>
            <div class="card-body">
                <h6>صور العجلة:</h6>
                <div class="row">
                    @forelse($vehicle->attachments->where('type', 'vehicle_image') as $attachment)
                    <div class="col-md-4 mb-3">
                        <a href="{{ route('attachments.show', $attachment) }}" target="_blank">
                            <img src="{{ route('attachments.show', $attachment) }}" 
                                class="img-thumbnail" alt="صورة العجلة">
                        </a>
                    </div>
                    @empty
                    <p class="text-muted">لا توجد صور مرفقة</p>
                    @endforelse
                </div>
                
                <h6 class="mt-3">المستندات المرفقة:</h6>
                <div class="list-group">
                    @forelse($vehicle->attachments->where('type', 'vehicle_document') as $attachment)
                    <a href="{{ route('attachments.download', $attachment) }}" class="list-group-item list-group-item-action">
                        <i class="bi bi-file-earmark"></i> {{ $attachment->file_name }}
                        <span class="badge bg-secondary float-end">
                            {{ number_format($attachment->file_size / 1024, 2) }} KB
                        </span>
                    </a>
                    @empty
                    <p class="text-muted">لا توجد مستندات مرفقة</p>
                    @endforelse
                </div>
            </div>
        </div>
        
    </div>
</div>

@if($vehicle->type == 'confiscated')
<!-- Confiscated Vehicle Specific Information -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">معلومات المصادرة</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">اسم المتهم</th>
                            <td>{{ $vehicle->defendant_name }}</td>
                        </tr>
                        <tr>
                            <th>المادة القانونية</th>
                            <td>{{ $vehicle->legal_article }}</td>
                        </tr>
                        <tr>
                            <th>حالة العجلة</th>
                            <td>
                                @if($vehicle->seizure_status == 'محجوزة')
                                <span class="badge bg-warning">محجوزة</span>
                                @elseif($vehicle->seizure_status == 'مفرج عنها')
                                <span class="badge bg-success">مفرج عنها</span>
                                @elseif($vehicle->seizure_status == 'مصادرة')
                                <span class="badge bg-danger">مصادرة</span>
                                @else
                                <span class="badge bg-secondary">غير محدد</span>
                                @endif
                            </td>
                        </tr>
                        
                        @if($vehicle->seizure_status == 'محجوزة')
                        <tr>
                            <th>عدد كتاب الحجز</th>
                            <td>{{ $vehicle->seizure_letter_number ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ كتاب الحجز</th>
                            <td>{{ $vehicle->seizure_letter_date ? $vehicle->seizure_letter_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                        @elseif($vehicle->seizure_status == 'مفرج عنها')
                        <tr>
                            <th>عدد قرار الافراج</th>
                            <td>{{ $vehicle->release_decision_number ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ قرار الافراج</th>
                            <td>{{ $vehicle->release_decision_date ? $vehicle->release_decision_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                        @elseif($vehicle->seizure_status == 'مصادرة')
                        <tr>
                            <th>عدد كتاب المصادرة</th>
                            <td>{{ $vehicle->confiscation_letter_number ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ كتاب المصادرة</th>
                            <td>{{ $vehicle->confiscation_letter_date ? $vehicle->confiscation_letter_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                        @endif
                    </tbody>
                </table>
                
                @can('update vehicle status')
                <button type="button" class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#seizureStatusModal">
                    <i class="bi bi-pencil-square"></i> تحديث حالة المصادرة
                </button>
                @endcan
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">اكتساب الدرجة القطعية</h5>
                <span class="badge {{ $vehicle->final_degree_status == 'مكتسبة' ? 'bg-success' : 'bg-secondary' }}">
                    {{ $vehicle->final_degree_status }}
                </span>
            </div>
            <div class="card-body">
                @if($vehicle->final_degree_status == 'مكتسبة')
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">عدد القرار</th>
                            <td>{{ $vehicle->decision_number }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ القرار</th>
                            <td>{{ $vehicle->decision_date ? $vehicle->decision_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                    </tbody>
                </table>
                @else
                <p class="text-muted">العجلة لم تكتسب الدرجة القطعية بعد</p>
                @endif
                
                @if($vehicle->seizure_status == 'مصادرة')
                @can('update vehicle status')
                <button type="button" class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#finalDegreeStatusModal">
                    <i class="bi bi-pencil-square"></i> تحديث حالة اكتساب الدرجة القطعية
                </button>
                @endcan
                @endif
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">التثمين</h5>
                <span class="badge {{ $vehicle->valuation_status == 'مثمنة' ? 'bg-success' : 'bg-secondary' }}">
                    {{ $vehicle->valuation_status }}
                </span>
            </div>
            <div class="card-body">
                @if($vehicle->valuation_status == 'مثمنة')
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">مبلغ التثمين</th>
                            <td>@money($vehicle->valuation_amount)</td>
                        </tr>
                    </tbody>
                </table>
                @else
                <p class="text-muted">لم يتم تثمين العجلة بعد</p>
                @endif
                
                @if($vehicle->final_degree_status == 'مكتسبة')
                @can('update vehicle status')
                <button type="button" class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#valuationStatusModal">
                    <i class="bi bi-pencil-square"></i> تحديث حالة التثمين
                </button>
                @endcan
                @endif
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">المصادقة</h5>
                <span class="badge {{ $vehicle->authentication_status == 'تمت المصادقة عليها' ? 'bg-success' : 'bg-secondary' }}">
                    {{ $vehicle->authentication_status }}
                </span>
            </div>
            <div class="card-body">
                @if($vehicle->authentication_status == 'تمت المصادقة عليها')
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">عدد المصادقة</th>
                            <td>{{ $vehicle->authentication_number }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ المصادقة</th>
                            <td>{{ $vehicle->authentication_date ? $vehicle->authentication_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                    </tbody>
                </table>
                @else
                <p class="text-muted">لم تتم المصادقة على العجلة بعد</p>
                @endif
                
                @if($vehicle->valuation_status == 'مثمنة')
                @can('update vehicle status')
                <button type="button" class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#authenticationStatusModal">
                    <i class="bi bi-pencil-square"></i> تحديث حالة المصادقة
                </button>
                @endcan
                @endif
            </div>
        </div>
        
        <!-- إضافة قسم الإهداء -->
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">الإهداء</h5>
                <span class="badge {{ $vehicle->donation_status == 'مهداة' ? 'bg-success' : 'bg-secondary' }}">
                    {{ $vehicle->donation_status }}
                </span>
            </div>
            <div class="card-body">
                @if($vehicle->donation_status == 'مهداة')
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">رقم كتاب الإهداء</th>
                            <td>{{ $vehicle->donation_letter_number }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ كتاب الإهداء</th>
                            <td>{{ $vehicle->donation_letter_date ? $vehicle->donation_letter_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>الجهة المهداة لها</th>
                            <td>{{ $vehicle->donation_entity }}</td>
                        </tr>
                    </tbody>
                </table>
                @else
                <p class="text-muted">لم يتم إهداء العجلة بعد</p>
                @endif
                
                @if($vehicle->authentication_status == 'تمت المصادقة عليها')
                @can('update vehicle status')
                <button type="button" class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#donationStatusModal">
                    <i class="bi bi-pencil-square"></i> تحديث حالة الإهداء
                </button>
                @endcan
                @endif
            </div>
        </div>
        
        <!-- إضافة قسم الترقيم الحكومي -->
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">الترقيم الحكومي</h5>
                <span class="badge {{ $vehicle->government_registration_status == 'مرقمة' ? 'bg-success' : 'bg-secondary' }}">
                    {{ $vehicle->government_registration_status }}
                </span>
            </div>
            <div class="card-body">
                @if($vehicle->government_registration_status == 'مرقمة')
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">رقم كتاب الترقيم</th>
                            <td>{{ $vehicle->registration_letter_number }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ كتاب الترقيم</th>
                            <td>{{ $vehicle->registration_letter_date ? $vehicle->registration_letter_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>رقم اللوحة الحكومية</th>
                            <td>{{ $vehicle->government_registration_number }}</td>
                        </tr>
                    </tbody>
                </table>
                @else
                <p class="text-muted">لم يتم ترقيم العجلة بعد</p>
                @endif
                
                @if($vehicle->donation_status == 'مهداة')
                    @can('update vehicle status')
                        @if(auth()->user()->hasRole(['admin', 'verifier', 'vehicles_dept']))
                        <button type="button" class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#registrationStatusModal">
                            <i class="bi bi-pencil-square"></i> تحديث حالة الترقيم الحكومي
                        </button>
                        @endif
                    @endcan
                @endif
            </div>
        </div>
    </div>
</div>
@elseif($vehicle->type == 'government')
<!-- Government Vehicle Specific Information -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">معلومات العجلة الحكومية</h5>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th width="40%">وردت من</th>
                            <td>{{ $vehicle->source ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>عدد الوارد</th>
                            <td>{{ $vehicle->import_letter_number ?: 'غير محدد' }}</td>
                        </tr>
                        <tr>
                            <th>تاريخ الوارد</th>
                            <td>{{ $vehicle->import_letter_date ? $vehicle->import_letter_date->format('Y-m-d') : 'غير محدد' }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@endif

<!-- Vehicle Transfers Section -->
@if($vehicle->transfers->count() > 0)
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">سجل المناقلات</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>المستلم</th>
                        <th>الجهة المستلمة</th>
                        <th>تاريخ الاستلام</th>
                        <th>تاريخ الإعادة</th>
                        <th>الحالة</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($vehicle->transfers as $transfer)
                    <tr>
                        <td>{{ $transfer->id }}</td>
                        <td>
                            {{ $transfer->recipient_name }}
                            @if($transfer->recipient_id_number)
                            <br><small>{{ $transfer->recipient_id_number }}</small>
                            @endif
                        </td>
                        <td>{{ $transfer->recipient_entity }}</td>
                        <td>{{ $transfer->receive_date->format('Y-m-d') }}</td>
                        <td>{{ $transfer->return_date ? $transfer->return_date->format('Y-m-d') : 'مستمرة' }}</td>
                        <td>
                            @if($transfer->is_ownership_transfer)
                            <span class="badge bg-dark">نقل ملكية</span>
                            @elseif($transfer->is_referral)
                            <span class="badge bg-info">إحالة خارجية</span>
                            @elseif($transfer->return_date)
                            <span class="badge bg-success">مكتملة</span>
                            @else
                            <span class="badge bg-primary">جارية</span>
                            @endif
                        </td>
                        <td>
                            <a href="{{ route('transfers.show', $transfer) }}" class="btn btn-sm btn-primary">
                                <i class="bi bi-eye"></i> عرض
                            </a>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</div>
@endif

<!-- Status History Section -->
@if($vehicle->statuses->count() > 0)
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">سجل تغييرات الحالة</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>التاريخ</th>
                        <th>نوع التغيير</th>
                        <th>من</th>
                        <th>إلى</th>
                        <th>المستخدم</th>
                        <th>الملاحظات</th>
                        <th>المرفقات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($vehicle->statuses->sortByDesc('created_at') as $status)
                    <tr>
                        <td>{{ $status->created_at->format('Y-m-d H:i') }}</td>
                        <td>
                            @if($status->status_type == 'seizure_status')
                            <span class="badge bg-warning">حالة المصادرة</span>
                            @elseif($status->status_type == 'final_degree_status')
                            <span class="badge bg-primary">الدرجة القطعية</span>
                            @elseif($status->status_type == 'valuation_status')
                            <span class="badge bg-dark">التثمين</span>
                            @elseif($status->status_type == 'authentication_status')
                            <span class="badge bg-info">المصادقة</span>
                            @elseif($status->status_type == 'donation_status')
                            <span class="badge bg-success">الإهداء</span>
                            @elseif($status->status_type == 'government_registration_status')
                            <span class="badge bg-secondary">الترقيم الحكومي</span>
                            @endif
                        </td>
                        <td>{{ $status->old_status ?: 'غير محدد' }}</td>
                        <td>{{ $status->new_status }}</td>
                        <td>{{ $status->user->name }}</td>
                        <td>{{ $status->notes ?: 'لا توجد ملاحظات' }}</td>
                        <td>
                            @php
                                $statusAttachments = $status->attachments;
                            @endphp
                            @if($statusAttachments->count() > 0)
                                @foreach($statusAttachments as $attachment)
                                <a href="{{ route('attachments.download', $attachment) }}" class="btn btn-sm btn-outline-primary mb-1" title="{{ $attachment->file_name }}">
                                    <i class="bi bi-file-earmark"></i>
                                    @if($attachment->type == 'seizure_letter')
                                        كتاب الحجز
                                    @elseif($attachment->type == 'release_decision')
                                        قرار الإفراج
                                    @elseif($attachment->type == 'confiscation_letter')
                                        كتاب المصادرة
                                    @elseif($attachment->type == 'final_degree_decision')
                                        قرار اكتساب الدرجة
                                    @elseif($attachment->type == 'valuation_document')
                                        وثيقة التثمين
                                    @elseif($attachment->type == 'authentication_letter')
                                        كتاب المصادقة
                                    @elseif($attachment->type == 'donation_letter')
                                        كتاب الإهداء
                                    @elseif($attachment->type == 'registration_document')
                                        وثيقة الترقيم
                                    @else
                                        مرفق
                                    @endif
                                </a>
                                @endforeach
                            @else
                                <span class="text-muted">لا توجد مرفقات</span>
                            @endif
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</div>
@endif

<!-- Edit Request History Section -->
@if($vehicle->editRequests->count() > 0)
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">سجل طلبات التعديل</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>التاريخ</th>
                        <th>الحقل</th>
                        <th>القيمة القديمة</th>
                        <th>القيمة الجديدة</th>
                        <th>المستخدم</th>
                        <th>الحالة</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($vehicle->editRequests->sortByDesc('created_at') as $request)
                    <tr>
                        <td>{{ $request->created_at->format('Y-m-d H:i') }}</td>
                        <td>{{ $request->field_name }}</td>
                        <td>{{ Str::limit($request->old_value, 30) ?: 'غير محدد' }}</td>
                        <td>{{ Str::limit($request->new_value, 30) }}</td>
                        <td>{{ $request->user->name }}</td>
                        <td>
                            @if($request->status == 'pending')
                            <span class="badge bg-warning">قيد الانتظار</span>
                            @elseif($request->status == 'approved')
                            <span class="badge bg-success">تمت الموافقة</span>
                            @else
                            <span class="badge bg-danger">مرفوض</span>
                            @endif
                        </td>
                        <td>
                            <a href="{{ route('edit-requests.show', $request) }}" class="btn btn-sm btn-primary">
                                <i class="bi bi-eye"></i> عرض
                            </a>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</div>
@endif

<!-- Notes Section -->
@if($vehicle->notes)
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">ملاحظات</h5>
    </div>
    <div class="card-body">
        <p>{{ $vehicle->notes }}</p>
    </div>
</div>
@endif

<!-- Modals -->
@can('update vehicle status')
@if($vehicle->type == 'confiscated')
<!-- Seizure Status Modal -->
<div class="modal fade" id="seizureStatusModal" tabindex="-1" aria-labelledby="seizureStatusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form action="{{ route('vehicles.update-seizure-status', $vehicle) }}" method="POST" enctype="multipart/form-data">
                @csrf
                <div class="modal-header">
                    <h5 class="modal-title" id="seizureStatusModalLabel">تحديث حالة المصادرة</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <label for="seizure_status" class="col-sm-3 col-form-label required-field">الحالة</label>
                        <div class="col-sm-9">
                            <select name="seizure_status" id="seizure_status" class="form-select" required>
                                <option value="محجوزة" {{ $vehicle->seizure_status == 'محجوزة' ? 'selected' : '' }}>محجوزة</option>
                                <option value="مفرج عنها" {{ $vehicle->seizure_status == 'مفرج عنها' ? 'selected' : '' }}>مفرج عنها</option>
                                <option value="مصادرة" {{ $vehicle->seizure_status == 'مصادرة' ? 'selected' : '' }}>مصادرة</option>
                           </select>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="letter_number" class="col-sm-3 col-form-label required-field">رقم الكتاب/القرار</label>
                       <div class="col-sm-9">
                           <input type="text" class="form-control" id="letter_number" name="letter_number" required>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="letter_date" class="col-sm-3 col-form-label required-field">تاريخ الكتاب/القرار</label>
                       <div class="col-sm-9">
                           <input type="date" class="form-control" id="letter_date" name="letter_date" required>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="attachment" class="col-sm-3 col-form-label required-field">صورة الكتاب/القرار</label>
                       <div class="col-sm-9">
                           <input type="file" class="form-control" id="attachment" name="attachment" required>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="notes" class="col-sm-3 col-form-label">ملاحظات</label>
                       <div class="col-sm-9">
                           <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                       </div>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-primary">حفظ التغييرات</button>
               </div>
           </form>
       </div>
   </div>
</div>

<!-- Final Degree Status Modal -->
<div class="modal fade" id="finalDegreeStatusModal" tabindex="-1" aria-labelledby="finalDegreeStatusModalLabel" aria-hidden="true">
   <div class="modal-dialog modal-lg">
       <div class="modal-content">
           <form action="{{ route('vehicles.update-final-degree-status', $vehicle) }}" method="POST" enctype="multipart/form-data">
               @csrf
               <div class="modal-header">
                   <h5 class="modal-title" id="finalDegreeStatusModalLabel">تحديث حالة اكتساب الدرجة القطعية</h5>
                   <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body">
                   <div class="row mb-3">
                       <label for="final_degree_status" class="col-sm-3 col-form-label required-field">الحالة</label>
                       <div class="col-sm-9">
                           <select name="final_degree_status" id="final_degree_status" class="form-select" required>
                               <option value="غير مكتسبة" {{ $vehicle->final_degree_status == 'غير مكتسبة' ? 'selected' : '' }}>غير مكتسبة</option>
                               <option value="مكتسبة" {{ $vehicle->final_degree_status == 'مكتسبة' ? 'selected' : '' }}>مكتسبة</option>
                           </select>
                       </div>
                   </div>
                   <div class="final-degree-fields" style="display: none;">
                       <div class="row mb-3">
                           <label for="decision_number" class="col-sm-3 col-form-label required-field">رقم القرار</label>
                           <div class="col-sm-9">
                               <input type="text" class="form-control" id="decision_number" name="decision_number">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="decision_date" class="col-sm-3 col-form-label required-field">تاريخ القرار</label>
                           <div class="col-sm-9">
                               <input type="date" class="form-control" id="decision_date" name="decision_date">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="attachment" class="col-sm-3 col-form-label required-field">صورة القرار</label>
                           <div class="col-sm-9">
                               <input type="file" class="form-control" id="attachment" name="attachment">
                           </div>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="notes" class="col-sm-3 col-form-label">ملاحظات</label>
                       <div class="col-sm-9">
                           <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                       </div>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-primary">حفظ التغييرات</button>
               </div>
           </form>
       </div>
   </div>
</div>

<!-- Valuation Status Modal -->
<div class="modal fade" id="valuationStatusModal" tabindex="-1" aria-labelledby="valuationStatusModalLabel" aria-hidden="true">
   <div class="modal-dialog modal-lg">
       <div class="modal-content">
           <form action="{{ route('vehicles.update-valuation-status', $vehicle) }}" method="POST" enctype="multipart/form-data">
               @csrf
               <div class="modal-header">
                   <h5 class="modal-title" id="valuationStatusModalLabel">تحديث حالة التثمين</h5>
                   <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body">
                   <div class="row mb-3">
                       <label for="valuation_status" class="col-sm-3 col-form-label required-field">الحالة</label>
                       <div class="col-sm-9">
                           <select name="valuation_status" id="valuation_status" class="form-select" required>
                               <option value="غير مثمنة" {{ $vehicle->valuation_status == 'غير مثمنة' ? 'selected' : '' }}>غير مثمنة</option>
                               <option value="مثمنة" {{ $vehicle->valuation_status == 'مثمنة' ? 'selected' : '' }}>مثمنة</option>
                           </select>
                       </div>
                   </div>
                   <div class="valuation-fields" style="display: none;">
                       <div class="row mb-3">
                           <label for="valuation_amount" class="col-sm-3 col-form-label required-field">مبلغ التثمين</label>
                           <div class="col-sm-9">
                               <div class="input-group">
                                   <input type="number" class="form-control" id="valuation_amount" name="valuation_amount" step="0.01">
                                   <span class="input-group-text">د.ع</span>
                               </div>
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="attachment" class="col-sm-3 col-form-label required-field">تقرير التثمين</label>
                           <div class="col-sm-9">
                               <input type="file" class="form-control" id="attachment" name="attachment">
                           </div>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="notes" class="col-sm-3 col-form-label">ملاحظات</label>
                       <div class="col-sm-9">
                           <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                       </div>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-primary">حفظ التغييرات</button>
               </div>
           </form>
       </div>
   </div>
</div>

<!-- Authentication Status Modal -->
<div class="modal fade" id="authenticationStatusModal" tabindex="-1" aria-labelledby="authenticationStatusModalLabel" aria-hidden="true">
   <div class="modal-dialog modal-lg">
       <div class="modal-content">
           <form action="{{ route('vehicles.update-authentication-status', $vehicle) }}" method="POST" enctype="multipart/form-data">
               @csrf
               <div class="modal-header">
                   <h5 class="modal-title" id="authenticationStatusModalLabel">تحديث حالة المصادقة</h5>
                   <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body">
                   <div class="row mb-3">
                       <label for="authentication_status" class="col-sm-3 col-form-label required-field">الحالة</label>
                       <div class="col-sm-9">
                           <select name="authentication_status" id="authentication_status" class="form-select" required>
                               <option value="غير مصادق عليها" {{ $vehicle->authentication_status == 'غير مصادق عليها' ? 'selected' : '' }}>غير مصادق عليها</option>
                               <option value="تمت المصادقة عليها" {{ $vehicle->authentication_status == 'تمت المصادقة عليها' ? 'selected' : '' }}>تمت المصادقة عليها</option>
                           </select>
                       </div>
                   </div>
                   <div class="authentication-fields" style="display: none;">
                       <div class="row mb-3">
                           <label for="authentication_number" class="col-sm-3 col-form-label required-field">رقم المصادقة</label>
                           <div class="col-sm-9">
                               <input type="text" class="form-control" id="authentication_number" name="authentication_number">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="authentication_date" class="col-sm-3 col-form-label required-field">تاريخ المصادقة</label>
                           <div class="col-sm-9">
                               <input type="date" class="form-control" id="authentication_date" name="authentication_date">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="attachment" class="col-sm-3 col-form-label required-field">صورة كتاب المصادقة</label>
                           <div class="col-sm-9">
                               <input type="file" class="form-control" id="attachment" name="attachment">
                           </div>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="notes" class="col-sm-3 col-form-label">ملاحظات</label>
                       <div class="col-sm-9">
                           <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                       </div>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-primary">حفظ التغييرات</button>
               </div>
           </form>
       </div>
   </div>
</div>

<!-- Donation Status Modal -->
<div class="modal fade" id="donationStatusModal" tabindex="-1" aria-labelledby="donationStatusModalLabel" aria-hidden="true">
   <div class="modal-dialog modal-lg">
       <div class="modal-content">
           <form action="{{ route('vehicles.update-donation-status', $vehicle) }}" method="POST" enctype="multipart/form-data">
               @csrf
               <div class="modal-header">
                   <h5 class="modal-title" id="donationStatusModalLabel">تحديث حالة الإهداء</h5>
                   <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body">
                   <div class="row mb-3">
                       <label for="donation_status" class="col-sm-3 col-form-label required-field">الحالة</label>
                       <div class="col-sm-9">
                           <select name="donation_status" id="donation_status" class="form-select" required>
                               <option value="غير مهداة" {{ $vehicle->donation_status == 'غير مهداة' ? 'selected' : '' }}>غير مهداة</option>
                               <option value="مهداة" {{ $vehicle->donation_status == 'مهداة' ? 'selected' : '' }}>مهداة</option>
                           </select>
                       </div>
                   </div>
                   <div class="donation-fields" style="display: none;">
                       <div class="row mb-3">
                           <label for="donation_letter_number" class="col-sm-3 col-form-label required-field">رقم كتاب الإهداء</label>
                           <div class="col-sm-9">
                               <input type="text" class="form-control" id="donation_letter_number" name="donation_letter_number">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="donation_letter_date" class="col-sm-3 col-form-label required-field">تاريخ كتاب الإهداء</label>
                           <div class="col-sm-9">
                               <input type="date" class="form-control" id="donation_letter_date" name="donation_letter_date">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="donation_entity" class="col-sm-3 col-form-label required-field">الجهة المهداة لها</label>
                           <div class="col-sm-9">
                               <input type="text" class="form-control" id="donation_entity" name="donation_entity">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="attachment" class="col-sm-3 col-form-label required-field">صورة كتاب الإهداء</label>
                           <div class="col-sm-9">
                               <input type="file" class="form-control" id="attachment" name="attachment">
                           </div>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="notes" class="col-sm-3 col-form-label">ملاحظات</label>
                       <div class="col-sm-9">
                           <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                       </div>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-primary">حفظ التغييرات</button>
               </div>
           </form>
       </div>
   </div>
</div>

<!-- Registration Status Modal -->
<div class="modal fade" id="registrationStatusModal" tabindex="-1" aria-labelledby="registrationStatusModalLabel" aria-hidden="true">
   <div class="modal-dialog modal-lg">
       <div class="modal-content">
           <form action="{{ route('vehicles.update-registration-status', $vehicle) }}" method="POST" enctype="multipart/form-data">
               @csrf
               <div class="modal-header">
                   <h5 class="modal-title" id="registrationStatusModalLabel">تحديث حالة الترقيم الحكومي</h5>
                   <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body">
                   <div class="row mb-3">
                       <label for="government_registration_status" class="col-sm-3 col-form-label required-field">الحالة</label>
                       <div class="col-sm-9">
                           <select name="government_registration_status" id="government_registration_status" class="form-select" required>
                               <option value="غير مرقمة" {{ $vehicle->government_registration_status == 'غير مرقمة' ? 'selected' : '' }}>غير مرقمة</option>
                               <option value="مرقمة" {{ $vehicle->government_registration_status == 'مرقمة' ? 'selected' : '' }}>مرقمة</option>
                           </select>
                       </div>
                   </div>
                   <div class="registration-fields" style="display: none;">
                       <div class="row mb-3">
                           <label for="registration_letter_number" class="col-sm-3 col-form-label required-field">رقم كتاب الترقيم</label>
                           <div class="col-sm-9">
                               <input type="text" class="form-control" id="registration_letter_number" name="registration_letter_number">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="registration_letter_date" class="col-sm-3 col-form-label required-field">تاريخ كتاب الترقيم</label>
                           <div class="col-sm-9">
                               <input type="date" class="form-control" id="registration_letter_date" name="registration_letter_date">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="government_registration_number" class="col-sm-3 col-form-label required-field">رقم اللوحة الحكومية</label>
                           <div class="col-sm-9">
                               <input type="text" class="form-control" id="government_registration_number" name="government_registration_number">
                           </div>
                       </div>
                       <div class="row mb-3">
                           <label for="attachment" class="col-sm-3 col-form-label required-field">صورة كتاب الترقيم</label>
                           <div class="col-sm-9">
                               <input type="file" class="form-control" id="attachment" name="attachment">
                           </div>
                       </div>
                   </div>
                   <div class="row mb-3">
                       <label for="notes" class="col-sm-3 col-form-label">ملاحظات</label>
                       <div class="col-sm-9">
                           <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                       </div>
                   </div>
               </div>
               <div class="modal-footer">
                   <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                   <button type="submit" class="btn btn-primary">حفظ التغييرات</button>
               </div>
           </form>
       </div>
   </div>
</div>
@endif
@endcan
<!-- نافذة نقل الملكية -->
@if(auth()->user()->hasRole(['admin', 'verifier']))
<div class="modal fade" id="transferOwnershipModal" tabindex="-1" aria-labelledby="transferOwnershipModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form action="{{ route('vehicles.transfer-ownership', $vehicle) }}" method="POST" enctype="multipart/form-data">
                @csrf
                <div class="modal-header">
                    <h5 class="modal-title" id="transferOwnershipModalLabel">نقل ملكية العجلة</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>تنبيه:</strong> سيتم نقل ملكية العجلة بشكل دائم إلى المديرية المحددة ولن يمكن العودة عن ذلك.
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="directorate_id" class="form-label required-field">المديرية المستلمة</label>
                        <select name="directorate_id" id="directorate_id" class="form-select" required>
                            <option value="">-- اختر المديرية --</option>
                            @foreach(\App\Models\Directorate::all() as $directorate)
                                @if($directorate->id != $vehicle->directorate_id)
                                <option value="{{ $directorate->id }}">{{ $directorate->name }}</option>
                                @endif
                            @endforeach
                        </select>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="reason" class="form-label required-field">سبب نقل الملكية</label>
                        <textarea name="reason" id="reason" class="form-control" rows="3" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="attachment" class="form-label required-field">مستند نقل الملكية</label>
                        <input type="file" name="attachment" id="attachment" class="form-control" 
                               accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" required>
                        <small class="form-text text-muted">مطلوب كتاب أو أمر نقل الملكية</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" class="btn btn-primary">تأكيد نقل الملكية</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- نافذة الإحالة الخارجية -->
<div class="modal fade" id="externalReferralModal" tabindex="-1" aria-labelledby="externalReferralModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form action="{{ route('vehicles.external-referral', $vehicle) }}" method="POST" enctype="multipart/form-data">
                @csrf
                <div class="modal-header">
                    <h5 class="modal-title" id="externalReferralModalLabel">إحالة العجلة لجهة خارجية</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>تنبيه:</strong> بعد الإحالة الخارجية، لن يمكن مناقلة العجلة أو نقل ملكيتها.
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="external_entity" class="form-label required-field">الجهة الخارجية</label>
                        <input type="text" name="external_entity" id="external_entity" class="form-control" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="recipient_name" class="form-label required-field">اسم المستلم</label>
                        <input type="text" name="recipient_name" id="recipient_name" class="form-control" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="recipient_id_number" class="form-label required-field">رقم هوية المستلم</label>
                        <input type="text" name="recipient_id_number" id="recipient_id_number" class="form-control" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="recipient_phone" class="form-label">رقم هاتف المستلم</label>
                        <input type="text" name="recipient_phone" id="recipient_phone" class="form-control">
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="receive_date" class="form-label required-field">تاريخ الاستلام</label>
                        <input type="date" name="receive_date" id="receive_date" class="form-control" 
                               value="{{ now()->format('Y-m-d') }}" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="reason" class="form-label required-field">سبب الإحالة</label>
                        <textarea name="reason" id="reason" class="form-control" rows="3" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="attachment" class="form-label required-field">مستند الإحالة</label>
                        <input type="file" name="attachment" id="attachment" class="form-control" 
                               accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" required>
                        <small class="form-text text-muted">مطلوب كتاب أو أمر الإحالة</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="submit" class="btn btn-danger">تأكيد الإحالة</button>
                </div>
            </form>
        </div>
    </div>
</div>
@endif

<!-- Edit Request Modal -->
@can('create edit requests')
<div class="modal fade" id="editRequestModal" tabindex="-1" aria-labelledby="editRequestModalLabel" aria-hidden="true">
   <div class="modal-dialog">
       <div class="modal-content">
           <div class="modal-header">
               <h5 class="modal-title" id="editRequestModalLabel">طلب تعديل</h5>
               <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
           </div>
           <div class="modal-body">
               <p>اختر الحقل الذي ترغب في طلب تعديله:</p>
               <div class="list-group">
                   <h6>معلومات أساسية</h6>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'vehicle_type']) }}" class="list-group-item list-group-item-action">نوع العجلة</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'vehicle_name']) }}" class="list-group-item list-group-item-action">اسم العجلة</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'model']) }}" class="list-group-item list-group-item-action">الموديل</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'chassis_number']) }}" class="list-group-item list-group-item-action">رقم الشاصي</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'vehicle_number']) }}" class="list-group-item list-group-item-action">رقم العجلة</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'province']) }}" class="list-group-item list-group-item-action">المحافظة</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'color']) }}" class="list-group-item list-group-item-action">اللون</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'vehicle_condition']) }}" class="list-group-item list-group-item-action">حالة العجلة</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'missing_parts']) }}" class="list-group-item list-group-item-action">النواقص</a>
                   
                   @if($vehicle->type == 'confiscated')
                   <h6 class="mt-3">معلومات العجلة المصادرة</h6>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'defendant_name']) }}" class="list-group-item list-group-item-action">اسم المتهم</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'legal_article']) }}" class="list-group-item list-group-item-action">المادة القانونية</a>
                   @elseif($vehicle->type == 'government')
                   <h6 class="mt-3">معلومات العجلة الحكومية</h6>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'source']) }}" class="list-group-item list-group-item-action">وردت من</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'import_letter_number']) }}" class="list-group-item list-group-item-action">رقم كتاب الوارد</a>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'import_letter_date']) }}" class="list-group-item list-group-item-action">تاريخ كتاب الوارد</a>
                   @endif
                   
                   <h6 class="mt-3">معلومات أخرى</h6>
                   <a href="{{ route('edit-requests.create', [$vehicle, 'notes']) }}" class="list-group-item list-group-item-action">الملاحظات</a>
               </div>
           </div>
           <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
           </div>
       </div>
   </div>
</div>
@endcan

@endsection

@push('scripts')
<script>
   document.addEventListener('DOMContentLoaded', function() {
       // تشخيص Bootstrap
       console.log('Bootstrap:', typeof bootstrap);
       console.log('Modal elements:', {
           seizure: document.getElementById('seizureStatusModal'),
           finalDegree: document.getElementById('finalDegreeStatusModal'),
           valuation: document.getElementById('valuationStatusModal'),
           authentication: document.getElementById('authenticationStatusModal'),
           donation: document.getElementById('donationStatusModal'),
           registration: document.getElementById('registrationStatusModal')
       });
       
       // For Final Degree Status
       const finalDegreeStatus = document.getElementById('final_degree_status');
       const finalDegreeFields = document.querySelector('.final-degree-fields');
       
       if (finalDegreeStatus) {
           finalDegreeStatus.addEventListener('change', function() {
               if (this.value === 'مكتسبة') {
                   finalDegreeFields.style.display = 'block';
                   document.getElementById('decision_number').setAttribute('required', 'required');
                   document.getElementById('decision_date').setAttribute('required', 'required');
                   document.querySelector('#finalDegreeStatusModal #attachment').setAttribute('required', 'required');
               } else {
                   finalDegreeFields.style.display = 'none';
                   document.getElementById('decision_number').removeAttribute('required');
                   document.getElementById('decision_date').removeAttribute('required');
                   document.querySelector('#finalDegreeStatusModal #attachment').removeAttribute('required');
               }
           });
           
           // Trigger on load
           if (finalDegreeStatus.value === 'مكتسبة') {
               finalDegreeFields.style.display = 'block';
               document.getElementById('decision_number').setAttribute('required', 'required');
               document.getElementById('decision_date').setAttribute('required', 'required');
               document.querySelector('#finalDegreeStatusModal #attachment').setAttribute('required', 'required');
           }
       }
       
       // For Valuation Status
       const valuationStatus = document.getElementById('valuation_status');
       const valuationFields = document.querySelector('.valuation-fields');
       
       if (valuationStatus) {
           valuationStatus.addEventListener('change', function() {
               if (this.value === 'مثمنة') {
                   valuationFields.style.display = 'block';
                   document.getElementById('valuation_amount').setAttribute('required', 'required');
                   document.querySelector('#valuationStatusModal #attachment').setAttribute('required', 'required');
               } else {
                   valuationFields.style.display = 'none';
                   document.getElementById('valuation_amount').removeAttribute('required');
                   document.querySelector('#valuationStatusModal #attachment').removeAttribute('required');
               }
           });
           
           // Trigger on load
           if (valuationStatus.value === 'مثمنة') {
               valuationFields.style.display = 'block';
               document.getElementById('valuation_amount').setAttribute('required', 'required');
               document.querySelector('#valuationStatusModal #attachment').setAttribute('required', 'required');
           }
       }
       
       // For Authentication Status
       const authenticationStatus = document.getElementById('authentication_status');
       const authenticationFields = document.querySelector('.authentication-fields');
       
       if (authenticationStatus) {
           authenticationStatus.addEventListener('change', function() {
               if (this.value === 'تمت المصادقة عليها') {
                   authenticationFields.style.display = 'block';
                   document.getElementById('authentication_number').setAttribute('required', 'required');
                   document.getElementById('authentication_date').setAttribute('required', 'required');
                   document.querySelector('#authenticationStatusModal #attachment').setAttribute('required', 'required');
               } else {
                   authenticationFields.style.display = 'none';
                   document.getElementById('authentication_number').removeAttribute('required');
                   document.getElementById('authentication_date').removeAttribute('required');
                   document.querySelector('#authenticationStatusModal #attachment').removeAttribute('required');
               }
           });
           
           // Trigger on load
           if (authenticationStatus.value === 'تمت المصادقة عليها') {
               authenticationFields.style.display = 'block';
               document.getElementById('authentication_number').setAttribute('required', 'required');
               document.getElementById('authentication_date').setAttribute('required', 'required');
               document.querySelector('#authenticationStatusModal #attachment').setAttribute('required', 'required');
           }
       }
       
       // For Donation Status
       const donationStatus = document.getElementById('donation_status');
       const donationFields = document.querySelector('.donation-fields');
       
       if (donationStatus) {
           donationStatus.addEventListener('change', function() {
               if (this.value === 'مهداة') {
                   donationFields.style.display = 'block';
                   document.getElementById('donation_letter_number').setAttribute('required', 'required');
                   document.getElementById('donation_letter_date').setAttribute('required', 'required');
                   document.getElementById('donation_entity').setAttribute('required', 'required');
                   document.querySelector('#donationStatusModal #attachment').setAttribute('required', 'required');
               } else {
                   donationFields.style.display = 'none';
                   document.getElementById('donation_letter_number').removeAttribute('required');
                   document.getElementById('donation_letter_date').removeAttribute('required');
                   document.getElementById('donation_entity').removeAttribute('required');
                   document.querySelector('#donationStatusModal #attachment').removeAttribute('required');
               }
           });
           // Trigger on load
           if (donationStatus.value === 'مهداة') {
               donationFields.style.display = 'block';
               document.getElementById('donation_letter_number').setAttribute('required', 'required');
               document.getElementById('donation_letter_date').setAttribute('required', 'required');
               document.getElementById('donation_entity').setAttribute('required', 'required');
               document.querySelector('#donationStatusModal #attachment').setAttribute('required', 'required');
           }
       }
       
       // For Registration Status
       const registrationStatus = document.getElementById('government_registration_status');
       const registrationFields = document.querySelector('.registration-fields');
       
       if (registrationStatus) {
           registrationStatus.addEventListener('change', function() {
               if (this.value === 'مرقمة') {
                   registrationFields.style.display = 'block';
                   document.getElementById('registration_letter_number').setAttribute('required', 'required');
                   document.getElementById('registration_letter_date').setAttribute('required', 'required');
                   document.getElementById('government_registration_number').setAttribute('required', 'required');
                   document.querySelector('#registrationStatusModal #attachment').setAttribute('required', 'required');
               } else {
                   registrationFields.style.display = 'none';
                   document.getElementById('registration_letter_number').removeAttribute('required');
                   document.getElementById('registration_letter_date').removeAttribute('required');
                   document.getElementById('government_registration_number').removeAttribute('required');
                   document.querySelector('#registrationStatusModal #attachment').removeAttribute('required');
               }
           });
           
           // Trigger on load
           if (registrationStatus.value === 'مرقمة') {
               registrationFields.style.display = 'block';
               document.getElementById('registration_letter_number').setAttribute('required', 'required');
               document.getElementById('registration_letter_date').setAttribute('required', 'required');
               document.getElementById('government_registration_number').setAttribute('required', 'required');
               document.querySelector('#registrationStatusModal #attachment').setAttribute('required', 'required');
           }
       }
       
       // تحقق من عمل الأزرار المشغلة للـ modals
       const modalButtons = document.querySelectorAll('[data-bs-toggle="modal"]');
       if (modalButtons) {
           modalButtons.forEach(button => {
               console.log('Modal button:', button.dataset.bsTarget);
               button.addEventListener('click', function() {
                   console.log('Modal button clicked:', this.dataset.bsTarget);
                   try {
                       const modalId = this.dataset.bsTarget;
                       const modalElement = document.querySelector(modalId);
                       if (modalElement) {
                           const modal = new bootstrap.Modal(modalElement);
                           modal.show();
                       } else {
                           console.error('Modal element not found:', modalId);
                       }
                   } catch (e) {
                       console.error('Error showing modal:', e);
                   }
               });
           });
       }
   });
</script>
@endpush
</file>

<file path="routes/auth.php">
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    // نحن نستخدم تسجيل الدخول فقط، بدون تسجيل مستخدمين جديد
    Route::get('login', [AuthenticatedSessionController::class, 'create'])->name('login');
    Route::post('login', [AuthenticatedSessionController::class, 'store']);
    
    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])->name('password.request');
    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])->name('password.email');
    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])->name('password.reset');
    Route::post('reset-password', [NewPasswordController::class, 'store'])->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])->name('logout');
});
</file>

<file path="routes/console.php">
<?php

use Illuminate\Foundation\Console\ClosureCommand;
use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    /** @var ClosureCommand $this */
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
</file>

<file path="routes/web.php">
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\VehicleController;
use App\Http\Controllers\VehicleStatusController;
use App\Http\Controllers\VehicleTransferController;
use App\Http\Controllers\EditRequestController;
use App\Http\Controllers\AttachmentController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\NotificationController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
*/

Route::get('/', function () {
    return redirect()->route('login');
});

// Authentication routes
Route::get('login', [App\Http\Controllers\Auth\LoginController::class, 'showLoginForm'])->name('login');
Route::post('login', [App\Http\Controllers\Auth\LoginController::class, 'login']);
Route::post('logout', [App\Http\Controllers\Auth\LoginController::class, 'logout'])->name('logout');


// Protected routes
Route::middleware(['auth'])->group(function () {
    // Dashboard
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    
    // Vehicles
    Route::resource('vehicles', VehicleController::class);
    
    // Vehicle Status Updates
    Route::post('/vehicles/{vehicle}/update-seizure-status', [VehicleStatusController::class, 'updateSeizureStatus'])
        ->name('vehicles.update-seizure-status');
    Route::post('/vehicles/{vehicle}/update-final-degree-status', [VehicleStatusController::class, 'updateFinalDegreeStatus'])
        ->name('vehicles.update-final-degree-status');
    Route::post('/vehicles/{vehicle}/update-valuation-status', [VehicleStatusController::class, 'updateValuationStatus'])
        ->name('vehicles.update-valuation-status');
    Route::post('/vehicles/{vehicle}/update-authentication-status', [VehicleStatusController::class, 'updateAuthenticationStatus'])
        ->name('vehicles.update-authentication-status');
    Route::post('/vehicles/{vehicle}/update-donation-status', [VehicleStatusController::class, 'updateDonationStatus'])
        ->name('vehicles.update-donation-status');
    Route::post('/vehicles/{vehicle}/update-registration-status', [VehicleStatusController::class, 'updateRegistrationStatus'])
        ->name('vehicles.update-registration-status');
    
    // Transfers
    Route::get('/transfers', [VehicleTransferController::class, 'index'])->name('transfers.index');
    Route::get('/vehicles/{vehicle}/transfers/create', [VehicleTransferController::class, 'create'])->name('transfers.create');
    Route::post('/vehicles/{vehicle}/transfers', [VehicleTransferController::class, 'store'])->name('transfers.store');
    Route::get('/transfers/{transfer}', [VehicleTransferController::class, 'show'])->name('transfers.show');
    Route::post('/transfers/{transfer}/complete', [VehicleTransferController::class, 'completeTransfer'])->name('transfers.complete');
    
    // Edit Requests
    Route::get('/edit-requests', [EditRequestController::class, 'index'])->name('edit-requests.index');
    Route::get('/vehicles/{vehicle}/edit-requests/{field}/create', [EditRequestController::class, 'create'])->name('edit-requests.create');
    Route::post('/vehicles/{vehicle}/edit-requests', [EditRequestController::class, 'store'])->name('edit-requests.store');
    Route::get('/edit-requests/{editRequest}', [EditRequestController::class, 'show'])->name('edit-requests.show');
    Route::post('/edit-requests/{editRequest}/approve', [EditRequestController::class, 'approve'])->name('edit-requests.approve');
    Route::post('/edit-requests/{editRequest}/reject', [EditRequestController::class, 'reject'])->name('edit-requests.reject');
    
    // Attachments
    Route::get('/attachments/{attachment}', [AttachmentController::class, 'show'])->name('attachments.show');
    Route::get('/attachments/{attachment}/download', [AttachmentController::class, 'download'])->name('attachments.download');
    Route::delete('/attachments/{attachment}', [AttachmentController::class, 'destroy'])->name('attachments.destroy');
    
    // Users (admin only)
    Route::resource('users', UserController::class)->middleware('role:admin');

    // Vehicle ownership transfer and external referral routes
    Route::post('/vehicles/{vehicle}/transfer-ownership', [VehicleTransferController::class, 'transferOwnership'])
    ->name('vehicles.transfer-ownership');
    
    Route::post('/vehicles/{vehicle}/external-referral', [VehicleTransferController::class, 'externalReferral'])
    ->name('vehicles.external-referral');
    
    // Notifications
    Route::get('/notifications', [NotificationController::class, 'index'])->name('notifications.index');
    Route::post('/notifications/{id}/mark-as-read', [NotificationController::class, 'markAsRead'])->name('notifications.mark-as-read');
    Route::post('/notifications/mark-all-as-read', [NotificationController::class, 'markAllAsRead'])->name('notifications.mark-all-as-read');

    Route::get('/api/check-recipient', function(Request $request) {
        $idNumber = $request->input('id_number');
        if (!$idNumber) {
            return response()->json(['count' => 0]);
        }
        
        $count = VehicleTransfer::whereNull('return_date')
            ->where('recipient_id_number', $idNumber)
            ->where('is_ownership_transfer', false)
            ->where('is_referral', false)
            ->count();
        
        return response()->json(['count' => $count]);
    })->middleware('auth')->name('api.check-recipient');
    

});
</file>

<file path="storage/framework/.gitignore">
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json
</file>

</files>
